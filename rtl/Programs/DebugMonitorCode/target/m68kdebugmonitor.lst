680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 10 Apr 2024      Time: 21:25:48          Source: C:\proj\tetris\RTL\PROGRAMS\DEBUGMONITORCODE\TARGET\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0770 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  20D4      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1DAC      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\proj\tetris\RTL\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; #include "tetris.h"
                     456   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     457   ; #define StartOfExceptionVectorTable 0x08030000
                     458   ; //#define StartOfExceptionVectorTable 0x0B000000
                     459   ; // use 0C000000 for dram or hex 08040000 for sram
                     460   ; #define TopOfStack 0x08040000
                     461   ; //#define TopOfStack 0x0C000000
                     462   ; //define timer addresses
                     463   ; #define TIMER5_DATA     (*(volatile unsigned char *)(0x00400130))
                     464   ; #define TIMER5_CONTROL  (*(volatile unsigned char *)(0x00400132))
                     465   ; #define TIMER5_STATUS   (*(volatile unsigned char *)(0x00400132))
                     466   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     467   ; unsigned int i, x, y, z, PortA_Count;
                     468   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     469   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     470   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     471   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     472   ; unsigned int PC, SSP, USP ;
                     473   ; unsigned short int SR;
                     474   ; // Breakpoint variables
                     475   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     476   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     477   ; unsigned int BreakPointSetOrCleared[8] ;
                     478   ; unsigned int InstructionSize ;
                     479   ; // watchpoint variables
                     480   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     481   ; unsigned int WatchPointSetOrCleared[8] ;
                     482   ; char WatchPointString[8][100] ;
                     483   ; char    TempString[100] ;
                     484   ; // clock timer
                     485   ; volatile long clockTimer;
                     486   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     487   ; {
                     488   _InstallExceptionHandler:
000008C6  4E56 FFFC  489          link      A6,#-4
                     490   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
000008CA  2D7C 0803  491          move.l    #134414336,-4(A6)
000008CE  0000 FFFC 
                     492   ; RamVectorAddress[level] = (long int *)(function_ptr);
000008D2  206E FFFC  493          move.l    -4(A6),A0
000008D6  202E 000C  494          move.l    12(A6),D0
000008DA  E588       495          lsl.l     #2,D0
000008DC  21AE 0008  496          move.l    8(A6),0(A0,D0.L)
000008E0  0800      
000008E2  4E5E       497          unlk      A6
000008E4  4E75       498          rts
                     499   ; }
                     500   ; void say_phoneme   (char phoneme_code) {
                     501   _say_phoneme:
000008E6  4E56 0000  502          link      A6,#0
                     503   ; while(SYN_BUSY & 0x01);
                     504   say_phoneme_1:
000008EA  1039 F004  505          move.b    -268156925,D0
000008EE  4003      
000008F0  C03C 0001  506          and.b     #1,D0
000008F4  6702       507          beq.s     say_phoneme_3
000008F6  60F2       508          bra       say_phoneme_1
                     509   say_phoneme_3:
                     510   ; SYN_SEL = phoneme_code;
000008F8  13EE 000B  511          move.b    11(A6),-268156927
000008FC  F004 4001 
00000900  4E5E       512          unlk      A6
00000902  4E75       513          rts
                     514   ; //you need to write this function		
                     515   ; }
                     516   ; void say_hello() {
                     517   _say_hello:
                     518   ; talkphonemeHH1();
00000904  4EB9 0000  519          jsr       _talkphonemeHH1
00000908  23E2      
                     520   ; talkphonemeEH();
0000090A  4EB9 0000  521          jsr       _talkphonemeEH
0000090E  2376      
                     522   ; talkphonemeLL();
00000910  4EB9 0000  523          jsr       _talkphonemeLL
00000914  2442      
                     524   ; talkphonemeAX();
00000916  4EB9 0000  525          jsr       _talkphonemeAX
0000091A  230A      
                     526   ; talkphonemeOW();
0000091C  4EB9 0000  527          jsr       _talkphonemeOW
00000920  248A      
                     528   ; endword();
00000922  4EB9 0000  529          jsr       _endword
00000926  2974      
00000928  4E75       530          rts
                     531   ; }
                     532   ; void say_world() {
                     533   _say_world:
                     534   ; talkphonemeWW();
0000092A  4EB9 0000  535          jsr       _talkphonemeWW
0000092E  253E      
                     536   ; talkphonemeER2();
00000930  4EB9 0000  537          jsr       _talkphonemeER2
00000934  239A      
                     538   ; talkphonemeLL();
00000936  4EB9 0000  539          jsr       _talkphonemeLL
0000093A  2442      
                     540   ; talkphonemeDD1();
0000093C  4EB9 0000  541          jsr       _talkphonemeDD1
00000940  2346      
                     542   ; endword();
00000942  4EB9 0000  543          jsr       _endword
00000946  2974      
00000948  4E75       544          rts
                     545   ; }
                     546   ; /*********************************************************************************************
                     547   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     548   ; *********************************************************************************************/
                     549   ; void Init_RS232(void)
                     550   ; {
                     551   _Init_RS232:
                     552   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
0000094A  13FC 0015  553          move.b    #21,4194368
0000094E  0040 0040 
                     554   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000952  13FC 0001  555          move.b    #1,4194372
00000956  0040 0044 
0000095A  4E75       556          rts
                     557   ; }
                     558   ; int kbhit(void)
                     559   ; {
                     560   _kbhit:
                     561   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
0000095C  1039 0040  562          move.b    4194368,D0
00000960  0040      
00000962  C03C 0001  563          and.b     #1,D0
00000966  0C00 0001  564          cmp.b     #1,D0
0000096A  6604       565          bne.s     kbhit_1
                     566   ; return 1 ;
0000096C  7001       567          moveq     #1,D0
0000096E  6002       568          bra.s     kbhit_3
                     569   kbhit_1:
                     570   ; else
                     571   ; return 0 ;
00000970  4280       572          clr.l     D0
                     573   kbhit_3:
00000972  4E75       574          rts
                     575   ; }
                     576   ; /*********************************************************************************************************
                     577   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     578   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     579   ; **  to allow the board to communicate with HyperTerminal Program
                     580   ; **
                     581   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     582   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     583   ; **  call _putch() also
                     584   ; *********************************************************************************************************/
                     585   ; int _putch( int c)
                     586   ; {
                     587   __putch:
00000974  4E56 0000  588          link      A6,#0
                     589   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     590   _putch_1:
00000978  1039 0040  591          move.b    4194368,D0
0000097C  0040      
0000097E  C03C 0002  592          and.b     #2,D0
00000982  0C00 0002  593          cmp.b     #2,D0
00000986  6702       594          beq.s     _putch_3
00000988  60EE       595          bra       _putch_1
                     596   _putch_3:
                     597   ; ;
                     598   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
0000098A  202E 0008  599          move.l    8(A6),D0
0000098E  C03C 007F  600          and.b     #127,D0
00000992  13C0 0040  601          move.b    D0,4194370
00000996  0042      
                     602   ; return c ;                                              // putchar() expects the character to be returned
00000998  202E 0008  603          move.l    8(A6),D0
0000099C  4E5E       604          unlk      A6
0000099E  4E75       605          rts
                     606   ; }
                     607   ; /*********************************************************************************************************
                     608   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     609   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     610   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     611   ; **
                     612   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     613   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     614   ; **  call _getch() also
                     615   ; *********************************************************************************************************/
                     616   ; int _getch( void )
                     617   ; {
                     618   __getch:
000009A0  2F02       619          move.l    D2,-(A7)
                     620   ; int c ;
                     621   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     622   _getch_1:
000009A2  1039 0040  623          move.b    4194368,D0
000009A6  0040      
000009A8  C03C 0001  624          and.b     #1,D0
000009AC  0C00 0001  625          cmp.b     #1,D0
000009B0  6702       626          beq.s     _getch_3
000009B2  60EE       627          bra       _getch_1
                     628   _getch_3:
                     629   ; ;
                     630   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
000009B4  1039 0040  631          move.b    4194370,D0
000009B8  0042      
000009BA  C0BC 0000  632          and.l     #255,D0
000009BE  00FF      
000009C0  C0BC 0000  633          and.l     #127,D0
000009C4  007F      
000009C6  2400       634          move.l    D0,D2
                     635   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     636   ; if(Echo)
000009C8  4AB9 0803  637          tst.l     _Echo.L
000009CC  00E0      
000009CE  6708       638          beq.s     _getch_4
                     639   ; _putch(c);
000009D0  2F02       640          move.l    D2,-(A7)
000009D2  4EB8 0974  641          jsr       __putch
000009D6  584F       642          addq.w    #4,A7
                     643   _getch_4:
                     644   ; return c ;
000009D8  2002       645          move.l    D2,D0
000009DA  241F       646          move.l    (A7)+,D2
000009DC  4E75       647          rts
                     648   ; }
                     649   ; // flush the input stream for any unread characters
                     650   ; void FlushKeyboard(void)
                     651   ; {
                     652   _FlushKeyboard:
000009DE  4E56 FFFC  653          link      A6,#-4
                     654   ; char c ;
                     655   ; while(1)    {
                     656   FlushKeyboard_1:
                     657   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
000009E2  1039 0040  658          move.b    4194368,D0
000009E6  0040      
000009E8  C03C 0001  659          and.b     #1,D0
000009EC  0C00 0001  660          cmp.b     #1,D0
000009F0  6610       661          bne.s     FlushKeyboard_4
                     662   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
000009F2  1039 0040  663          move.b    4194370,D0
000009F6  0042      
000009F8  C03C 007F  664          and.b     #127,D0
000009FC  1D40 FFFF  665          move.b    D0,-1(A6)
00000A00  6002       666          bra.s     FlushKeyboard_5
                     667   FlushKeyboard_4:
                     668   ; else
                     669   ; return ;
00000A02  6002       670          bra.s     FlushKeyboard_6
                     671   FlushKeyboard_5:
00000A04  60DC       672          bra       FlushKeyboard_1
                     673   FlushKeyboard_6:
00000A06  4E5E       674          unlk      A6
00000A08  4E75       675          rts
                     676   ; }
                     677   ; }
                     678   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     679   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     680   ; char xtod(int c)
                     681   ; {
                     682   _xtod:
00000A0A  4E56 0000  683          link      A6,#0
00000A0E  2F02       684          move.l    D2,-(A7)
00000A10  242E 0008  685          move.l    8(A6),D2
                     686   ; if ((char)(c) <= (char)('9'))
00000A14  0C02 0039  687          cmp.b     #57,D2
00000A18  6E08       688          bgt.s     xtod_1
                     689   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000A1A  1002       690          move.b    D2,D0
00000A1C  0400 0030  691          sub.b     #48,D0
00000A20  6014       692          bra.s     xtod_3
                     693   xtod_1:
                     694   ; else if((char)(c) > (char)('F'))    // assume lower case
00000A22  0C02 0046  695          cmp.b     #70,D2
00000A26  6F08       696          ble.s     xtod_4
                     697   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000A28  1002       698          move.b    D2,D0
00000A2A  0400 0057  699          sub.b     #87,D0
00000A2E  6006       700          bra.s     xtod_3
                     701   xtod_4:
                     702   ; else
                     703   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000A30  1002       704          move.b    D2,D0
00000A32  0400 0037  705          sub.b     #55,D0
                     706   xtod_3:
00000A36  241F       707          move.l    (A7)+,D2
00000A38  4E5E       708          unlk      A6
00000A3A  4E75       709          rts
                     710   ; }
                     711   ; int Get2HexDigits(char *CheckSumPtr)
                     712   ; {
                     713   _Get2HexDigits:
00000A3C  4E56 0000  714          link      A6,#0
00000A40  2F02       715          move.l    D2,-(A7)
                     716   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000A42  2F00       717          move.l    D0,-(A7)
00000A44  4EB8 09A0  718          jsr       __getch
00000A48  2200       719          move.l    D0,D1
00000A4A  201F       720          move.l    (A7)+,D0
00000A4C  2F01       721          move.l    D1,-(A7)
00000A4E  4EB8 0A0A  722          jsr       _xtod
00000A52  584F       723          addq.w    #4,A7
00000A54  C0BC 0000  724          and.l     #255,D0
00000A58  00FF      
00000A5A  E980       725          asl.l     #4,D0
00000A5C  2F00       726          move.l    D0,-(A7)
00000A5E  2F01       727          move.l    D1,-(A7)
00000A60  4EB8 09A0  728          jsr       __getch
00000A64  221F       729          move.l    (A7)+,D1
00000A66  2F00       730          move.l    D0,-(A7)
00000A68  4EB8 0A0A  731          jsr       _xtod
00000A6C  584F       732          addq.w    #4,A7
00000A6E  2200       733          move.l    D0,D1
00000A70  201F       734          move.l    (A7)+,D0
00000A72  C2BC 0000  735          and.l     #255,D1
00000A76  00FF      
00000A78  8081       736          or.l      D1,D0
00000A7A  2400       737          move.l    D0,D2
                     738   ; if(CheckSumPtr)
00000A7C  4AAE 0008  739          tst.l     8(A6)
00000A80  6706       740          beq.s     Get2HexDigits_1
                     741   ; *CheckSumPtr += i ;
00000A82  206E 0008  742          move.l    8(A6),A0
00000A86  D510       743          add.b     D2,(A0)
                     744   Get2HexDigits_1:
                     745   ; return i ;
00000A88  2002       746          move.l    D2,D0
00000A8A  241F       747          move.l    (A7)+,D2
00000A8C  4E5E       748          unlk      A6
00000A8E  4E75       749          rts
                     750   ; }
                     751   ; int Get4HexDigits(char *CheckSumPtr)
                     752   ; {
                     753   _Get4HexDigits:
00000A90  4E56 0000  754          link      A6,#0
                     755   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A94  2F2E 0008  756          move.l    8(A6),-(A7)
00000A98  4EB8 0A3C  757          jsr       _Get2HexDigits
00000A9C  584F       758          addq.w    #4,A7
00000A9E  E180       759          asl.l     #8,D0
00000AA0  2F00       760          move.l    D0,-(A7)
00000AA2  2F2E 0008  761          move.l    8(A6),-(A7)
00000AA6  4EB8 0A3C  762          jsr       _Get2HexDigits
00000AAA  584F       763          addq.w    #4,A7
00000AAC  2200       764          move.l    D0,D1
00000AAE  201F       765          move.l    (A7)+,D0
00000AB0  8081       766          or.l      D1,D0
00000AB2  4E5E       767          unlk      A6
00000AB4  4E75       768          rts
                     769   ; }
                     770   ; int Get6HexDigits(char *CheckSumPtr)
                     771   ; {
                     772   _Get6HexDigits:
00000AB6  4E56 0000  773          link      A6,#0
                     774   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000ABA  2F2E 0008  775          move.l    8(A6),-(A7)
00000ABE  4EB8 0A90  776          jsr       _Get4HexDigits
00000AC2  584F       777          addq.w    #4,A7
00000AC4  E180       778          asl.l     #8,D0
00000AC6  2F00       779          move.l    D0,-(A7)
00000AC8  2F2E 0008  780          move.l    8(A6),-(A7)
00000ACC  4EB8 0A3C  781          jsr       _Get2HexDigits
00000AD0  584F       782          addq.w    #4,A7
00000AD2  2200       783          move.l    D0,D1
00000AD4  201F       784          move.l    (A7)+,D0
00000AD6  8081       785          or.l      D1,D0
00000AD8  4E5E       786          unlk      A6
00000ADA  4E75       787          rts
                     788   ; }
                     789   ; int Get8HexDigits(char *CheckSumPtr)
                     790   ; {
                     791   _Get8HexDigits:
00000ADC  4E56 0000  792          link      A6,#0
                     793   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000AE0  2F2E 0008  794          move.l    8(A6),-(A7)
00000AE4  4EB8 0A90  795          jsr       _Get4HexDigits
00000AE8  584F       796          addq.w    #4,A7
00000AEA  E180       797          asl.l     #8,D0
00000AEC  E180       798          asl.l     #8,D0
00000AEE  2F00       799          move.l    D0,-(A7)
00000AF0  2F2E 0008  800          move.l    8(A6),-(A7)
00000AF4  4EB8 0A90  801          jsr       _Get4HexDigits
00000AF8  584F       802          addq.w    #4,A7
00000AFA  2200       803          move.l    D0,D1
00000AFC  201F       804          move.l    (A7)+,D0
00000AFE  8081       805          or.l      D1,D0
00000B00  4E5E       806          unlk      A6
00000B02  4E75       807          rts
                     808   ; }
                     809   ; void DumpMemory(void)   // simple dump memory fn
                     810   ; {
                     811   _DumpMemory:
00000B04  48E7 3C30  812          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B08  45F9 0000  813          lea       _printf.L,A2
00000B0C  37B4      
00000B0E  47F9 0000  814          lea       _putch.L,A3
00000B12  3708      
                     815   ; int i, j ;
                     816   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     817   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B14  4879 0000  818          pea       @m68kde~1_1.L
00000B18  40FC      
00000B1A  4E92       819          jsr       (A2)
00000B1C  584F       820          addq.w    #4,A7
                     821   ; printf("\r\nEnter Start Address: ") ;
00000B1E  4879 0000  822          pea       @m68kde~1_2.L
00000B22  4136      
00000B24  4E92       823          jsr       (A2)
00000B26  584F       824          addq.w    #4,A7
                     825   ; RamPtr = Get8HexDigits(0) ;
00000B28  42A7       826          clr.l     -(A7)
00000B2A  4EB8 0ADC  827          jsr       _Get8HexDigits
00000B2E  584F       828          addq.w    #4,A7
00000B30  2600       829          move.l    D0,D3
                     830   ; while(1)    {
                     831   DumpMemory_1:
                     832   ; for(i = 0; i < 16; i ++)    {
00000B32  4285       833          clr.l     D5
                     834   DumpMemory_4:
00000B34  0C85 0000  835          cmp.l     #16,D5
00000B38  0010      
00000B3A  6C00 0096  836          bge       DumpMemory_6
                     837   ; printf("\r\n%08x ", RamPtr) ;
00000B3E  2F03       838          move.l    D3,-(A7)
00000B40  4879 0000  839          pea       @m68kde~1_3.L
00000B44  414E      
00000B46  4E92       840          jsr       (A2)
00000B48  504F       841          addq.w    #8,A7
                     842   ; for(j=0; j < 16; j ++)  {
00000B4A  4282       843          clr.l     D2
                     844   DumpMemory_7:
00000B4C  0C82 0000  845          cmp.l     #16,D2
00000B50  0010      
00000B52  6C24       846          bge.s     DumpMemory_9
                     847   ; printf("%02X",RamPtr[j]) ;
00000B54  2043       848          move.l    D3,A0
00000B56  1230 2800  849          move.b    0(A0,D2.L),D1
00000B5A  C2BC 0000  850          and.l     #255,D1
00000B5E  00FF      
00000B60  2F01       851          move.l    D1,-(A7)
00000B62  4879 0000  852          pea       @m68kde~1_4.L
00000B66  4156      
00000B68  4E92       853          jsr       (A2)
00000B6A  504F       854          addq.w    #8,A7
                     855   ; putchar(' ') ;
00000B6C  4878 0020  856          pea       32
00000B70  4E93       857          jsr       (A3)
00000B72  584F       858          addq.w    #4,A7
00000B74  5282       859          addq.l    #1,D2
00000B76  60D4       860          bra       DumpMemory_7
                     861   DumpMemory_9:
                     862   ; }
                     863   ; // now display the data as ASCII at the end
                     864   ; printf("  ") ;
00000B78  4879 0000  865          pea       @m68kde~1_5.L
00000B7C  415C      
00000B7E  4E92       866          jsr       (A2)
00000B80  584F       867          addq.w    #4,A7
                     868   ; for(j = 0; j < 16; j++) {
00000B82  4282       869          clr.l     D2
                     870   DumpMemory_10:
00000B84  0C82 0000  871          cmp.l     #16,D2
00000B88  0010      
00000B8A  6C00 003A  872          bge       DumpMemory_12
                     873   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000B8E  2043       874          move.l    D3,A0
00000B90  1030 2800  875          move.b    0(A0,D2.L),D0
00000B94  C03C 007F  876          and.b     #127,D0
00000B98  1800       877          move.b    D0,D4
                     878   ; if((c > (char)(0x7f)) || (c < ' '))
00000B9A  0C04 007F  879          cmp.b     #127,D4
00000B9E  6206       880          bhi.s     DumpMemory_15
00000BA0  0C04 0020  881          cmp.b     #32,D4
00000BA4  640A       882          bhs.s     DumpMemory_13
                     883   DumpMemory_15:
                     884   ; putchar('.') ;
00000BA6  4878 002E  885          pea       46
00000BAA  4E93       886          jsr       (A3)
00000BAC  584F       887          addq.w    #4,A7
00000BAE  6012       888          bra.s     DumpMemory_14
                     889   DumpMemory_13:
                     890   ; else
                     891   ; putchar(RamPtr[j]) ;
00000BB0  2043       892          move.l    D3,A0
00000BB2  1230 2800  893          move.b    0(A0,D2.L),D1
00000BB6  C2BC 0000  894          and.l     #255,D1
00000BBA  00FF      
00000BBC  2F01       895          move.l    D1,-(A7)
00000BBE  4E93       896          jsr       (A3)
00000BC0  584F       897          addq.w    #4,A7
                     898   DumpMemory_14:
00000BC2  5282       899          addq.l    #1,D2
00000BC4  60BE       900          bra       DumpMemory_10
                     901   DumpMemory_12:
                     902   ; }
                     903   ; RamPtr = RamPtr + 16 ;
00000BC6  0683 0000  904          add.l     #16,D3
00000BCA  0010      
00000BCC  5285       905          addq.l    #1,D5
00000BCE  6000 FF64  906          bra       DumpMemory_4
                     907   DumpMemory_6:
                     908   ; }
                     909   ; printf("\r\n") ;
00000BD2  4879 0000  910          pea       @m68kde~1_6.L
00000BD6  4160      
00000BD8  4E92       911          jsr       (A2)
00000BDA  584F       912          addq.w    #4,A7
                     913   ; c = _getch() ;
00000BDC  4EB8 09A0  914          jsr       __getch
00000BE0  1800       915          move.b    D0,D4
                     916   ; if(c == 0x1b)          // break on ESC
00000BE2  0C04 001B  917          cmp.b     #27,D4
00000BE6  6602       918          bne.s     DumpMemory_16
                     919   ; break ;
00000BE8  6004       920          bra.s     DumpMemory_3
                     921   DumpMemory_16:
00000BEA  6000 FF46  922          bra       DumpMemory_1
                     923   DumpMemory_3:
00000BEE  4CDF 0C3C  924          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000BF2  4E75       925          rts
                     926   ; }
                     927   ; }
                     928   ; void FillMemory()
                     929   ; {
                     930   _FillMemory:
00000BF4  48E7 3820  931          movem.l   D2/D3/D4/A2,-(A7)
00000BF8  45F9 0000  932          lea       _printf.L,A2
00000BFC  37B4      
                     933   ; char *StartRamPtr, *EndRamPtr ;
                     934   ; unsigned char FillData ;
                     935   ; printf("\r\nFill Memory Block") ;
00000BFE  4879 0000  936          pea       @m68kde~1_7.L
00000C02  4164      
00000C04  4E92       937          jsr       (A2)
00000C06  584F       938          addq.w    #4,A7
                     939   ; printf("\r\nEnter Start Address: ") ;
00000C08  4879 0000  940          pea       @m68kde~1_8.L
00000C0C  4178      
00000C0E  4E92       941          jsr       (A2)
00000C10  584F       942          addq.w    #4,A7
                     943   ; StartRamPtr = Get8HexDigits(0) ;
00000C12  42A7       944          clr.l     -(A7)
00000C14  4EB8 0ADC  945          jsr       _Get8HexDigits
00000C18  584F       946          addq.w    #4,A7
00000C1A  2400       947          move.l    D0,D2
                     948   ; printf("\r\nEnter End Address: ") ;
00000C1C  4879 0000  949          pea       @m68kde~1_9.L
00000C20  4190      
00000C22  4E92       950          jsr       (A2)
00000C24  584F       951          addq.w    #4,A7
                     952   ; EndRamPtr = Get8HexDigits(0) ;
00000C26  42A7       953          clr.l     -(A7)
00000C28  4EB8 0ADC  954          jsr       _Get8HexDigits
00000C2C  584F       955          addq.w    #4,A7
00000C2E  2800       956          move.l    D0,D4
                     957   ; printf("\r\nEnter Fill Data: ") ;
00000C30  4879 0000  958          pea       @m68kde~1_10.L
00000C34  41A6      
00000C36  4E92       959          jsr       (A2)
00000C38  584F       960          addq.w    #4,A7
                     961   ; FillData = Get2HexDigits(0) ;
00000C3A  42A7       962          clr.l     -(A7)
00000C3C  4EB8 0A3C  963          jsr       _Get2HexDigits
00000C40  584F       964          addq.w    #4,A7
00000C42  1600       965          move.b    D0,D3
                     966   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000C44  C6BC 0000  967          and.l     #255,D3
00000C48  00FF      
00000C4A  2F03       968          move.l    D3,-(A7)
00000C4C  2F04       969          move.l    D4,-(A7)
00000C4E  2F02       970          move.l    D2,-(A7)
00000C50  4879 0000  971          pea       @m68kde~1_11.L
00000C54  41BA      
00000C56  4E92       972          jsr       (A2)
00000C58  DEFC 0010  973          add.w     #16,A7
                     974   ; while(StartRamPtr < EndRamPtr)
                     975   FillMemory_1:
00000C5C  B484       976          cmp.l     D4,D2
00000C5E  6408       977          bhs.s     FillMemory_3
                     978   ; *StartRamPtr++ = FillData ;
00000C60  2042       979          move.l    D2,A0
00000C62  5282       980          addq.l    #1,D2
00000C64  1083       981          move.b    D3,(A0)
00000C66  60F4       982          bra       FillMemory_1
                     983   FillMemory_3:
00000C68  4CDF 041C  984          movem.l   (A7)+,D2/D3/D4/A2
00000C6C  4E75       985          rts
                     986   ; }
                     987   ; void Load_SRecordFile()
                     988   ; {
                     989   _Load_SRecordFile:
00000C6E  4E56 FFDC  990          link      A6,#-36
00000C72  48E7 3F3C  991          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000C76  45EE FFFA  992          lea       -6(A6),A2
00000C7A  47F8 0A3C  993          lea       _Get2HexDigits.L,A3
00000C7E  49F9 0000  994          lea       _printf.L,A4
00000C82  37B4      
                     995   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000C84  42AE FFEE  996          clr.l     -18(A6)
00000C88  3A7C 0000  997          move.w    #0,A5
                     998   ; int result, ByteCount ;
                     999   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1000   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1001   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000C8C  7E00      1002          moveq     #0,D7
                    1003   ; AddressFail = 0 ;
00000C8E  42AE FFEA 1004          clr.l     -22(A6)
                    1005   ; Echo = 0 ;                              // don't echo S records during download
00000C92  42B9 0803 1006          clr.l     _Echo.L
00000C96  00E0      
                    1007   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000C98  4879 0000 1008          pea       @m68kde~1_12.L
00000C9C  41EA      
00000C9E  4E94      1009          jsr       (A4)
00000CA0  584F      1010          addq.w    #4,A7
                    1011   ; while(1)    {
                    1012   Load_SRecordFile_1:
                    1013   ; CheckSum = 0 ;
00000CA2  4212      1014          clr.b     (A2)
                    1015   ; do {
                    1016   Load_SRecordFile_4:
                    1017   ; c = toupper(_getch()) ;
00000CA4  2F00      1018          move.l    D0,-(A7)
00000CA6  4EB8 09A0 1019          jsr       __getch
00000CAA  2200      1020          move.l    D0,D1
00000CAC  201F      1021          move.l    (A7)+,D0
00000CAE  2F01      1022          move.l    D1,-(A7)
00000CB0  4EB9 0000 1023          jsr       _toupper
00000CB4  3798      
00000CB6  584F      1024          addq.w    #4,A7
00000CB8  1C00      1025          move.b    D0,D6
                    1026   ; if(c == 0x1b )      // if break
00000CBA  0C06 001B 1027          cmp.b     #27,D6
00000CBE  6604      1028          bne.s     Load_SRecordFile_6
                    1029   ; return;
00000CC0  6000 0132 1030          bra       Load_SRecordFile_8
                    1031   Load_SRecordFile_6:
00000CC4  0C06 0053 1032          cmp.b     #83,D6
00000CC8  66DA      1033          bne       Load_SRecordFile_4
                    1034   ; }while(c != (char)('S'));   // wait for S start of header
                    1035   ; HeaderType = _getch() ;
00000CCA  4EB8 09A0 1036          jsr       __getch
00000CCE  1600      1037          move.b    D0,D3
                    1038   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000CD0  0C03 0030 1039          cmp.b     #48,D3
00000CD4  6706      1040          beq.s     Load_SRecordFile_11
00000CD6  0C03 0035 1041          cmp.b     #53,D3
00000CDA  6604      1042          bne.s     Load_SRecordFile_9
                    1043   Load_SRecordFile_11:
                    1044   ; continue ;
00000CDC  6000 00D2 1045          bra       Load_SRecordFile_23
                    1046   Load_SRecordFile_9:
                    1047   ; if(HeaderType >= (char)('7'))
00000CE0  0C03 0037 1048          cmp.b     #55,D3
00000CE4  6D04      1049          blt.s     Load_SRecordFile_12
                    1050   ; break ;                 // end load on s7,s8,s9 records
00000CE6  6000 00CC 1051          bra       Load_SRecordFile_3
                    1052   Load_SRecordFile_12:
                    1053   ; // get the bytecount
                    1054   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000CEA  2F0A      1055          move.l    A2,-(A7)
00000CEC  4E93      1056          jsr       (A3)
00000CEE  584F      1057          addq.w    #4,A7
00000CF0  2D40 FFF6 1058          move.l    D0,-10(A6)
                    1059   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1060   ; if(HeaderType == (char)('1')) {
00000CF4  0C03 0031 1061          cmp.b     #49,D3
00000CF8  660E      1062          bne.s     Load_SRecordFile_14
                    1063   ; AddressSize = 2 ;       // 2 byte address
00000CFA  7A02      1064          moveq     #2,D5
                    1065   ; Address = Get4HexDigits(&CheckSum);
00000CFC  2F0A      1066          move.l    A2,-(A7)
00000CFE  4EB8 0A90 1067          jsr       _Get4HexDigits
00000D02  584F      1068          addq.w    #4,A7
00000D04  2800      1069          move.l    D0,D4
00000D06  6020      1070          bra.s     Load_SRecordFile_17
                    1071   Load_SRecordFile_14:
                    1072   ; }
                    1073   ; else if (HeaderType == (char)('2')) {
00000D08  0C03 0032 1074          cmp.b     #50,D3
00000D0C  660E      1075          bne.s     Load_SRecordFile_16
                    1076   ; AddressSize = 3 ;       // 3 byte address
00000D0E  7A03      1077          moveq     #3,D5
                    1078   ; Address = Get6HexDigits(&CheckSum) ;
00000D10  2F0A      1079          move.l    A2,-(A7)
00000D12  4EB8 0AB6 1080          jsr       _Get6HexDigits
00000D16  584F      1081          addq.w    #4,A7
00000D18  2800      1082          move.l    D0,D4
00000D1A  600C      1083          bra.s     Load_SRecordFile_17
                    1084   Load_SRecordFile_16:
                    1085   ; }
                    1086   ; else    {
                    1087   ; AddressSize = 4 ;       // 4 byte address
00000D1C  7A04      1088          moveq     #4,D5
                    1089   ; Address = Get8HexDigits(&CheckSum) ;
00000D1E  2F0A      1090          move.l    A2,-(A7)
00000D20  4EB8 0ADC 1091          jsr       _Get8HexDigits
00000D24  584F      1092          addq.w    #4,A7
00000D26  2800      1093          move.l    D0,D4
                    1094   Load_SRecordFile_17:
                    1095   ; }
                    1096   ; RamPtr = (char *)(Address) ;                            // point to download area
00000D28  2D44 FFFC 1097          move.l    D4,-4(A6)
                    1098   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000D2C  202E FFF6 1099          move.l    -10(A6),D0
00000D30  9085      1100          sub.l     D5,D0
00000D32  5380      1101          subq.l    #1,D0
00000D34  2D40 FFE2 1102          move.l    D0,-30(A6)
                    1103   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000D38  4282      1104          clr.l     D2
                    1105   Load_SRecordFile_18:
00000D3A  B4AE FFE2 1106          cmp.l     -30(A6),D2
00000D3E  6C1E      1107          bge.s     Load_SRecordFile_20
                    1108   ; DataByte = Get2HexDigits(&CheckSum) ;
00000D40  2F0A      1109          move.l    A2,-(A7)
00000D42  4E93      1110          jsr       (A3)
00000D44  584F      1111          addq.w    #4,A7
00000D46  2D40 FFDE 1112          move.l    D0,-34(A6)
                    1113   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000D4A  202E FFDE 1114          move.l    -34(A6),D0
00000D4E  206E FFFC 1115          move.l    -4(A6),A0
00000D52  52AE FFFC 1116          addq.l    #1,-4(A6)
00000D56  1080      1117          move.b    D0,(A0)
                    1118   ; ByteTotal++;
00000D58  524D      1119          addq.w    #1,A5
00000D5A  5282      1120          addq.l    #1,D2
00000D5C  60DC      1121          bra       Load_SRecordFile_18
                    1122   Load_SRecordFile_20:
                    1123   ; }
                    1124   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1125   ; ReadCheckSum = Get2HexDigits(0) ;
00000D5E  42A7      1126          clr.l     -(A7)
00000D60  4E93      1127          jsr       (A3)
00000D62  584F      1128          addq.w    #4,A7
00000D64  1D40 FFFB 1129          move.b    D0,-5(A6)
                    1130   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000D68  1012      1131          move.b    (A2),D0
00000D6A  4600      1132          not.b     D0
00000D6C  4880      1133          ext.w     D0
00000D6E  C07C 00FF 1134          and.w     #255,D0
00000D72  122E FFFB 1135          move.b    -5(A6),D1
00000D76  4881      1136          ext.w     D1
00000D78  C27C 00FF 1137          and.w     #255,D1
00000D7C  B041      1138          cmp.w     D1,D0
00000D7E  6708      1139          beq.s     Load_SRecordFile_21
                    1140   ; LoadFailed = 1 ;
00000D80  7E01      1141          moveq     #1,D7
                    1142   ; FailedAddress = Address ;
00000D82  2D44 FFE6 1143          move.l    D4,-26(A6)
                    1144   ; break;
00000D86  602C      1145          bra.s     Load_SRecordFile_3
                    1146   Load_SRecordFile_21:
                    1147   ; }
                    1148   ; SRecordCount++ ;
00000D88  52AE FFEE 1149          addq.l    #1,-18(A6)
                    1150   ; // display feedback on progress
                    1151   ; if(SRecordCount % 25 == 0)
00000D8C  2F2E FFEE 1152          move.l    -18(A6),-(A7)
00000D90  4878 0019 1153          pea       25
00000D94  4EB9 0000 1154          jsr       LDIV
00000D98  363C      
00000D9A  202F 0004 1155          move.l    4(A7),D0
00000D9E  504F      1156          addq.w    #8,A7
00000DA0  4A80      1157          tst.l     D0
00000DA2  660C      1158          bne.s     Load_SRecordFile_23
                    1159   ; putchar('.') ;
00000DA4  4878 002E 1160          pea       46
00000DA8  4EB9 0000 1161          jsr       _putch
00000DAC  3708      
00000DAE  584F      1162          addq.w    #4,A7
                    1163   Load_SRecordFile_23:
00000DB0  6000 FEF0 1164          bra       Load_SRecordFile_1
                    1165   Load_SRecordFile_3:
                    1166   ; }
                    1167   ; if(LoadFailed == 1) {
00000DB4  0C87 0000 1168          cmp.l     #1,D7
00000DB8  0001      
00000DBA  6610      1169          bne.s     Load_SRecordFile_25
                    1170   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000DBC  2F2E FFE6 1171          move.l    -26(A6),-(A7)
00000DC0  4879 0000 1172          pea       @m68kde~1_13.L
00000DC4  421A      
00000DC6  4E94      1173          jsr       (A4)
00000DC8  504F      1174          addq.w    #8,A7
00000DCA  600C      1175          bra.s     Load_SRecordFile_26
                    1176   Load_SRecordFile_25:
                    1177   ; }
                    1178   ; else
                    1179   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000DCC  2F0D      1180          move.l    A5,-(A7)
00000DCE  4879 0000 1181          pea       @m68kde~1_14.L
00000DD2  4240      
00000DD4  4E94      1182          jsr       (A4)
00000DD6  504F      1183          addq.w    #8,A7
                    1184   Load_SRecordFile_26:
                    1185   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1186   ; for(i = 0; i < 400000; i ++)
00000DD8  4282      1187          clr.l     D2
                    1188   Load_SRecordFile_27:
00000DDA  0C82 0006 1189          cmp.l     #400000,D2
00000DDE  1A80      
00000DE0  6C04      1190          bge.s     Load_SRecordFile_29
00000DE2  5282      1191          addq.l    #1,D2
00000DE4  60F4      1192          bra       Load_SRecordFile_27
                    1193   Load_SRecordFile_29:
                    1194   ; ;
                    1195   ; FlushKeyboard() ;
00000DE6  4EB8 09DE 1196          jsr       _FlushKeyboard
                    1197   ; Echo = 1;
00000DEA  23FC 0000 1198          move.l    #1,_Echo.L
00000DEE  0001 0803 
00000DF2  00E0      
                    1199   Load_SRecordFile_8:
00000DF4  4CDF 3CFC 1200          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000DF8  4E5E      1201          unlk      A6
00000DFA  4E75      1202          rts
                    1203   ; }
                    1204   ; void MemoryChange(void)
                    1205   ; {
                    1206   _MemoryChange:
00000DFC  48E7 3820 1207          movem.l   D2/D3/D4/A2,-(A7)
00000E00  45F9 0000 1208          lea       _printf.L,A2
00000E04  37B4      
                    1209   ; unsigned char *RamPtr,c ; // pointer to memory
                    1210   ; int Data ;
                    1211   ; printf("\r\nExamine and Change Memory") ;
00000E06  4879 0000 1212          pea       @m68kde~1_15.L
00000E0A  4262      
00000E0C  4E92      1213          jsr       (A2)
00000E0E  584F      1214          addq.w    #4,A7
                    1215   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E10  4879 0000 1216          pea       @m68kde~1_16.L
00000E14  427E      
00000E16  4E92      1217          jsr       (A2)
00000E18  584F      1218          addq.w    #4,A7
                    1219   ; printf("\r\nEnter Address: ") ;
00000E1A  4879 0000 1220          pea       @m68kde~1_17.L
00000E1E  42C4      
00000E20  4E92      1221          jsr       (A2)
00000E22  584F      1222          addq.w    #4,A7
                    1223   ; RamPtr = Get8HexDigits(0) ;
00000E24  42A7      1224          clr.l     -(A7)
00000E26  4EB8 0ADC 1225          jsr       _Get8HexDigits
00000E2A  584F      1226          addq.w    #4,A7
00000E2C  2600      1227          move.l    D0,D3
                    1228   ; while(1)    {
                    1229   MemoryChange_1:
                    1230   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000E2E  2043      1231          move.l    D3,A0
00000E30  1210      1232          move.b    (A0),D1
00000E32  C2BC 0000 1233          and.l     #255,D1
00000E36  00FF      
00000E38  2F01      1234          move.l    D1,-(A7)
00000E3A  2F03      1235          move.l    D3,-(A7)
00000E3C  4879 0000 1236          pea       @m68kde~1_18.L
00000E40  42D6      
00000E42  4E92      1237          jsr       (A2)
00000E44  DEFC 000C 1238          add.w     #12,A7
                    1239   ; c = tolower(_getch()) ;
00000E48  2F00      1240          move.l    D0,-(A7)
00000E4A  4EB8 09A0 1241          jsr       __getch
00000E4E  2200      1242          move.l    D0,D1
00000E50  201F      1243          move.l    (A7)+,D0
00000E52  2F01      1244          move.l    D1,-(A7)
00000E54  4EB9 0000 1245          jsr       _tolower
00000E58  3734      
00000E5A  584F      1246          addq.w    #4,A7
00000E5C  1400      1247          move.b    D0,D2
                    1248   ; if(c == (char)(0x1b))
00000E5E  0C02 001B 1249          cmp.b     #27,D2
00000E62  6604      1250          bne.s     MemoryChange_4
                    1251   ; return ;                                // abort on escape
00000E64  6000 0090 1252          bra       MemoryChange_6
                    1253   MemoryChange_4:
                    1254   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000E68  0C02 0030 1255          cmp.b     #48,D2
00000E6C  6506      1256          blo.s     MemoryChange_10
00000E6E  0C02 0039 1257          cmp.b     #57,D2
00000E72  6310      1258          bls.s     MemoryChange_9
                    1259   MemoryChange_10:
00000E74  0C02 0061 1260          cmp.b     #97,D2
00000E78  6500 006E 1261          blo       MemoryChange_7
00000E7C  0C02 0066 1262          cmp.b     #102,D2
00000E80  6200 0066 1263          bhi       MemoryChange_7
                    1264   MemoryChange_9:
                    1265   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000E84  C4BC 0000 1266          and.l     #255,D2
00000E88  00FF      
00000E8A  2F02      1267          move.l    D2,-(A7)
00000E8C  4EB8 0A0A 1268          jsr       _xtod
00000E90  584F      1269          addq.w    #4,A7
00000E92  C0BC 0000 1270          and.l     #255,D0
00000E96  00FF      
00000E98  E980      1271          asl.l     #4,D0
00000E9A  2F00      1272          move.l    D0,-(A7)
00000E9C  2F01      1273          move.l    D1,-(A7)
00000E9E  4EB8 09A0 1274          jsr       __getch
00000EA2  221F      1275          move.l    (A7)+,D1
00000EA4  2F00      1276          move.l    D0,-(A7)
00000EA6  4EB8 0A0A 1277          jsr       _xtod
00000EAA  584F      1278          addq.w    #4,A7
00000EAC  2200      1279          move.l    D0,D1
00000EAE  201F      1280          move.l    (A7)+,D0
00000EB0  C2BC 0000 1281          and.l     #255,D1
00000EB4  00FF      
00000EB6  8081      1282          or.l      D1,D0
00000EB8  2800      1283          move.l    D0,D4
                    1284   ; *RamPtr = (char)(Data) ;
00000EBA  2043      1285          move.l    D3,A0
00000EBC  1084      1286          move.b    D4,(A0)
                    1287   ; if(*RamPtr != Data) {
00000EBE  2043      1288          move.l    D3,A0
00000EC0  1010      1289          move.b    (A0),D0
00000EC2  C0BC 0000 1290          and.l     #255,D0
00000EC6  00FF      
00000EC8  B084      1291          cmp.l     D4,D0
00000ECA  671A      1292          beq.s     MemoryChange_11
                    1293   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000ECC  2043      1294          move.l    D3,A0
00000ECE  1210      1295          move.b    (A0),D1
00000ED0  C2BC 0000 1296          and.l     #255,D1
00000ED4  00FF      
00000ED6  2F01      1297          move.l    D1,-(A7)
00000ED8  2F04      1298          move.l    D4,-(A7)
00000EDA  4879 0000 1299          pea       @m68kde~1_19.L
00000EDE  42E8      
00000EE0  4E92      1300          jsr       (A2)
00000EE2  DEFC 000C 1301          add.w     #12,A7
                    1302   MemoryChange_11:
00000EE6  6008      1303          bra.s     MemoryChange_13
                    1304   MemoryChange_7:
                    1305   ; }
                    1306   ; }
                    1307   ; else if(c == (char)('-'))
00000EE8  0C02 002D 1308          cmp.b     #45,D2
00000EEC  6602      1309          bne.s     MemoryChange_13
                    1310   ; RamPtr -= 2 ; ;
00000EEE  5583      1311          subq.l    #2,D3
                    1312   MemoryChange_13:
                    1313   ; RamPtr ++ ;
00000EF0  5283      1314          addq.l    #1,D3
00000EF2  6000 FF3A 1315          bra       MemoryChange_1
                    1316   MemoryChange_6:
00000EF6  4CDF 041C 1317          movem.l   (A7)+,D2/D3/D4/A2
00000EFA  4E75      1318          rts
                    1319   ; }
                    1320   ; }
                    1321   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1322   ; // IMPORTANT
                    1323   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1324   ; // has to be done with an interrupt (IRQ Level 6)
                    1325   ; //
                    1326   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1327   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1328   ; //
                    1329   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1330   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1331   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1332   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1333   ; // program area
                    1334   ; //
                    1335   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1336   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1337   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1338   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1339   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1340   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1341   ; void DumpRegisters()
                    1342   ; {
                    1343   _DumpRegisters:
00000EFC  48E7 3F3C 1344          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000F00  45F9 0000 1345          lea       _putch.L,A2
00000F04  3708      
00000F06  47F9 0000 1346          lea       _printf.L,A3
00000F0A  37B4      
00000F0C  49F9 0803 1347          lea       _SR.L,A4
00000F10  012C      
00000F12  4BF9 0803 1348          lea       _WatchPointString.L,A5
00000F16  01C2      
                    1349   ; short i, x, j, k ;
                    1350   ; unsigned char c, *BytePointer;
                    1351   ; // buld up strings for displaying watchpoints
                    1352   ; for(x = 0; x < (short)(8); x++)
00000F18  4242      1353          clr.w     D2
                    1354   DumpRegisters_1:
00000F1A  0C42 0008 1355          cmp.w     #8,D2
00000F1E  6C00 01C6 1356          bge       DumpRegisters_3
                    1357   ; {
                    1358   ; if(WatchPointSetOrCleared[x] == 1)
00000F22  48C2      1359          ext.l     D2
00000F24  2002      1360          move.l    D2,D0
00000F26  E588      1361          lsl.l     #2,D0
00000F28  41F9 0803 1362          lea       _WatchPointSetOrCleared.L,A0
00000F2C  01A2      
00000F2E  2030 0800 1363          move.l    0(A0,D0.L),D0
00000F32  0C80 0000 1364          cmp.l     #1,D0
00000F36  0001      
00000F38  6600 0186 1365          bne       DumpRegisters_4
                    1366   ; {
                    1367   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000F3C  48C2      1368          ext.l     D2
00000F3E  2202      1369          move.l    D2,D1
00000F40  E589      1370          lsl.l     #2,D1
00000F42  41F9 0803 1371          lea       _WatchPointAddress.L,A0
00000F46  0182      
00000F48  2F30 1800 1372          move.l    0(A0,D1.L),-(A7)
00000F4C  4879 0000 1373          pea       @m68kde~1_20.L
00000F50  431C      
00000F52  220D      1374          move.l    A5,D1
00000F54  48C2      1375          ext.l     D2
00000F56  2F00      1376          move.l    D0,-(A7)
00000F58  2002      1377          move.l    D2,D0
00000F5A  C1FC 0064 1378          muls      #100,D0
00000F5E  D280      1379          add.l     D0,D1
00000F60  201F      1380          move.l    (A7)+,D0
00000F62  2F01      1381          move.l    D1,-(A7)
00000F64  4EB9 0000 1382          jsr       _sprintf
00000F68  3750      
00000F6A  DEFC 000C 1383          add.w     #12,A7
                    1384   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000F6E  48C2      1385          ext.l     D2
00000F70  2002      1386          move.l    D2,D0
00000F72  E588      1387          lsl.l     #2,D0
00000F74  41F9 0803 1388          lea       _WatchPointAddress.L,A0
00000F78  0182      
00000F7A  2A30 0800 1389          move.l    0(A0,D0.L),D5
                    1390   ; for(j = 0; j < (short)(16); j+=2)
00000F7E  4243      1391          clr.w     D3
                    1392   DumpRegisters_6:
00000F80  0C43 0010 1393          cmp.w     #16,D3
00000F84  6C00 0082 1394          bge       DumpRegisters_8
                    1395   ; {
                    1396   ; for(k = 0; k < (short)(2); k++)
00000F88  4246      1397          clr.w     D6
                    1398   DumpRegisters_9:
00000F8A  0C46 0002 1399          cmp.w     #2,D6
00000F8E  6C00 0052 1400          bge       DumpRegisters_11
                    1401   ; {
                    1402   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00000F92  2045      1403          move.l    D5,A0
00000F94  48C3      1404          ext.l     D3
00000F96  2203      1405          move.l    D3,D1
00000F98  48C6      1406          ext.l     D6
00000F9A  D286      1407          add.l     D6,D1
00000F9C  1230 1800 1408          move.b    0(A0,D1.L),D1
00000FA0  C2BC 0000 1409          and.l     #255,D1
00000FA4  00FF      
00000FA6  2F01      1410          move.l    D1,-(A7)
00000FA8  4879 0000 1411          pea       @m68kde~1_21.L
00000FAC  4324      
00000FAE  4879 0803 1412          pea       _TempString.L
00000FB2  04E2      
00000FB4  4EB9 0000 1413          jsr       _sprintf
00000FB8  3750      
00000FBA  DEFC 000C 1414          add.w     #12,A7
                    1415   ; strcat(WatchPointString[x], TempString) ;
00000FBE  4879 0803 1416          pea       _TempString.L
00000FC2  04E2      
00000FC4  220D      1417          move.l    A5,D1
00000FC6  48C2      1418          ext.l     D2
00000FC8  2F00      1419          move.l    D0,-(A7)
00000FCA  2002      1420          move.l    D2,D0
00000FCC  C1FC 0064 1421          muls      #100,D0
00000FD0  D280      1422          add.l     D0,D1
00000FD2  201F      1423          move.l    (A7)+,D0
00000FD4  2F01      1424          move.l    D1,-(A7)
00000FD6  4EB9 0000 1425          jsr       _strcat
00000FDA  3782      
00000FDC  504F      1426          addq.w    #8,A7
00000FDE  5246      1427          addq.w    #1,D6
00000FE0  60A8      1428          bra       DumpRegisters_9
                    1429   DumpRegisters_11:
                    1430   ; }
                    1431   ; strcat(WatchPointString[x]," ") ;
00000FE2  4879 0000 1432          pea       @m68kde~1_22.L
00000FE6  432A      
00000FE8  220D      1433          move.l    A5,D1
00000FEA  48C2      1434          ext.l     D2
00000FEC  2F00      1435          move.l    D0,-(A7)
00000FEE  2002      1436          move.l    D2,D0
00000FF0  C1FC 0064 1437          muls      #100,D0
00000FF4  D280      1438          add.l     D0,D1
00000FF6  201F      1439          move.l    (A7)+,D0
00000FF8  2F01      1440          move.l    D1,-(A7)
00000FFA  4EB9 0000 1441          jsr       _strcat
00000FFE  3782      
00001000  504F      1442          addq.w    #8,A7
00001002  5443      1443          addq.w    #2,D3
00001004  6000 FF7A 1444          bra       DumpRegisters_6
                    1445   DumpRegisters_8:
                    1446   ; }
                    1447   ; strcat(WatchPointString[x], "  ") ;
00001008  4879 0000 1448          pea       @m68kde~1_23.L
0000100C  432C      
0000100E  220D      1449          move.l    A5,D1
00001010  48C2      1450          ext.l     D2
00001012  2F00      1451          move.l    D0,-(A7)
00001014  2002      1452          move.l    D2,D0
00001016  C1FC 0064 1453          muls      #100,D0
0000101A  D280      1454          add.l     D0,D1
0000101C  201F      1455          move.l    (A7)+,D0
0000101E  2F01      1456          move.l    D1,-(A7)
00001020  4EB9 0000 1457          jsr       _strcat
00001024  3782      
00001026  504F      1458          addq.w    #8,A7
                    1459   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001028  48C2      1460          ext.l     D2
0000102A  2002      1461          move.l    D2,D0
0000102C  E588      1462          lsl.l     #2,D0
0000102E  41F9 0803 1463          lea       _WatchPointAddress.L,A0
00001032  0182      
00001034  2A30 0800 1464          move.l    0(A0,D0.L),D5
                    1465   ; for(j = 0; j < (short)(16); j++)
00001038  4243      1466          clr.w     D3
                    1467   DumpRegisters_12:
0000103A  0C43 0010 1468          cmp.w     #16,D3
0000103E  6C00 007E 1469          bge       DumpRegisters_14
                    1470   ; {
                    1471   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001042  2045      1472          move.l    D5,A0
00001044  48C3      1473          ext.l     D3
00001046  1030 3800 1474          move.b    0(A0,D3.L),D0
0000104A  C03C 007F 1475          and.b     #127,D0
0000104E  1E00      1476          move.b    D0,D7
                    1477   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001050  0C07 007F 1478          cmp.b     #127,D7
00001054  6206      1479          bhi.s     DumpRegisters_17
00001056  0C07 0020 1480          cmp.b     #32,D7
0000105A  6416      1481          bhs.s     DumpRegisters_15
                    1482   DumpRegisters_17:
                    1483   ; sprintf(TempString, ".") ;
0000105C  4879 0000 1484          pea       @m68kde~1_24.L
00001060  4330      
00001062  4879 0803 1485          pea       _TempString.L
00001066  04E2      
00001068  4EB9 0000 1486          jsr       _sprintf
0000106C  3750      
0000106E  504F      1487          addq.w    #8,A7
00001070  6026      1488          bra.s     DumpRegisters_16
                    1489   DumpRegisters_15:
                    1490   ; else
                    1491   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001072  2045      1492          move.l    D5,A0
00001074  48C3      1493          ext.l     D3
00001076  1230 3800 1494          move.b    0(A0,D3.L),D1
0000107A  C2BC 0000 1495          and.l     #255,D1
0000107E  00FF      
00001080  2F01      1496          move.l    D1,-(A7)
00001082  4879 0000 1497          pea       @m68kde~1_25.L
00001086  4332      
00001088  4879 0803 1498          pea       _TempString.L
0000108C  04E2      
0000108E  4EB9 0000 1499          jsr       _sprintf
00001092  3750      
00001094  DEFC 000C 1500          add.w     #12,A7
                    1501   DumpRegisters_16:
                    1502   ; strcat(WatchPointString[x], TempString) ;
00001098  4879 0803 1503          pea       _TempString.L
0000109C  04E2      
0000109E  220D      1504          move.l    A5,D1
000010A0  48C2      1505          ext.l     D2
000010A2  2F00      1506          move.l    D0,-(A7)
000010A4  2002      1507          move.l    D2,D0
000010A6  C1FC 0064 1508          muls      #100,D0
000010AA  D280      1509          add.l     D0,D1
000010AC  201F      1510          move.l    (A7)+,D0
000010AE  2F01      1511          move.l    D1,-(A7)
000010B0  4EB9 0000 1512          jsr       _strcat
000010B4  3782      
000010B6  504F      1513          addq.w    #8,A7
000010B8  5243      1514          addq.w    #1,D3
000010BA  6000 FF7E 1515          bra       DumpRegisters_12
                    1516   DumpRegisters_14:
000010BE  6020      1517          bra.s     DumpRegisters_5
                    1518   DumpRegisters_4:
                    1519   ; }
                    1520   ; }
                    1521   ; else
                    1522   ; strcpy(WatchPointString[x], "") ;
000010C0  4879 0000 1523          pea       @m68kde~1_26.L
000010C4  4336      
000010C6  220D      1524          move.l    A5,D1
000010C8  48C2      1525          ext.l     D2
000010CA  2F00      1526          move.l    D0,-(A7)
000010CC  2002      1527          move.l    D2,D0
000010CE  C1FC 0064 1528          muls      #100,D0
000010D2  D280      1529          add.l     D0,D1
000010D4  201F      1530          move.l    (A7)+,D0
000010D6  2F01      1531          move.l    D1,-(A7)
000010D8  4EB9 0000 1532          jsr       _strcpy
000010DC  361A      
000010DE  504F      1533          addq.w    #8,A7
                    1534   DumpRegisters_5:
000010E0  5242      1535          addq.w    #1,D2
000010E2  6000 FE36 1536          bra       DumpRegisters_1
                    1537   DumpRegisters_3:
                    1538   ; }
                    1539   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000010E6  2F39 0803 1540          move.l    _a0.L,-(A7)
000010EA  0104      
000010EC  2F39 0803 1541          move.l    _d0.L,-(A7)
000010F0  00E4      
000010F2  4879 0000 1542          pea       @m68kde~1_27.L
000010F6  4338      
000010F8  4E93      1543          jsr       (A3)
000010FA  DEFC 000C 1544          add.w     #12,A7
                    1545   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000010FE  2F39 0803 1546          move.l    _a1.L,-(A7)
00001102  0108      
00001104  2F39 0803 1547          move.l    _d1.L,-(A7)
00001108  00E8      
0000110A  4879 0000 1548          pea       @m68kde~1_28.L
0000110E  4354      
00001110  4E93      1549          jsr       (A3)
00001112  DEFC 000C 1550          add.w     #12,A7
                    1551   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001116  2F39 0803 1552          move.l    _a2.L,-(A7)
0000111A  010C      
0000111C  2F39 0803 1553          move.l    _d2.L,-(A7)
00001120  00EC      
00001122  4879 0000 1554          pea       @m68kde~1_29.L
00001126  436E      
00001128  4E93      1555          jsr       (A3)
0000112A  DEFC 000C 1556          add.w     #12,A7
                    1557   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000112E  2F39 0803 1558          move.l    _a3.L,-(A7)
00001132  0110      
00001134  2F39 0803 1559          move.l    _d3.L,-(A7)
00001138  00F0      
0000113A  4879 0000 1560          pea       @m68kde~1_30.L
0000113E  4388      
00001140  4E93      1561          jsr       (A3)
00001142  DEFC 000C 1562          add.w     #12,A7
                    1563   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001146  2F39 0803 1564          move.l    _a4.L,-(A7)
0000114A  0114      
0000114C  2F39 0803 1565          move.l    _d4.L,-(A7)
00001150  00F4      
00001152  4879 0000 1566          pea       @m68kde~1_31.L
00001156  43A2      
00001158  4E93      1567          jsr       (A3)
0000115A  DEFC 000C 1568          add.w     #12,A7
                    1569   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000115E  2F39 0803 1570          move.l    _a5.L,-(A7)
00001162  0118      
00001164  2F39 0803 1571          move.l    _d5.L,-(A7)
00001168  00F8      
0000116A  4879 0000 1572          pea       @m68kde~1_32.L
0000116E  43BC      
00001170  4E93      1573          jsr       (A3)
00001172  DEFC 000C 1574          add.w     #12,A7
                    1575   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001176  2F39 0803 1576          move.l    _a6.L,-(A7)
0000117A  011C      
0000117C  2F39 0803 1577          move.l    _d6.L,-(A7)
00001180  00FC      
00001182  4879 0000 1578          pea       @m68kde~1_33.L
00001186  43D6      
00001188  4E93      1579          jsr       (A3)
0000118A  DEFC 000C 1580          add.w     #12,A7
                    1581   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000118E  3214      1582          move.w    (A4),D1
00001190  C27C 2000 1583          and.w     #8192,D1
00001194  0C41 2000 1584          cmp.w     #8192,D1
00001198  6608      1585          bne.s     DumpRegisters_18
0000119A  2239 0803 1586          move.l    _SSP.L,D1
0000119E  0124      
000011A0  6006      1587          bra.s     DumpRegisters_19
                    1588   DumpRegisters_18:
000011A2  2239 0803 1589          move.l    _USP.L,D1
000011A6  0128      
                    1590   DumpRegisters_19:
000011A8  2F01      1591          move.l    D1,-(A7)
000011AA  2F39 0803 1592          move.l    _d7.L,-(A7)
000011AE  0100      
000011B0  4879 0000 1593          pea       @m68kde~1_34.L
000011B4  43F0      
000011B6  4E93      1594          jsr       (A3)
000011B8  DEFC 000C 1595          add.w     #12,A7
                    1596   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000011BC  2F39 0803 1597          move.l    _USP.L,-(A7)
000011C0  0128      
000011C2  4879 0000 1598          pea       @m68kde~1_35.L
000011C6  440A      
000011C8  4E93      1599          jsr       (A3)
000011CA  504F      1600          addq.w    #8,A7
                    1601   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000011CC  2F39 0803 1602          move.l    _SSP.L,-(A7)
000011D0  0124      
000011D2  4879 0000 1603          pea       @m68kde~1_36.L
000011D6  4428      
000011D8  4E93      1604          jsr       (A3)
000011DA  504F      1605          addq.w    #8,A7
                    1606   ; printf("\r\n SR = $%04X   ",SR) ;
000011DC  3214      1607          move.w    (A4),D1
000011DE  C2BC 0000 1608          and.l     #65535,D1
000011E2  FFFF      
000011E4  2F01      1609          move.l    D1,-(A7)
000011E6  4879 0000 1610          pea       @m68kde~1_37.L
000011EA  444A      
000011EC  4E93      1611          jsr       (A3)
000011EE  504F      1612          addq.w    #8,A7
                    1613   ; // display the status word in characters etc.
                    1614   ; printf("   [") ;
000011F0  4879 0000 1615          pea       @m68kde~1_38.L
000011F4  445C      
000011F6  4E93      1616          jsr       (A3)
000011F8  584F      1617          addq.w    #4,A7
                    1618   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000011FA  3014      1619          move.w    (A4),D0
000011FC  C07C 8000 1620          and.w     #32768,D0
00001200  0C40 8000 1621          cmp.w     #32768,D0
00001204  660A      1622          bne.s     DumpRegisters_20
00001206  4878 0054 1623          pea       84
0000120A  4E92      1624          jsr       (A2)
0000120C  584F      1625          addq.w    #4,A7
0000120E  6008      1626          bra.s     DumpRegisters_21
                    1627   DumpRegisters_20:
00001210  4878 002D 1628          pea       45
00001214  4E92      1629          jsr       (A2)
00001216  584F      1630          addq.w    #4,A7
                    1631   DumpRegisters_21:
                    1632   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001218  3014      1633          move.w    (A4),D0
0000121A  C07C 2000 1634          and.w     #8192,D0
0000121E  0C40 2000 1635          cmp.w     #8192,D0
00001222  660A      1636          bne.s     DumpRegisters_22
00001224  4878 0053 1637          pea       83
00001228  4E92      1638          jsr       (A2)
0000122A  584F      1639          addq.w    #4,A7
0000122C  6008      1640          bra.s     DumpRegisters_23
                    1641   DumpRegisters_22:
0000122E  4878 0055 1642          pea       85
00001232  4E92      1643          jsr       (A2)
00001234  584F      1644          addq.w    #4,A7
                    1645   DumpRegisters_23:
                    1646   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001236  3014      1647          move.w    (A4),D0
00001238  C07C 0400 1648          and.w     #1024,D0
0000123C  0C40 0400 1649          cmp.w     #1024,D0
00001240  660A      1650          bne.s     DumpRegisters_24
00001242  4878 0031 1651          pea       49
00001246  4E92      1652          jsr       (A2)
00001248  584F      1653          addq.w    #4,A7
0000124A  6008      1654          bra.s     DumpRegisters_25
                    1655   DumpRegisters_24:
0000124C  4878 0030 1656          pea       48
00001250  4E92      1657          jsr       (A2)
00001252  584F      1658          addq.w    #4,A7
                    1659   DumpRegisters_25:
                    1660   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001254  3014      1661          move.w    (A4),D0
00001256  C07C 0200 1662          and.w     #512,D0
0000125A  0C40 0200 1663          cmp.w     #512,D0
0000125E  660A      1664          bne.s     DumpRegisters_26
00001260  4878 0031 1665          pea       49
00001264  4E92      1666          jsr       (A2)
00001266  584F      1667          addq.w    #4,A7
00001268  6008      1668          bra.s     DumpRegisters_27
                    1669   DumpRegisters_26:
0000126A  4878 0030 1670          pea       48
0000126E  4E92      1671          jsr       (A2)
00001270  584F      1672          addq.w    #4,A7
                    1673   DumpRegisters_27:
                    1674   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001272  3014      1675          move.w    (A4),D0
00001274  C07C 0100 1676          and.w     #256,D0
00001278  0C40 0100 1677          cmp.w     #256,D0
0000127C  660A      1678          bne.s     DumpRegisters_28
0000127E  4878 0031 1679          pea       49
00001282  4E92      1680          jsr       (A2)
00001284  584F      1681          addq.w    #4,A7
00001286  6008      1682          bra.s     DumpRegisters_29
                    1683   DumpRegisters_28:
00001288  4878 0030 1684          pea       48
0000128C  4E92      1685          jsr       (A2)
0000128E  584F      1686          addq.w    #4,A7
                    1687   DumpRegisters_29:
                    1688   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001290  3014      1689          move.w    (A4),D0
00001292  C07C 0010 1690          and.w     #16,D0
00001296  0C40 0010 1691          cmp.w     #16,D0
0000129A  660A      1692          bne.s     DumpRegisters_30
0000129C  4878 0058 1693          pea       88
000012A0  4E92      1694          jsr       (A2)
000012A2  584F      1695          addq.w    #4,A7
000012A4  6008      1696          bra.s     DumpRegisters_31
                    1697   DumpRegisters_30:
000012A6  4878 002D 1698          pea       45
000012AA  4E92      1699          jsr       (A2)
000012AC  584F      1700          addq.w    #4,A7
                    1701   DumpRegisters_31:
                    1702   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000012AE  3014      1703          move.w    (A4),D0
000012B0  C07C 0008 1704          and.w     #8,D0
000012B4  0C40 0008 1705          cmp.w     #8,D0
000012B8  660A      1706          bne.s     DumpRegisters_32
000012BA  4878 004E 1707          pea       78
000012BE  4E92      1708          jsr       (A2)
000012C0  584F      1709          addq.w    #4,A7
000012C2  6008      1710          bra.s     DumpRegisters_33
                    1711   DumpRegisters_32:
000012C4  4878 002D 1712          pea       45
000012C8  4E92      1713          jsr       (A2)
000012CA  584F      1714          addq.w    #4,A7
                    1715   DumpRegisters_33:
                    1716   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000012CC  3014      1717          move.w    (A4),D0
000012CE  C07C 0004 1718          and.w     #4,D0
000012D2  0C40 0004 1719          cmp.w     #4,D0
000012D6  660A      1720          bne.s     DumpRegisters_34
000012D8  4878 005A 1721          pea       90
000012DC  4E92      1722          jsr       (A2)
000012DE  584F      1723          addq.w    #4,A7
000012E0  6008      1724          bra.s     DumpRegisters_35
                    1725   DumpRegisters_34:
000012E2  4878 002D 1726          pea       45
000012E6  4E92      1727          jsr       (A2)
000012E8  584F      1728          addq.w    #4,A7
                    1729   DumpRegisters_35:
                    1730   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000012EA  3014      1731          move.w    (A4),D0
000012EC  C07C 0002 1732          and.w     #2,D0
000012F0  0C40 0002 1733          cmp.w     #2,D0
000012F4  660A      1734          bne.s     DumpRegisters_36
000012F6  4878 0056 1735          pea       86
000012FA  4E92      1736          jsr       (A2)
000012FC  584F      1737          addq.w    #4,A7
000012FE  6008      1738          bra.s     DumpRegisters_37
                    1739   DumpRegisters_36:
00001300  4878 002D 1740          pea       45
00001304  4E92      1741          jsr       (A2)
00001306  584F      1742          addq.w    #4,A7
                    1743   DumpRegisters_37:
                    1744   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001308  3014      1745          move.w    (A4),D0
0000130A  C07C 0001 1746          and.w     #1,D0
0000130E  0C40 0001 1747          cmp.w     #1,D0
00001312  660A      1748          bne.s     DumpRegisters_38
00001314  4878 0043 1749          pea       67
00001318  4E92      1750          jsr       (A2)
0000131A  584F      1751          addq.w    #4,A7
0000131C  6008      1752          bra.s     DumpRegisters_39
                    1753   DumpRegisters_38:
0000131E  4878 002D 1754          pea       45
00001322  4E92      1755          jsr       (A2)
00001324  584F      1756          addq.w    #4,A7
                    1757   DumpRegisters_39:
                    1758   ; putchar(']') ;
00001326  4878 005D 1759          pea       93
0000132A  4E92      1760          jsr       (A2)
0000132C  584F      1761          addq.w    #4,A7
                    1762   ; printf("\r\n PC = $%08X  ", PC) ;
0000132E  2F39 0803 1763          move.l    _PC.L,-(A7)
00001332  0120      
00001334  4879 0000 1764          pea       @m68kde~1_39.L
00001338  4462      
0000133A  4E93      1765          jsr       (A3)
0000133C  504F      1766          addq.w    #8,A7
                    1767   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000133E  2039 0803 1768          move.l    _PC.L,D0
00001342  0120      
00001344  2040      1769          move.l    D0,A0
00001346  3010      1770          move.w    (A0),D0
00001348  0C40 4E4E 1771          cmp.w     #20046,D0
0000134C  660A      1772          bne.s     DumpRegisters_40
                    1773   ; printf("[@ BREAKPOINT]") ;
0000134E  4879 0000 1774          pea       @m68kde~1_40.L
00001352  4472      
00001354  4E93      1775          jsr       (A3)
00001356  584F      1776          addq.w    #4,A7
                    1777   DumpRegisters_40:
                    1778   ; printf("\r\n") ;
00001358  4879 0000 1779          pea       @m68kde~1_41.L
0000135C  4482      
0000135E  4E93      1780          jsr       (A3)
00001360  584F      1781          addq.w    #4,A7
                    1782   ; for(i=0; i < 8; i++)    {
00001362  4244      1783          clr.w     D4
                    1784   DumpRegisters_42:
00001364  0C44 0008 1785          cmp.w     #8,D4
00001368  6C00 0040 1786          bge       DumpRegisters_44
                    1787   ; if(WatchPointSetOrCleared[i] == 1)
0000136C  48C4      1788          ext.l     D4
0000136E  2004      1789          move.l    D4,D0
00001370  E588      1790          lsl.l     #2,D0
00001372  41F9 0803 1791          lea       _WatchPointSetOrCleared.L,A0
00001376  01A2      
00001378  2030 0800 1792          move.l    0(A0,D0.L),D0
0000137C  0C80 0000 1793          cmp.l     #1,D0
00001380  0001      
00001382  6622      1794          bne.s     DumpRegisters_45
                    1795   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001384  220D      1796          move.l    A5,D1
00001386  48C4      1797          ext.l     D4
00001388  2F00      1798          move.l    D0,-(A7)
0000138A  2004      1799          move.l    D4,D0
0000138C  C1FC 0064 1800          muls      #100,D0
00001390  D280      1801          add.l     D0,D1
00001392  201F      1802          move.l    (A7)+,D0
00001394  2F01      1803          move.l    D1,-(A7)
00001396  48C4      1804          ext.l     D4
00001398  2F04      1805          move.l    D4,-(A7)
0000139A  4879 0000 1806          pea       @m68kde~1_42.L
0000139E  4486      
000013A0  4E93      1807          jsr       (A3)
000013A2  DEFC 000C 1808          add.w     #12,A7
                    1809   DumpRegisters_45:
000013A6  5244      1810          addq.w    #1,D4
000013A8  60BA      1811          bra       DumpRegisters_42
                    1812   DumpRegisters_44:
000013AA  4CDF 3CFC 1813          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000013AE  4E75      1814          rts
                    1815   ; }
                    1816   ; }
                    1817   ; // Trace Exception Handler
                    1818   ; void DumpRegistersandPause(void)
                    1819   ; {
                    1820   _DumpRegistersandPause:
000013B0  2F0A      1821          move.l    A2,-(A7)
000013B2  45F9 0000 1822          lea       _printf.L,A2
000013B6  37B4      
                    1823   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000013B8  4879 0000 1824          pea       @m68kde~1_43.L
000013BC  4492      
000013BE  4E92      1825          jsr       (A2)
000013C0  584F      1826          addq.w    #4,A7
                    1827   ; printf("\r\nBreak Points :[Disabled]") ;
000013C2  4879 0000 1828          pea       @m68kde~1_44.L
000013C6  44B2      
000013C8  4E92      1829          jsr       (A2)
000013CA  584F      1830          addq.w    #4,A7
                    1831   ; DumpRegisters() ;
000013CC  4EB8 0EFC 1832          jsr       _DumpRegisters
                    1833   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000013D0  4879 0000 1834          pea       @m68kde~1_45.L
000013D4  44CE      
000013D6  4E92      1835          jsr       (A2)
000013D8  584F      1836          addq.w    #4,A7
                    1837   ; printf("\r\nPress <ESC> to Resume Program") ;
000013DA  4879 0000 1838          pea       @m68kde~1_46.L
000013DE  44FA      
000013E0  4E92      1839          jsr       (A2)
000013E2  584F      1840          addq.w    #4,A7
                    1841   ; menu() ;
000013E4  4EB9 0000 1842          jsr       _menu
000013E8  1F08      
000013EA  245F      1843          move.l    (A7)+,A2
000013EC  4E75      1844          rts
                    1845   ; }
                    1846   ; void ChangeRegisters(void)
                    1847   ; {
                    1848   _ChangeRegisters:
000013EE  4E56 FFFC 1849          link      A6,#-4
000013F2  48E7 303C 1850          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000013F6  45F9 0000 1851          lea       _printf.L,A2
000013FA  37B4      
000013FC  47EE FFFC 1852          lea       -4(A6),A3
00001400  49F8 0ADC 1853          lea       _Get8HexDigits.L,A4
00001404  4BF8 09A0 1854          lea       __getch.L,A5
                    1855   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1856   ; int reg_val ;
                    1857   ; char c, reg[3] ;
                    1858   ; reg[0] = tolower(_getch()) ;
00001408  2F00      1859          move.l    D0,-(A7)
0000140A  4E95      1860          jsr       (A5)
0000140C  2200      1861          move.l    D0,D1
0000140E  201F      1862          move.l    (A7)+,D0
00001410  2F01      1863          move.l    D1,-(A7)
00001412  4EB9 0000 1864          jsr       _tolower
00001416  3734      
00001418  584F      1865          addq.w    #4,A7
0000141A  1680      1866          move.b    D0,(A3)
                    1867   ; reg[1] = c = tolower(_getch()) ;
0000141C  2F00      1868          move.l    D0,-(A7)
0000141E  4E95      1869          jsr       (A5)
00001420  2200      1870          move.l    D0,D1
00001422  201F      1871          move.l    (A7)+,D0
00001424  2F01      1872          move.l    D1,-(A7)
00001426  4EB9 0000 1873          jsr       _tolower
0000142A  3734      
0000142C  584F      1874          addq.w    #4,A7
0000142E  1400      1875          move.b    D0,D2
00001430  1740 0001 1876          move.b    D0,1(A3)
                    1877   ; if(reg[0] == (char)('d'))  {    // change data register
00001434  1013      1878          move.b    (A3),D0
00001436  0C00 0064 1879          cmp.b     #100,D0
0000143A  6600 00AE 1880          bne       ChangeRegisters_1
                    1881   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000143E  102B 0001 1882          move.b    1(A3),D0
00001442  0C00 0037 1883          cmp.b     #55,D0
00001446  6E0A      1884          bgt.s     ChangeRegisters_5
00001448  102B 0001 1885          move.b    1(A3),D0
0000144C  0C00 0030 1886          cmp.b     #48,D0
00001450  6C0E      1887          bge.s     ChangeRegisters_3
                    1888   ChangeRegisters_5:
                    1889   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001452  4879 0000 1890          pea       @m68kde~1_47.L
00001456  451A      
00001458  4E92      1891          jsr       (A2)
0000145A  584F      1892          addq.w    #4,A7
                    1893   ; return ;
0000145C  6000 0244 1894          bra       ChangeRegisters_6
                    1895   ChangeRegisters_3:
                    1896   ; }
                    1897   ; else {
                    1898   ; printf("\r\nD%c = ", c) ;
00001460  4882      1899          ext.w     D2
00001462  48C2      1900          ext.l     D2
00001464  2F02      1901          move.l    D2,-(A7)
00001466  4879 0000 1902          pea       @m68kde~1_48.L
0000146A  4546      
0000146C  4E92      1903          jsr       (A2)
0000146E  504F      1904          addq.w    #8,A7
                    1905   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001470  42A7      1906          clr.l     -(A7)
00001472  4E94      1907          jsr       (A4)
00001474  584F      1908          addq.w    #4,A7
00001476  2600      1909          move.l    D0,D3
                    1910   ; }
                    1911   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    1912   ; if(c == (char)('0'))
00001478  0C02 0030 1913          cmp.b     #48,D2
0000147C  660A      1914          bne.s     ChangeRegisters_7
                    1915   ; d0 = reg_val ;
0000147E  23C3 0803 1916          move.l    D3,_d0.L
00001482  00E4      
00001484  6000 0060 1917          bra       ChangeRegisters_20
                    1918   ChangeRegisters_7:
                    1919   ; else if(c == (char)('1'))
00001488  0C02 0031 1920          cmp.b     #49,D2
0000148C  660A      1921          bne.s     ChangeRegisters_9
                    1922   ; d1 = reg_val ;
0000148E  23C3 0803 1923          move.l    D3,_d1.L
00001492  00E8      
00001494  6000 0050 1924          bra       ChangeRegisters_20
                    1925   ChangeRegisters_9:
                    1926   ; else if(c == (char)('2'))
00001498  0C02 0032 1927          cmp.b     #50,D2
0000149C  660A      1928          bne.s     ChangeRegisters_11
                    1929   ; d2 = reg_val ;
0000149E  23C3 0803 1930          move.l    D3,_d2.L
000014A2  00EC      
000014A4  6000 0040 1931          bra       ChangeRegisters_20
                    1932   ChangeRegisters_11:
                    1933   ; else if(c == (char)('3'))
000014A8  0C02 0033 1934          cmp.b     #51,D2
000014AC  6608      1935          bne.s     ChangeRegisters_13
                    1936   ; d3 = reg_val ;
000014AE  23C3 0803 1937          move.l    D3,_d3.L
000014B2  00F0      
000014B4  6030      1938          bra.s     ChangeRegisters_20
                    1939   ChangeRegisters_13:
                    1940   ; else if(c == (char)('4'))
000014B6  0C02 0034 1941          cmp.b     #52,D2
000014BA  6608      1942          bne.s     ChangeRegisters_15
                    1943   ; d4 = reg_val ;
000014BC  23C3 0803 1944          move.l    D3,_d4.L
000014C0  00F4      
000014C2  6022      1945          bra.s     ChangeRegisters_20
                    1946   ChangeRegisters_15:
                    1947   ; else if(c == (char)('5'))
000014C4  0C02 0035 1948          cmp.b     #53,D2
000014C8  6608      1949          bne.s     ChangeRegisters_17
                    1950   ; d5 = reg_val ;
000014CA  23C3 0803 1951          move.l    D3,_d5.L
000014CE  00F8      
000014D0  6014      1952          bra.s     ChangeRegisters_20
                    1953   ChangeRegisters_17:
                    1954   ; else if(c == (char)('6'))
000014D2  0C02 0036 1955          cmp.b     #54,D2
000014D6  6608      1956          bne.s     ChangeRegisters_19
                    1957   ; d6 = reg_val ;
000014D8  23C3 0803 1958          move.l    D3,_d6.L
000014DC  00FC      
000014DE  6006      1959          bra.s     ChangeRegisters_20
                    1960   ChangeRegisters_19:
                    1961   ; else
                    1962   ; d7 = reg_val ;
000014E0  23C3 0803 1963          move.l    D3,_d7.L
000014E4  0100      
                    1964   ChangeRegisters_20:
000014E6  6000 01B6 1965          bra       ChangeRegisters_51
                    1966   ChangeRegisters_1:
                    1967   ; }
                    1968   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000014EA  1013      1969          move.b    (A3),D0
000014EC  0C00 0061 1970          cmp.b     #97,D0
000014F0  6600 00A6 1971          bne       ChangeRegisters_21
                    1972   ; if((c > (char)('7')) || (c < (char)('0'))) {
000014F4  0C02 0037 1973          cmp.b     #55,D2
000014F8  6E06      1974          bgt.s     ChangeRegisters_25
000014FA  0C02 0030 1975          cmp.b     #48,D2
000014FE  6C0E      1976          bge.s     ChangeRegisters_23
                    1977   ChangeRegisters_25:
                    1978   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001500  4879 0000 1979          pea       @m68kde~1_49.L
00001504  4550      
00001506  4E92      1980          jsr       (A2)
00001508  584F      1981          addq.w    #4,A7
                    1982   ; return ;
0000150A  6000 0196 1983          bra       ChangeRegisters_6
                    1984   ChangeRegisters_23:
                    1985   ; }
                    1986   ; else {
                    1987   ; printf("\r\nA%c = ", c) ;
0000150E  4882      1988          ext.w     D2
00001510  48C2      1989          ext.l     D2
00001512  2F02      1990          move.l    D2,-(A7)
00001514  4879 0000 1991          pea       @m68kde~1_50.L
00001518  457E      
0000151A  4E92      1992          jsr       (A2)
0000151C  504F      1993          addq.w    #8,A7
                    1994   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000151E  42A7      1995          clr.l     -(A7)
00001520  4E94      1996          jsr       (A4)
00001522  584F      1997          addq.w    #4,A7
00001524  2600      1998          move.l    D0,D3
                    1999   ; }
                    2000   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2001   ; if(c == (char)('0'))
00001526  0C02 0030 2002          cmp.b     #48,D2
0000152A  660A      2003          bne.s     ChangeRegisters_26
                    2004   ; a0 = reg_val ;
0000152C  23C3 0803 2005          move.l    D3,_a0.L
00001530  0104      
00001532  6000 0060 2006          bra       ChangeRegisters_39
                    2007   ChangeRegisters_26:
                    2008   ; else if(c == (char)('1'))
00001536  0C02 0031 2009          cmp.b     #49,D2
0000153A  660A      2010          bne.s     ChangeRegisters_28
                    2011   ; a1 = reg_val ;
0000153C  23C3 0803 2012          move.l    D3,_a1.L
00001540  0108      
00001542  6000 0050 2013          bra       ChangeRegisters_39
                    2014   ChangeRegisters_28:
                    2015   ; else if(c == (char)('2'))
00001546  0C02 0032 2016          cmp.b     #50,D2
0000154A  660A      2017          bne.s     ChangeRegisters_30
                    2018   ; a2 = reg_val ;
0000154C  23C3 0803 2019          move.l    D3,_a2.L
00001550  010C      
00001552  6000 0040 2020          bra       ChangeRegisters_39
                    2021   ChangeRegisters_30:
                    2022   ; else if(c == (char)('3'))
00001556  0C02 0033 2023          cmp.b     #51,D2
0000155A  6608      2024          bne.s     ChangeRegisters_32
                    2025   ; a3 = reg_val ;
0000155C  23C3 0803 2026          move.l    D3,_a3.L
00001560  0110      
00001562  6030      2027          bra.s     ChangeRegisters_39
                    2028   ChangeRegisters_32:
                    2029   ; else if(c == (char)('4'))
00001564  0C02 0034 2030          cmp.b     #52,D2
00001568  6608      2031          bne.s     ChangeRegisters_34
                    2032   ; a4 = reg_val ;
0000156A  23C3 0803 2033          move.l    D3,_a4.L
0000156E  0114      
00001570  6022      2034          bra.s     ChangeRegisters_39
                    2035   ChangeRegisters_34:
                    2036   ; else if(c == (char)('5'))
00001572  0C02 0035 2037          cmp.b     #53,D2
00001576  6608      2038          bne.s     ChangeRegisters_36
                    2039   ; a5 = reg_val ;
00001578  23C3 0803 2040          move.l    D3,_a5.L
0000157C  0118      
0000157E  6014      2041          bra.s     ChangeRegisters_39
                    2042   ChangeRegisters_36:
                    2043   ; else if(c == (char)('6'))
00001580  0C02 0036 2044          cmp.b     #54,D2
00001584  6608      2045          bne.s     ChangeRegisters_38
                    2046   ; a6 = reg_val ;
00001586  23C3 0803 2047          move.l    D3,_a6.L
0000158A  011C      
0000158C  6006      2048          bra.s     ChangeRegisters_39
                    2049   ChangeRegisters_38:
                    2050   ; else
                    2051   ; USP = reg_val ;
0000158E  23C3 0803 2052          move.l    D3,_USP.L
00001592  0128      
                    2053   ChangeRegisters_39:
00001594  6000 0108 2054          bra       ChangeRegisters_51
                    2055   ChangeRegisters_21:
                    2056   ; }
                    2057   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001598  1013      2058          move.b    (A3),D0
0000159A  0C00 0075 2059          cmp.b     #117,D0
0000159E  6600 004E 2060          bne       ChangeRegisters_40
000015A2  0C02 0073 2061          cmp.b     #115,D2
000015A6  6600 0046 2062          bne       ChangeRegisters_40
                    2063   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000015AA  2F00      2064          move.l    D0,-(A7)
000015AC  4E95      2065          jsr       (A5)
000015AE  2200      2066          move.l    D0,D1
000015B0  201F      2067          move.l    (A7)+,D0
000015B2  2F01      2068          move.l    D1,-(A7)
000015B4  4EB9 0000 2069          jsr       _tolower
000015B8  3734      
000015BA  584F      2070          addq.w    #4,A7
000015BC  0C80 0000 2071          cmp.l     #112,D0
000015C0  0070      
000015C2  6618      2072          bne.s     ChangeRegisters_42
                    2073   ; printf("\r\nUser SP = ") ;
000015C4  4879 0000 2074          pea       @m68kde~1_51.L
000015C8  4588      
000015CA  4E92      2075          jsr       (A2)
000015CC  584F      2076          addq.w    #4,A7
                    2077   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015CE  42A7      2078          clr.l     -(A7)
000015D0  4E94      2079          jsr       (A4)
000015D2  584F      2080          addq.w    #4,A7
000015D4  23C0 0803 2081          move.l    D0,_USP.L
000015D8  0128      
000015DA  600E      2082          bra.s     ChangeRegisters_43
                    2083   ChangeRegisters_42:
                    2084   ; }
                    2085   ; else {
                    2086   ; printf("\r\nIllegal Register....") ;
000015DC  4879 0000 2087          pea       @m68kde~1_52.L
000015E0  4596      
000015E2  4E92      2088          jsr       (A2)
000015E4  584F      2089          addq.w    #4,A7
                    2090   ; return ;
000015E6  6000 00BA 2091          bra       ChangeRegisters_6
                    2092   ChangeRegisters_43:
000015EA  6000 00B2 2093          bra       ChangeRegisters_51
                    2094   ChangeRegisters_40:
                    2095   ; }
                    2096   ; }
                    2097   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000015EE  1013      2098          move.b    (A3),D0
000015F0  0C00 0073 2099          cmp.b     #115,D0
000015F4  6600 004E 2100          bne       ChangeRegisters_44
000015F8  0C02 0073 2101          cmp.b     #115,D2
000015FC  6600 0046 2102          bne       ChangeRegisters_44
                    2103   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001600  2F00      2104          move.l    D0,-(A7)
00001602  4E95      2105          jsr       (A5)
00001604  2200      2106          move.l    D0,D1
00001606  201F      2107          move.l    (A7)+,D0
00001608  2F01      2108          move.l    D1,-(A7)
0000160A  4EB9 0000 2109          jsr       _tolower
0000160E  3734      
00001610  584F      2110          addq.w    #4,A7
00001612  0C80 0000 2111          cmp.l     #112,D0
00001616  0070      
00001618  6618      2112          bne.s     ChangeRegisters_46
                    2113   ; printf("\r\nSystem SP = ") ;
0000161A  4879 0000 2114          pea       @m68kde~1_53.L
0000161E  45AE      
00001620  4E92      2115          jsr       (A2)
00001622  584F      2116          addq.w    #4,A7
                    2117   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001624  42A7      2118          clr.l     -(A7)
00001626  4E94      2119          jsr       (A4)
00001628  584F      2120          addq.w    #4,A7
0000162A  23C0 0803 2121          move.l    D0,_SSP.L
0000162E  0124      
00001630  600E      2122          bra.s     ChangeRegisters_47
                    2123   ChangeRegisters_46:
                    2124   ; }
                    2125   ; else {
                    2126   ; printf("\r\nIllegal Register....") ;
00001632  4879 0000 2127          pea       @m68kde~1_54.L
00001636  45BE      
00001638  4E92      2128          jsr       (A2)
0000163A  584F      2129          addq.w    #4,A7
                    2130   ; return ;
0000163C  6000 0064 2131          bra       ChangeRegisters_6
                    2132   ChangeRegisters_47:
00001640  6000 005C 2133          bra       ChangeRegisters_51
                    2134   ChangeRegisters_44:
                    2135   ; }
                    2136   ; }
                    2137   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001644  1013      2138          move.b    (A3),D0
00001646  0C00 0070 2139          cmp.b     #112,D0
0000164A  6620      2140          bne.s     ChangeRegisters_48
0000164C  0C02 0063 2141          cmp.b     #99,D2
00001650  661A      2142          bne.s     ChangeRegisters_48
                    2143   ; printf("\r\nPC = ") ;
00001652  4879 0000 2144          pea       @m68kde~1_55.L
00001656  45D6      
00001658  4E92      2145          jsr       (A2)
0000165A  584F      2146          addq.w    #4,A7
                    2147   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000165C  42A7      2148          clr.l     -(A7)
0000165E  4E94      2149          jsr       (A4)
00001660  584F      2150          addq.w    #4,A7
00001662  23C0 0803 2151          move.l    D0,_PC.L
00001666  0120      
00001668  6000 0034 2152          bra       ChangeRegisters_51
                    2153   ChangeRegisters_48:
                    2154   ; }
                    2155   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000166C  1013      2156          move.b    (A3),D0
0000166E  0C00 0073 2157          cmp.b     #115,D0
00001672  6620      2158          bne.s     ChangeRegisters_50
00001674  0C02 0072 2159          cmp.b     #114,D2
00001678  661A      2160          bne.s     ChangeRegisters_50
                    2161   ; printf("\r\nSR = ") ;
0000167A  4879 0000 2162          pea       @m68kde~1_56.L
0000167E  45DE      
00001680  4E92      2163          jsr       (A2)
00001682  584F      2164          addq.w    #4,A7
                    2165   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001684  42A7      2166          clr.l     -(A7)
00001686  4EB8 0A90 2167          jsr       _Get4HexDigits
0000168A  584F      2168          addq.w    #4,A7
0000168C  33C0 0803 2169          move.w    D0,_SR.L
00001690  012C      
00001692  600A      2170          bra.s     ChangeRegisters_51
                    2171   ChangeRegisters_50:
                    2172   ; }
                    2173   ; else
                    2174   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001694  4879 0000 2175          pea       @m68kde~1_57.L
00001698  45E6      
0000169A  4E92      2176          jsr       (A2)
0000169C  584F      2177          addq.w    #4,A7
                    2178   ChangeRegisters_51:
                    2179   ; DumpRegisters() ;
0000169E  4EB8 0EFC 2180          jsr       _DumpRegisters
                    2181   ChangeRegisters_6:
000016A2  4CDF 3C0C 2182          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000016A6  4E5E      2183          unlk      A6
000016A8  4E75      2184          rts
                    2185   ; }
                    2186   ; void BreakPointDisplay(void)
                    2187   ; {
                    2188   _BreakPointDisplay:
000016AA  48E7 3030 2189          movem.l   D2/D3/A2/A3,-(A7)
000016AE  45F9 0000 2190          lea       _printf.L,A2
000016B2  37B4      
000016B4  47F9 0803 2191          lea       _BreakPointAddress.L,A3
000016B8  012E      
                    2192   ; int i, BreakPointsSet = 0 ;
000016BA  4283      2193          clr.l     D3
                    2194   ; // any break points  set
                    2195   ; for(i = 0; i < 8; i++)  {
000016BC  4282      2196          clr.l     D2
                    2197   BreakPointDisplay_1:
000016BE  0C82 0000 2198          cmp.l     #8,D2
000016C2  0008      
000016C4  6C1C      2199          bge.s     BreakPointDisplay_3
                    2200   ; if(BreakPointSetOrCleared[i] == 1)
000016C6  2002      2201          move.l    D2,D0
000016C8  E588      2202          lsl.l     #2,D0
000016CA  41F9 0803 2203          lea       _BreakPointSetOrCleared.L,A0
000016CE  015E      
000016D0  2030 0800 2204          move.l    0(A0,D0.L),D0
000016D4  0C80 0000 2205          cmp.l     #1,D0
000016D8  0001      
000016DA  6602      2206          bne.s     BreakPointDisplay_4
                    2207   ; BreakPointsSet = 1;
000016DC  7601      2208          moveq     #1,D3
                    2209   BreakPointDisplay_4:
000016DE  5282      2210          addq.l    #1,D2
000016E0  60DC      2211          bra       BreakPointDisplay_1
                    2212   BreakPointDisplay_3:
                    2213   ; }
                    2214   ; if(BreakPointsSet == 1) {
000016E2  0C83 0000 2215          cmp.l     #1,D3
000016E6  0001      
000016E8  6616      2216          bne.s     BreakPointDisplay_6
                    2217   ; printf("\r\n\r\nNum     Address      Instruction") ;
000016EA  4879 0000 2218          pea       @m68kde~1_58.L
000016EE  4622      
000016F0  4E92      2219          jsr       (A2)
000016F2  584F      2220          addq.w    #4,A7
                    2221   ; printf("\r\n---     ---------    -----------") ;
000016F4  4879 0000 2222          pea       @m68kde~1_59.L
000016F8  4648      
000016FA  4E92      2223          jsr       (A2)
000016FC  584F      2224          addq.w    #4,A7
000016FE  600A      2225          bra.s     BreakPointDisplay_7
                    2226   BreakPointDisplay_6:
                    2227   ; }
                    2228   ; else
                    2229   ; printf("\r\nNo BreakPoints Set") ;
00001700  4879 0000 2230          pea       @m68kde~1_60.L
00001704  466C      
00001706  4E92      2231          jsr       (A2)
00001708  584F      2232          addq.w    #4,A7
                    2233   BreakPointDisplay_7:
                    2234   ; for(i = 0; i < 8; i++)  {
0000170A  4282      2235          clr.l     D2
                    2236   BreakPointDisplay_8:
0000170C  0C82 0000 2237          cmp.l     #8,D2
00001710  0008      
00001712  6C00 005A 2238          bge       BreakPointDisplay_10
                    2239   ; // put opcode back, then put break point back
                    2240   ; if(BreakPointSetOrCleared[i] == 1)  {
00001716  2002      2241          move.l    D2,D0
00001718  E588      2242          lsl.l     #2,D0
0000171A  41F9 0803 2243          lea       _BreakPointSetOrCleared.L,A0
0000171E  015E      
00001720  2030 0800 2244          move.l    0(A0,D0.L),D0
00001724  0C80 0000 2245          cmp.l     #1,D0
00001728  0001      
0000172A  6600 003E 2246          bne       BreakPointDisplay_11
                    2247   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000172E  2002      2248          move.l    D2,D0
00001730  E388      2249          lsl.l     #1,D0
00001732  41F9 0803 2250          lea       _BreakPointInstruction.L,A0
00001736  014E      
00001738  2202      2251          move.l    D2,D1
0000173A  E589      2252          lsl.l     #2,D1
0000173C  2233 1800 2253          move.l    0(A3,D1.L),D1
00001740  2241      2254          move.l    D1,A1
00001742  32B0 0800 2255          move.w    0(A0,D0.L),(A1)
                    2256   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001746  2002      2257          move.l    D2,D0
00001748  E588      2258          lsl.l     #2,D0
0000174A  2033 0800 2259          move.l    0(A3,D0.L),D0
0000174E  2040      2260          move.l    D0,A0
00001750  30BC 4E4E 2261          move.w    #20046,(A0)
                    2262   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001754  2202      2263          move.l    D2,D1
00001756  E589      2264          lsl.l     #2,D1
00001758  2F33 1800 2265          move.l    0(A3,D1.L),-(A7)
0000175C  2F02      2266          move.l    D2,-(A7)
0000175E  4879 0000 2267          pea       @m68kde~1_61.L
00001762  4682      
00001764  4E92      2268          jsr       (A2)
00001766  DEFC 000C 2269          add.w     #12,A7
                    2270   BreakPointDisplay_11:
0000176A  5282      2271          addq.l    #1,D2
0000176C  609E      2272          bra       BreakPointDisplay_8
                    2273   BreakPointDisplay_10:
                    2274   ; }
                    2275   ; }
                    2276   ; printf("\r\n") ;
0000176E  4879 0000 2277          pea       @m68kde~1_62.L
00001772  4692      
00001774  4E92      2278          jsr       (A2)
00001776  584F      2279          addq.w    #4,A7
00001778  4CDF 0C0C 2280          movem.l   (A7)+,D2/D3/A2/A3
0000177C  4E75      2281          rts
                    2282   ; }
                    2283   ; void WatchPointDisplay(void)
                    2284   ; {
                    2285   _WatchPointDisplay:
0000177E  48E7 3020 2286          movem.l   D2/D3/A2,-(A7)
00001782  45F9 0000 2287          lea       _printf.L,A2
00001786  37B4      
                    2288   ; int i ;
                    2289   ; int WatchPointsSet = 0 ;
00001788  4283      2290          clr.l     D3
                    2291   ; // any watchpoints set
                    2292   ; for(i = 0; i < 8; i++)  {
0000178A  4282      2293          clr.l     D2
                    2294   WatchPointDisplay_1:
0000178C  0C82 0000 2295          cmp.l     #8,D2
00001790  0008      
00001792  6C1C      2296          bge.s     WatchPointDisplay_3
                    2297   ; if(WatchPointSetOrCleared[i] == 1)
00001794  2002      2298          move.l    D2,D0
00001796  E588      2299          lsl.l     #2,D0
00001798  41F9 0803 2300          lea       _WatchPointSetOrCleared.L,A0
0000179C  01A2      
0000179E  2030 0800 2301          move.l    0(A0,D0.L),D0
000017A2  0C80 0000 2302          cmp.l     #1,D0
000017A6  0001      
000017A8  6602      2303          bne.s     WatchPointDisplay_4
                    2304   ; WatchPointsSet = 1;
000017AA  7601      2305          moveq     #1,D3
                    2306   WatchPointDisplay_4:
000017AC  5282      2307          addq.l    #1,D2
000017AE  60DC      2308          bra       WatchPointDisplay_1
                    2309   WatchPointDisplay_3:
                    2310   ; }
                    2311   ; if(WatchPointsSet == 1) {
000017B0  0C83 0000 2312          cmp.l     #1,D3
000017B4  0001      
000017B6  6616      2313          bne.s     WatchPointDisplay_6
                    2314   ; printf("\r\nNum     Address") ;
000017B8  4879 0000 2315          pea       @m68kde~1_63.L
000017BC  4696      
000017BE  4E92      2316          jsr       (A2)
000017C0  584F      2317          addq.w    #4,A7
                    2318   ; printf("\r\n---     ---------") ;
000017C2  4879 0000 2319          pea       @m68kde~1_64.L
000017C6  46A8      
000017C8  4E92      2320          jsr       (A2)
000017CA  584F      2321          addq.w    #4,A7
000017CC  600A      2322          bra.s     WatchPointDisplay_7
                    2323   WatchPointDisplay_6:
                    2324   ; }
                    2325   ; else
                    2326   ; printf("\r\nNo WatchPoints Set") ;
000017CE  4879 0000 2327          pea       @m68kde~1_65.L
000017D2  46BC      
000017D4  4E92      2328          jsr       (A2)
000017D6  584F      2329          addq.w    #4,A7
                    2330   WatchPointDisplay_7:
                    2331   ; for(i = 0; i < 8; i++)  {
000017D8  4282      2332          clr.l     D2
                    2333   WatchPointDisplay_8:
000017DA  0C82 0000 2334          cmp.l     #8,D2
000017DE  0008      
000017E0  6C00 0038 2335          bge       WatchPointDisplay_10
                    2336   ; if(WatchPointSetOrCleared[i] == 1)
000017E4  2002      2337          move.l    D2,D0
000017E6  E588      2338          lsl.l     #2,D0
000017E8  41F9 0803 2339          lea       _WatchPointSetOrCleared.L,A0
000017EC  01A2      
000017EE  2030 0800 2340          move.l    0(A0,D0.L),D0
000017F2  0C80 0000 2341          cmp.l     #1,D0
000017F6  0001      
000017F8  661C      2342          bne.s     WatchPointDisplay_11
                    2343   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000017FA  2202      2344          move.l    D2,D1
000017FC  E589      2345          lsl.l     #2,D1
000017FE  41F9 0803 2346          lea       _WatchPointAddress.L,A0
00001802  0182      
00001804  2F30 1800 2347          move.l    0(A0,D1.L),-(A7)
00001808  2F02      2348          move.l    D2,-(A7)
0000180A  4879 0000 2349          pea       @m68kde~1_66.L
0000180E  46D2      
00001810  4E92      2350          jsr       (A2)
00001812  DEFC 000C 2351          add.w     #12,A7
                    2352   WatchPointDisplay_11:
00001816  5282      2353          addq.l    #1,D2
00001818  60C0      2354          bra       WatchPointDisplay_8
                    2355   WatchPointDisplay_10:
                    2356   ; }
                    2357   ; printf("\r\n") ;
0000181A  4879 0000 2358          pea       @m68kde~1_67.L
0000181E  46E2      
00001820  4E92      2359          jsr       (A2)
00001822  584F      2360          addq.w    #4,A7
00001824  4CDF 040C 2361          movem.l   (A7)+,D2/D3/A2
00001828  4E75      2362          rts
                    2363   ; }
                    2364   ; void BreakPointClear(void)
                    2365   ; {
                    2366   _BreakPointClear:
0000182A  4E56 FFFC 2367          link      A6,#-4
0000182E  48E7 2020 2368          movem.l   D2/A2,-(A7)
00001832  45F9 0000 2369          lea       _printf.L,A2
00001836  37B4      
                    2370   ; unsigned int i ;
                    2371   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2372   ; BreakPointDisplay() ;
00001838  4EB8 16AA 2373          jsr       _BreakPointDisplay
                    2374   ; printf("\r\nEnter Break Point Number: ") ;
0000183C  4879 0000 2375          pea       @m68kde~1_68.L
00001840  46E6      
00001842  4E92      2376          jsr       (A2)
00001844  584F      2377          addq.w    #4,A7
                    2378   ; i = xtod(_getch()) ;           // get break pointer number
00001846  2F00      2379          move.l    D0,-(A7)
00001848  4EB8 09A0 2380          jsr       __getch
0000184C  2200      2381          move.l    D0,D1
0000184E  201F      2382          move.l    (A7)+,D0
00001850  2F01      2383          move.l    D1,-(A7)
00001852  4EB8 0A0A 2384          jsr       _xtod
00001856  584F      2385          addq.w    #4,A7
00001858  C0BC 0000 2386          and.l     #255,D0
0000185C  00FF      
0000185E  2400      2387          move.l    D0,D2
                    2388   ; if((i < 0) || (i > 7))   {
00001860  0C82 0000 2389          cmp.l     #0,D2
00001864  0000      
00001866  6508      2390          blo.s     BreakPointClear_3
00001868  0C82 0000 2391          cmp.l     #7,D2
0000186C  0007      
0000186E  630E      2392          bls.s     BreakPointClear_1
                    2393   BreakPointClear_3:
                    2394   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001870  4879 0000 2395          pea       @m68kde~1_69.L
00001874  4704      
00001876  4E92      2396          jsr       (A2)
00001878  584F      2397          addq.w    #4,A7
                    2398   ; return ;
0000187A  6000 0080 2399          bra       BreakPointClear_4
                    2400   BreakPointClear_1:
                    2401   ; }
                    2402   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000187E  2002      2403          move.l    D2,D0
00001880  E588      2404          lsl.l     #2,D0
00001882  41F9 0803 2405          lea       _BreakPointSetOrCleared.L,A0
00001886  015E      
00001888  2030 0800 2406          move.l    0(A0,D0.L),D0
0000188C  0C80 0000 2407          cmp.l     #1,D0
00001890  0001      
00001892  6600 005A 2408          bne       BreakPointClear_5
                    2409   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001896  2002      2410          move.l    D2,D0
00001898  E588      2411          lsl.l     #2,D0
0000189A  41F9 0803 2412          lea       _BreakPointAddress.L,A0
0000189E  012E      
000018A0  2D70 0800 2413          move.l    0(A0,D0.L),-4(A6)
000018A4  FFFC      
                    2414   ; BreakPointAddress[i] = 0 ;
000018A6  2002      2415          move.l    D2,D0
000018A8  E588      2416          lsl.l     #2,D0
000018AA  41F9 0803 2417          lea       _BreakPointAddress.L,A0
000018AE  012E      
000018B0  42B0 0800 2418          clr.l     0(A0,D0.L)
                    2419   ; BreakPointSetOrCleared[i] = 0 ;
000018B4  2002      2420          move.l    D2,D0
000018B6  E588      2421          lsl.l     #2,D0
000018B8  41F9 0803 2422          lea       _BreakPointSetOrCleared.L,A0
000018BC  015E      
000018BE  42B0 0800 2423          clr.l     0(A0,D0.L)
                    2424   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000018C2  2002      2425          move.l    D2,D0
000018C4  E388      2426          lsl.l     #1,D0
000018C6  41F9 0803 2427          lea       _BreakPointInstruction.L,A0
000018CA  014E      
000018CC  226E FFFC 2428          move.l    -4(A6),A1
000018D0  32B0 0800 2429          move.w    0(A0,D0.L),(A1)
                    2430   ; BreakPointInstruction[i] = 0 ;
000018D4  2002      2431          move.l    D2,D0
000018D6  E388      2432          lsl.l     #1,D0
000018D8  41F9 0803 2433          lea       _BreakPointInstruction.L,A0
000018DC  014E      
000018DE  4270 0800 2434          clr.w     0(A0,D0.L)
                    2435   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000018E2  4879 0000 2436          pea       @m68kde~1_70.L
000018E6  4720      
000018E8  4E92      2437          jsr       (A2)
000018EA  584F      2438          addq.w    #4,A7
000018EC  600A      2439          bra.s     BreakPointClear_6
                    2440   BreakPointClear_5:
                    2441   ; }
                    2442   ; else
                    2443   ; printf("\r\nBreak Point wasn't Set.....") ;
000018EE  4879 0000 2444          pea       @m68kde~1_71.L
000018F2  473E      
000018F4  4E92      2445          jsr       (A2)
000018F6  584F      2446          addq.w    #4,A7
                    2447   BreakPointClear_6:
                    2448   ; BreakPointDisplay() ;
000018F8  4EB8 16AA 2449          jsr       _BreakPointDisplay
                    2450   ; return ;
                    2451   BreakPointClear_4:
000018FC  4CDF 0404 2452          movem.l   (A7)+,D2/A2
00001900  4E5E      2453          unlk      A6
00001902  4E75      2454          rts
                    2455   ; }
                    2456   ; void WatchPointClear(void)
                    2457   ; {
                    2458   _WatchPointClear:
00001904  48E7 2020 2459          movem.l   D2/A2,-(A7)
00001908  45F9 0000 2460          lea       _printf.L,A2
0000190C  37B4      
                    2461   ; unsigned int i ;
                    2462   ; WatchPointDisplay() ;
0000190E  4EB8 177E 2463          jsr       _WatchPointDisplay
                    2464   ; printf("\r\nEnter Watch Point Number: ") ;
00001912  4879 0000 2465          pea       @m68kde~1_72.L
00001916  475C      
00001918  4E92      2466          jsr       (A2)
0000191A  584F      2467          addq.w    #4,A7
                    2468   ; i = xtod(_getch()) ;           // get watch pointer number
0000191C  2F00      2469          move.l    D0,-(A7)
0000191E  4EB8 09A0 2470          jsr       __getch
00001922  2200      2471          move.l    D0,D1
00001924  201F      2472          move.l    (A7)+,D0
00001926  2F01      2473          move.l    D1,-(A7)
00001928  4EB8 0A0A 2474          jsr       _xtod
0000192C  584F      2475          addq.w    #4,A7
0000192E  C0BC 0000 2476          and.l     #255,D0
00001932  00FF      
00001934  2400      2477          move.l    D0,D2
                    2478   ; if((i < 0) || (i > 7))   {
00001936  0C82 0000 2479          cmp.l     #0,D2
0000193A  0000      
0000193C  6508      2480          blo.s     WatchPointClear_3
0000193E  0C82 0000 2481          cmp.l     #7,D2
00001942  0007      
00001944  630E      2482          bls.s     WatchPointClear_1
                    2483   WatchPointClear_3:
                    2484   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001946  4879 0000 2485          pea       @m68kde~1_73.L
0000194A  477A      
0000194C  4E92      2486          jsr       (A2)
0000194E  584F      2487          addq.w    #4,A7
                    2488   ; return ;
00001950  6000 004E 2489          bra       WatchPointClear_4
                    2490   WatchPointClear_1:
                    2491   ; }
                    2492   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001954  2002      2493          move.l    D2,D0
00001956  E588      2494          lsl.l     #2,D0
00001958  41F9 0803 2495          lea       _WatchPointSetOrCleared.L,A0
0000195C  01A2      
0000195E  2030 0800 2496          move.l    0(A0,D0.L),D0
00001962  0C80 0000 2497          cmp.l     #1,D0
00001966  0001      
00001968  6628      2498          bne.s     WatchPointClear_5
                    2499   ; WatchPointAddress[i] = 0 ;
0000196A  2002      2500          move.l    D2,D0
0000196C  E588      2501          lsl.l     #2,D0
0000196E  41F9 0803 2502          lea       _WatchPointAddress.L,A0
00001972  0182      
00001974  42B0 0800 2503          clr.l     0(A0,D0.L)
                    2504   ; WatchPointSetOrCleared[i] = 0 ;
00001978  2002      2505          move.l    D2,D0
0000197A  E588      2506          lsl.l     #2,D0
0000197C  41F9 0803 2507          lea       _WatchPointSetOrCleared.L,A0
00001980  01A2      
00001982  42B0 0800 2508          clr.l     0(A0,D0.L)
                    2509   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001986  4879 0000 2510          pea       @m68kde~1_74.L
0000198A  4796      
0000198C  4E92      2511          jsr       (A2)
0000198E  584F      2512          addq.w    #4,A7
00001990  600A      2513          bra.s     WatchPointClear_6
                    2514   WatchPointClear_5:
                    2515   ; }
                    2516   ; else
                    2517   ; printf("\r\nWatch Point Was not Set.....") ;
00001992  4879 0000 2518          pea       @m68kde~1_75.L
00001996  47B4      
00001998  4E92      2519          jsr       (A2)
0000199A  584F      2520          addq.w    #4,A7
                    2521   WatchPointClear_6:
                    2522   ; WatchPointDisplay() ;
0000199C  4EB8 177E 2523          jsr       _WatchPointDisplay
                    2524   ; return ;
                    2525   WatchPointClear_4:
000019A0  4CDF 0404 2526          movem.l   (A7)+,D2/A2
000019A4  4E75      2527          rts
                    2528   ; }
                    2529   ; void DisableBreakPoints(void)
                    2530   ; {
                    2531   _DisableBreakPoints:
000019A6  4E56 FFFC 2532          link      A6,#-4
000019AA  2F02      2533          move.l    D2,-(A7)
                    2534   ; int i ;
                    2535   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2536   ; for(i = 0; i < 8; i++)  {
000019AC  4282      2537          clr.l     D2
                    2538   DisableBreakPoints_1:
000019AE  0C82 0000 2539          cmp.l     #8,D2
000019B2  0008      
000019B4  6C00 003E 2540          bge       DisableBreakPoints_3
                    2541   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000019B8  2002      2542          move.l    D2,D0
000019BA  E588      2543          lsl.l     #2,D0
000019BC  41F9 0803 2544          lea       _BreakPointSetOrCleared.L,A0
000019C0  015E      
000019C2  2030 0800 2545          move.l    0(A0,D0.L),D0
000019C6  0C80 0000 2546          cmp.l     #1,D0
000019CA  0001      
000019CC  6622      2547          bne.s     DisableBreakPoints_4
                    2548   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000019CE  2002      2549          move.l    D2,D0
000019D0  E588      2550          lsl.l     #2,D0
000019D2  41F9 0803 2551          lea       _BreakPointAddress.L,A0
000019D6  012E      
000019D8  2D70 0800 2552          move.l    0(A0,D0.L),-4(A6)
000019DC  FFFC      
                    2553   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000019DE  2002      2554          move.l    D2,D0
000019E0  E388      2555          lsl.l     #1,D0
000019E2  41F9 0803 2556          lea       _BreakPointInstruction.L,A0
000019E6  014E      
000019E8  226E FFFC 2557          move.l    -4(A6),A1
000019EC  32B0 0800 2558          move.w    0(A0,D0.L),(A1)
                    2559   DisableBreakPoints_4:
000019F0  5282      2560          addq.l    #1,D2
000019F2  60BA      2561          bra       DisableBreakPoints_1
                    2562   DisableBreakPoints_3:
000019F4  241F      2563          move.l    (A7)+,D2
000019F6  4E5E      2564          unlk      A6
000019F8  4E75      2565          rts
                    2566   ; }
                    2567   ; }
                    2568   ; }
                    2569   ; void EnableBreakPoints(void)
                    2570   ; {
                    2571   _EnableBreakPoints:
000019FA  4E56 FFFC 2572          link      A6,#-4
000019FE  2F02      2573          move.l    D2,-(A7)
                    2574   ; int i ;
                    2575   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2576   ; for(i = 0; i < 8; i++)  {
00001A00  4282      2577          clr.l     D2
                    2578   EnableBreakPoints_1:
00001A02  0C82 0000 2579          cmp.l     #8,D2
00001A06  0008      
00001A08  6C32      2580          bge.s     EnableBreakPoints_3
                    2581   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A0A  2002      2582          move.l    D2,D0
00001A0C  E588      2583          lsl.l     #2,D0
00001A0E  41F9 0803 2584          lea       _BreakPointSetOrCleared.L,A0
00001A12  015E      
00001A14  2030 0800 2585          move.l    0(A0,D0.L),D0
00001A18  0C80 0000 2586          cmp.l     #1,D0
00001A1C  0001      
00001A1E  6618      2587          bne.s     EnableBreakPoints_4
                    2588   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A20  2002      2589          move.l    D2,D0
00001A22  E588      2590          lsl.l     #2,D0
00001A24  41F9 0803 2591          lea       _BreakPointAddress.L,A0
00001A28  012E      
00001A2A  2D70 0800 2592          move.l    0(A0,D0.L),-4(A6)
00001A2E  FFFC      
                    2593   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001A30  206E FFFC 2594          move.l    -4(A6),A0
00001A34  30BC 4E4E 2595          move.w    #20046,(A0)
                    2596   EnableBreakPoints_4:
00001A38  5282      2597          addq.l    #1,D2
00001A3A  60C6      2598          bra       EnableBreakPoints_1
                    2599   EnableBreakPoints_3:
00001A3C  241F      2600          move.l    (A7)+,D2
00001A3E  4E5E      2601          unlk      A6
00001A40  4E75      2602          rts
                    2603   ; }
                    2604   ; }
                    2605   ; }
                    2606   ; void KillAllBreakPoints(void)
                    2607   ; {
                    2608   _KillAllBreakPoints:
00001A42  4E56 FFFC 2609          link      A6,#-4
00001A46  2F02      2610          move.l    D2,-(A7)
                    2611   ; int i ;
                    2612   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2613   ; for(i = 0; i < 8; i++)  {
00001A48  4282      2614          clr.l     D2
                    2615   KillAllBreakPoints_1:
00001A4A  0C82 0000 2616          cmp.l     #8,D2
00001A4E  0008      
00001A50  6C00 0052 2617          bge       KillAllBreakPoints_3
                    2618   ; // clear BP
                    2619   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A54  2002      2620          move.l    D2,D0
00001A56  E588      2621          lsl.l     #2,D0
00001A58  41F9 0803 2622          lea       _BreakPointAddress.L,A0
00001A5C  012E      
00001A5E  2D70 0800 2623          move.l    0(A0,D0.L),-4(A6)
00001A62  FFFC      
                    2624   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001A64  2002      2625          move.l    D2,D0
00001A66  E388      2626          lsl.l     #1,D0
00001A68  41F9 0803 2627          lea       _BreakPointInstruction.L,A0
00001A6C  014E      
00001A6E  226E FFFC 2628          move.l    -4(A6),A1
00001A72  32B0 0800 2629          move.w    0(A0,D0.L),(A1)
                    2630   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001A76  2002      2631          move.l    D2,D0
00001A78  E588      2632          lsl.l     #2,D0
00001A7A  41F9 0803 2633          lea       _BreakPointAddress.L,A0
00001A7E  012E      
00001A80  42B0 0800 2634          clr.l     0(A0,D0.L)
                    2635   ; BreakPointInstruction[i] = 0 ;
00001A84  2002      2636          move.l    D2,D0
00001A86  E388      2637          lsl.l     #1,D0
00001A88  41F9 0803 2638          lea       _BreakPointInstruction.L,A0
00001A8C  014E      
00001A8E  4270 0800 2639          clr.w     0(A0,D0.L)
                    2640   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001A92  2002      2641          move.l    D2,D0
00001A94  E588      2642          lsl.l     #2,D0
00001A96  41F9 0803 2643          lea       _BreakPointSetOrCleared.L,A0
00001A9A  015E      
00001A9C  42B0 0800 2644          clr.l     0(A0,D0.L)
00001AA0  5282      2645          addq.l    #1,D2
00001AA2  60A6      2646          bra       KillAllBreakPoints_1
                    2647   KillAllBreakPoints_3:
00001AA4  241F      2648          move.l    (A7)+,D2
00001AA6  4E5E      2649          unlk      A6
00001AA8  4E75      2650          rts
                    2651   ; }
                    2652   ; //BreakPointDisplay() ;       // display the break points
                    2653   ; }
                    2654   ; void KillAllWatchPoints(void)
                    2655   ; {
                    2656   _KillAllWatchPoints:
00001AAA  2F02      2657          move.l    D2,-(A7)
                    2658   ; int i ;
                    2659   ; for(i = 0; i < 8; i++)  {
00001AAC  4282      2660          clr.l     D2
                    2661   KillAllWatchPoints_1:
00001AAE  0C82 0000 2662          cmp.l     #8,D2
00001AB2  0008      
00001AB4  6C20      2663          bge.s     KillAllWatchPoints_3
                    2664   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AB6  2002      2665          move.l    D2,D0
00001AB8  E588      2666          lsl.l     #2,D0
00001ABA  41F9 0803 2667          lea       _WatchPointAddress.L,A0
00001ABE  0182      
00001AC0  42B0 0800 2668          clr.l     0(A0,D0.L)
                    2669   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001AC4  2002      2670          move.l    D2,D0
00001AC6  E588      2671          lsl.l     #2,D0
00001AC8  41F9 0803 2672          lea       _WatchPointSetOrCleared.L,A0
00001ACC  01A2      
00001ACE  42B0 0800 2673          clr.l     0(A0,D0.L)
00001AD2  5282      2674          addq.l    #1,D2
00001AD4  60D8      2675          bra       KillAllWatchPoints_1
                    2676   KillAllWatchPoints_3:
00001AD6  241F      2677          move.l    (A7)+,D2
00001AD8  4E75      2678          rts
                    2679   ; }
                    2680   ; //WatchPointDisplay() ;       // display the break points
                    2681   ; }
                    2682   ; void SetBreakPoint(void)
                    2683   ; {
                    2684   _SetBreakPoint:
00001ADA  4E56 FFFC 2685          link      A6,#-4
00001ADE  48E7 3830 2686          movem.l   D2/D3/D4/A2/A3,-(A7)
00001AE2  45F9 0000 2687          lea       _printf.L,A2
00001AE6  37B4      
00001AE8  47F9 0803 2688          lea       _BreakPointSetOrCleared.L,A3
00001AEC  015E      
                    2689   ; int i ;
                    2690   ; int BPNumber;
                    2691   ; int BPAddress;
                    2692   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2693   ; // see if any free break points
                    2694   ; for(i = 0; i < 8; i ++) {
00001AEE  4282      2695          clr.l     D2
                    2696   SetBreakPoint_1:
00001AF0  0C82 0000 2697          cmp.l     #8,D2
00001AF4  0008      
00001AF6  6C10      2698          bge.s     SetBreakPoint_3
                    2699   ; if( BreakPointSetOrCleared[i] == 0)
00001AF8  2002      2700          move.l    D2,D0
00001AFA  E588      2701          lsl.l     #2,D0
00001AFC  2033 0800 2702          move.l    0(A3,D0.L),D0
00001B00  6602      2703          bne.s     SetBreakPoint_4
                    2704   ; break ;         // if spare BP found allow user to set it
00001B02  6004      2705          bra.s     SetBreakPoint_3
                    2706   SetBreakPoint_4:
00001B04  5282      2707          addq.l    #1,D2
00001B06  60E8      2708          bra       SetBreakPoint_1
                    2709   SetBreakPoint_3:
                    2710   ; }
                    2711   ; if(i == 8) {
00001B08  0C82 0000 2712          cmp.l     #8,D2
00001B0C  0008      
00001B0E  660E      2713          bne.s     SetBreakPoint_6
                    2714   ; printf("\r\nNo FREE Break Points.....") ;
00001B10  4879 0000 2715          pea       @m68kde~1_76.L
00001B14  47D4      
00001B16  4E92      2716          jsr       (A2)
00001B18  584F      2717          addq.w    #4,A7
                    2718   ; return ;
00001B1A  6000 00D6 2719          bra       SetBreakPoint_15
                    2720   SetBreakPoint_6:
                    2721   ; }
                    2722   ; printf("\r\nBreak Point Address: ") ;
00001B1E  4879 0000 2723          pea       @m68kde~1_77.L
00001B22  47F0      
00001B24  4E92      2724          jsr       (A2)
00001B26  584F      2725          addq.w    #4,A7
                    2726   ; BPAddress = Get8HexDigits(0) ;
00001B28  42A7      2727          clr.l     -(A7)
00001B2A  4EB8 0ADC 2728          jsr       _Get8HexDigits
00001B2E  584F      2729          addq.w    #4,A7
00001B30  2600      2730          move.l    D0,D3
                    2731   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001B32  2803      2732          move.l    D3,D4
                    2733   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001B34  2003      2734          move.l    D3,D0
00001B36  C0BC 0000 2735          and.l     #1,D0
00001B3A  0001      
00001B3C  0C80 0000 2736          cmp.l     #1,D0
00001B40  0001      
00001B42  660E      2737          bne.s     SetBreakPoint_9
                    2738   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001B44  4879 0000 2739          pea       @m68kde~1_78.L
00001B48  4808      
00001B4A  4E92      2740          jsr       (A2)
00001B4C  584F      2741          addq.w    #4,A7
                    2742   ; return ;
00001B4E  6000 00A2 2743          bra       SetBreakPoint_15
                    2744   SetBreakPoint_9:
                    2745   ; }
                    2746   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001B52  0C83 0000 2747          cmp.l     #32768,D3
00001B56  8000      
00001B58  640E      2748          bhs.s     SetBreakPoint_11
                    2749   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001B5A  4879 0000 2750          pea       @m68kde~1_79.L
00001B5E  483E      
00001B60  4E92      2751          jsr       (A2)
00001B62  584F      2752          addq.w    #4,A7
                    2753   ; return ;
00001B64  6000 008C 2754          bra       SetBreakPoint_15
                    2755   SetBreakPoint_11:
                    2756   ; }
                    2757   ; // search for first free bp or existing same BP
                    2758   ; for(i = 0; i < 8; i++)  {
00001B68  4282      2759          clr.l     D2
                    2760   SetBreakPoint_13:
00001B6A  0C82 0000 2761          cmp.l     #8,D2
00001B6E  0008      
00001B70  6C00 0080 2762          bge       SetBreakPoint_15
                    2763   ; if(BreakPointAddress[i] == BPAddress)   {
00001B74  2002      2764          move.l    D2,D0
00001B76  E588      2765          lsl.l     #2,D0
00001B78  41F9 0803 2766          lea       _BreakPointAddress.L,A0
00001B7C  012E      
00001B7E  B6B0 0800 2767          cmp.l     0(A0,D0.L),D3
00001B82  6610      2768          bne.s     SetBreakPoint_16
                    2769   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001B84  2F03      2770          move.l    D3,-(A7)
00001B86  4879 0000 2771          pea       @m68kde~1_80.L
00001B8A  4886      
00001B8C  4E92      2772          jsr       (A2)
00001B8E  504F      2773          addq.w    #8,A7
                    2774   ; return ;
00001B90  6000 0060 2775          bra       SetBreakPoint_15
                    2776   SetBreakPoint_16:
                    2777   ; }
                    2778   ; if(BreakPointSetOrCleared[i] == 0) {
00001B94  2002      2779          move.l    D2,D0
00001B96  E588      2780          lsl.l     #2,D0
00001B98  2033 0800 2781          move.l    0(A3,D0.L),D0
00001B9C  6600 004E 2782          bne       SetBreakPoint_18
                    2783   ; // set BP here
                    2784   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001BA0  2002      2785          move.l    D2,D0
00001BA2  E588      2786          lsl.l     #2,D0
00001BA4  27BC 0000 2787          move.l    #1,0(A3,D0.L)
00001BA8  0001 0800 
                    2788   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001BAC  2044      2789          move.l    D4,A0
00001BAE  2002      2790          move.l    D2,D0
00001BB0  E388      2791          lsl.l     #1,D0
00001BB2  43F9 0803 2792          lea       _BreakPointInstruction.L,A1
00001BB6  014E      
00001BB8  3390 0800 2793          move.w    (A0),0(A1,D0.L)
                    2794   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001BBC  2F04      2795          move.l    D4,-(A7)
00001BBE  4879 0000 2796          pea       @m68kde~1_81.L
00001BC2  48BE      
00001BC4  4E92      2797          jsr       (A2)
00001BC6  504F      2798          addq.w    #8,A7
                    2799   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001BC8  2044      2800          move.l    D4,A0
00001BCA  30BC 4E4E 2801          move.w    #20046,(A0)
                    2802   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001BCE  2002      2803          move.l    D2,D0
00001BD0  E588      2804          lsl.l     #2,D0
00001BD2  41F9 0803 2805          lea       _BreakPointAddress.L,A0
00001BD6  012E      
00001BD8  2183 0800 2806          move.l    D3,0(A0,D0.L)
                    2807   ; printf("\r\n") ;
00001BDC  4879 0000 2808          pea       @m68kde~1_82.L
00001BE0  48E4      
00001BE2  4E92      2809          jsr       (A2)
00001BE4  584F      2810          addq.w    #4,A7
                    2811   ; BreakPointDisplay() ;       // display the break points
00001BE6  4EB8 16AA 2812          jsr       _BreakPointDisplay
                    2813   ; return ;
00001BEA  6006      2814          bra.s     SetBreakPoint_15
                    2815   SetBreakPoint_18:
00001BEC  5282      2816          addq.l    #1,D2
00001BEE  6000 FF7A 2817          bra       SetBreakPoint_13
                    2818   SetBreakPoint_15:
00001BF2  4CDF 0C1C 2819          movem.l   (A7)+,D2/D3/D4/A2/A3
00001BF6  4E5E      2820          unlk      A6
00001BF8  4E75      2821          rts
                    2822   ; }
                    2823   ; }
                    2824   ; }
                    2825   ; void SetWatchPoint(void)
                    2826   ; {
                    2827   _SetWatchPoint:
00001BFA  4E56 FFF8 2828          link      A6,#-8
00001BFE  48E7 3030 2829          movem.l   D2/D3/A2/A3,-(A7)
00001C02  45F9 0000 2830          lea       _printf.L,A2
00001C06  37B4      
00001C08  47F9 0803 2831          lea       _WatchPointSetOrCleared.L,A3
00001C0C  01A2      
                    2832   ; int i ;
                    2833   ; int WPNumber;
                    2834   ; int WPAddress;
                    2835   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2836   ; // see if any free break points
                    2837   ; for(i = 0; i < 8; i ++) {
00001C0E  4282      2838          clr.l     D2
                    2839   SetWatchPoint_1:
00001C10  0C82 0000 2840          cmp.l     #8,D2
00001C14  0008      
00001C16  6C10      2841          bge.s     SetWatchPoint_3
                    2842   ; if( WatchPointSetOrCleared[i] == 0)
00001C18  2002      2843          move.l    D2,D0
00001C1A  E588      2844          lsl.l     #2,D0
00001C1C  2033 0800 2845          move.l    0(A3,D0.L),D0
00001C20  6602      2846          bne.s     SetWatchPoint_4
                    2847   ; break ;         // if spare WP found allow user to set it
00001C22  6004      2848          bra.s     SetWatchPoint_3
                    2849   SetWatchPoint_4:
00001C24  5282      2850          addq.l    #1,D2
00001C26  60E8      2851          bra       SetWatchPoint_1
                    2852   SetWatchPoint_3:
                    2853   ; }
                    2854   ; if(i == 8) {
00001C28  0C82 0000 2855          cmp.l     #8,D2
00001C2C  0008      
00001C2E  660E      2856          bne.s     SetWatchPoint_6
                    2857   ; printf("\r\nNo FREE Watch Points.....") ;
00001C30  4879 0000 2858          pea       @m68kde~1_83.L
00001C34  48E8      
00001C36  4E92      2859          jsr       (A2)
00001C38  584F      2860          addq.w    #4,A7
                    2861   ; return ;
00001C3A  6000 008C 2862          bra       SetWatchPoint_11
                    2863   SetWatchPoint_6:
                    2864   ; }
                    2865   ; printf("\r\nWatch Point Address: ") ;
00001C3E  4879 0000 2866          pea       @m68kde~1_84.L
00001C42  4904      
00001C44  4E92      2867          jsr       (A2)
00001C46  584F      2868          addq.w    #4,A7
                    2869   ; WPAddress = Get8HexDigits(0) ;
00001C48  42A7      2870          clr.l     -(A7)
00001C4A  4EB8 0ADC 2871          jsr       _Get8HexDigits
00001C4E  584F      2872          addq.w    #4,A7
00001C50  2600      2873          move.l    D0,D3
                    2874   ; // search for first free wp or existing same wp
                    2875   ; for(i = 0; i < 8; i++)  {
00001C52  4282      2876          clr.l     D2
                    2877   SetWatchPoint_9:
00001C54  0C82 0000 2878          cmp.l     #8,D2
00001C58  0008      
00001C5A  6C00 006C 2879          bge       SetWatchPoint_11
                    2880   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001C5E  2002      2881          move.l    D2,D0
00001C60  E588      2882          lsl.l     #2,D0
00001C62  41F9 0803 2883          lea       _WatchPointAddress.L,A0
00001C66  0182      
00001C68  B6B0 0800 2884          cmp.l     0(A0,D0.L),D3
00001C6C  6614      2885          bne.s     SetWatchPoint_12
00001C6E  4A83      2886          tst.l     D3
00001C70  6710      2887          beq.s     SetWatchPoint_12
                    2888   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001C72  2F03      2889          move.l    D3,-(A7)
00001C74  4879 0000 2890          pea       @m68kde~1_85.L
00001C78  491C      
00001C7A  4E92      2891          jsr       (A2)
00001C7C  504F      2892          addq.w    #8,A7
                    2893   ; return ;
00001C7E  6000 0048 2894          bra       SetWatchPoint_11
                    2895   SetWatchPoint_12:
                    2896   ; }
                    2897   ; if(WatchPointSetOrCleared[i] == 0) {
00001C82  2002      2898          move.l    D2,D0
00001C84  E588      2899          lsl.l     #2,D0
00001C86  2033 0800 2900          move.l    0(A3,D0.L),D0
00001C8A  6600 0038 2901          bne       SetWatchPoint_14
                    2902   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001C8E  2002      2903          move.l    D2,D0
00001C90  E588      2904          lsl.l     #2,D0
00001C92  27BC 0000 2905          move.l    #1,0(A3,D0.L)
00001C96  0001 0800 
                    2906   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001C9A  2F03      2907          move.l    D3,-(A7)
00001C9C  4879 0000 2908          pea       @m68kde~1_86.L
00001CA0  4952      
00001CA2  4E92      2909          jsr       (A2)
00001CA4  504F      2910          addq.w    #8,A7
                    2911   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001CA6  2002      2912          move.l    D2,D0
00001CA8  E588      2913          lsl.l     #2,D0
00001CAA  41F9 0803 2914          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2183 0800 2915          move.l    D3,0(A0,D0.L)
                    2916   ; printf("\r\n") ;
00001CB4  4879 0000 2917          pea       @m68kde~1_87.L
00001CB8  4978      
00001CBA  4E92      2918          jsr       (A2)
00001CBC  584F      2919          addq.w    #4,A7
                    2920   ; WatchPointDisplay() ;       // display the break points
00001CBE  4EB8 177E 2921          jsr       _WatchPointDisplay
                    2922   ; return ;
00001CC2  6004      2923          bra.s     SetWatchPoint_11
                    2924   SetWatchPoint_14:
00001CC4  5282      2925          addq.l    #1,D2
00001CC6  608C      2926          bra       SetWatchPoint_9
                    2927   SetWatchPoint_11:
00001CC8  4CDF 0C0C 2928          movem.l   (A7)+,D2/D3/A2/A3
00001CCC  4E5E      2929          unlk      A6
00001CCE  4E75      2930          rts
                    2931   ; }
                    2932   ; }
                    2933   ; }
                    2934   ; void HandleBreakPoint(void)
                    2935   ; {
                    2936   _HandleBreakPoint:
00001CD0  4E56 FFFC 2937          link      A6,#-4
00001CD4  48E7 0038 2938          movem.l   A2/A3/A4,-(A7)
00001CD8  45F9 0803 2939          lea       _i.L,A2
00001CDC  00C4      
00001CDE  47F9 0000 2940          lea       _printf.L,A3
00001CE2  37B4      
00001CE4  49F9 0803 2941          lea       _PC.L,A4
00001CE8  0120      
                    2942   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2943   ; // now we have to put the break point back to run the instruction
                    2944   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    2945   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001CEA  5594      2946          subq.l    #2,(A4)
                    2947   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001CEC  4879 0000 2948          pea       @m68kde~1_88.L
00001CF0  497C      
00001CF2  4E93      2949          jsr       (A3)
00001CF4  584F      2950          addq.w    #4,A7
                    2951   ; printf("\r\nSingle Step : [ON]") ;
00001CF6  4879 0000 2952          pea       @m68kde~1_89.L
00001CFA  4990      
00001CFC  4E93      2953          jsr       (A3)
00001CFE  584F      2954          addq.w    #4,A7
                    2955   ; printf("\r\nBreakPoints : [Enabled]") ;
00001D00  4879 0000 2956          pea       @m68kde~1_90.L
00001D04  49A6      
00001D06  4E93      2957          jsr       (A3)
00001D08  584F      2958          addq.w    #4,A7
                    2959   ; // now clear the break point (put original instruction back)
                    2960   ; ProgramBreakPointAddress = PC ;
00001D0A  2D54 FFFC 2961          move.l    (A4),-4(A6)
                    2962   ; for(i = 0; i < 8; i ++) {
00001D0E  4292      2963          clr.l     (A2)
                    2964   HandleBreakPoint_1:
00001D10  2012      2965          move.l    (A2),D0
00001D12  0C80 0000 2966          cmp.l     #8,D0
00001D16  0008      
00001D18  6400 0056 2967          bhs       HandleBreakPoint_3
                    2968   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001D1C  2012      2969          move.l    (A2),D0
00001D1E  E588      2970          lsl.l     #2,D0
00001D20  41F9 0803 2971          lea       _BreakPointAddress.L,A0
00001D24  012E      
00001D26  2230 0800 2972          move.l    0(A0,D0.L),D1
00001D2A  B294      2973          cmp.l     (A4),D1
00001D2C  6600 003E 2974          bne       HandleBreakPoint_4
                    2975   ; BreakPointAddress[i] = 0 ;
00001D30  2012      2976          move.l    (A2),D0
00001D32  E588      2977          lsl.l     #2,D0
00001D34  41F9 0803 2978          lea       _BreakPointAddress.L,A0
00001D38  012E      
00001D3A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; BreakPointSetOrCleared[i] = 0 ;
00001D3E  2012      2981          move.l    (A2),D0
00001D40  E588      2982          lsl.l     #2,D0
00001D42  41F9 0803 2983          lea       _BreakPointSetOrCleared.L,A0
00001D46  015E      
00001D48  42B0 0800 2984          clr.l     0(A0,D0.L)
                    2985   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D4C  2012      2986          move.l    (A2),D0
00001D4E  E388      2987          lsl.l     #1,D0
00001D50  41F9 0803 2988          lea       _BreakPointInstruction.L,A0
00001D54  014E      
00001D56  226E FFFC 2989          move.l    -4(A6),A1
00001D5A  32B0 0800 2990          move.w    0(A0,D0.L),(A1)
                    2991   ; BreakPointInstruction[i] = 0 ;
00001D5E  2012      2992          move.l    (A2),D0
00001D60  E388      2993          lsl.l     #1,D0
00001D62  41F9 0803 2994          lea       _BreakPointInstruction.L,A0
00001D66  014E      
00001D68  4270 0800 2995          clr.w     0(A0,D0.L)
                    2996   HandleBreakPoint_4:
00001D6C  5292      2997          addq.l    #1,(A2)
00001D6E  60A0      2998          bra       HandleBreakPoint_1
                    2999   HandleBreakPoint_3:
                    3000   ; }
                    3001   ; }
                    3002   ; DumpRegisters() ;
00001D70  4EB8 0EFC 3003          jsr       _DumpRegisters
                    3004   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001D74  4879 0000 3005          pea       @m68kde~1_91.L
00001D78  49C0      
00001D7A  4E93      3006          jsr       (A3)
00001D7C  584F      3007          addq.w    #4,A7
                    3008   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001D7E  4879 0000 3009          pea       @m68kde~1_92.L
00001D82  49EC      
00001D84  4E93      3010          jsr       (A3)
00001D86  584F      3011          addq.w    #4,A7
                    3012   ; menu() ;
00001D88  4EB9 0000 3013          jsr       _menu
00001D8C  1F08      
00001D8E  4CDF 1C00 3014          movem.l   (A7)+,A2/A3/A4
00001D92  4E5E      3015          unlk      A6
00001D94  4E75      3016          rts
                    3017   ; }
                    3018   ; void UnknownCommand()
                    3019   ; {
                    3020   _UnknownCommand:
                    3021   ; printf("\r\nUnknown Command.....\r\n") ;
00001D96  4879 0000 3022          pea       @m68kde~1_93.L
00001D9A  4A14      
00001D9C  4EB9 0000 3023          jsr       _printf
00001DA0  37B4      
00001DA2  584F      3024          addq.w    #4,A7
                    3025   ; Help() ;
00001DA4  4EB9 0000 3026          jsr       _Help
00001DA8  1EBA      
00001DAA  4E75      3027          rts
                    3028   ; }
                    3029   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3030   ; void CallDebugMonitor(void)
                    3031   ; {
                    3032   _CallDebugMonitor:
                    3033   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001DAC  4879 0000 3034          pea       @m68kde~1_94.L
00001DB0  4A2E      
00001DB2  4EB9 0000 3035          jsr       _printf
00001DB6  37B4      
00001DB8  584F      3036          addq.w    #4,A7
                    3037   ; menu();
00001DBA  4EB9 0000 3038          jsr       _menu
00001DBE  1F08      
00001DC0  4E75      3039          rts
                    3040   ; }
                    3041   ; void Breakpoint(void)
                    3042   ; {
                    3043   _Breakpoint:
00001DC2  2F02      3044          move.l    D2,-(A7)
                    3045   ; char c;
                    3046   ; c = toupper(_getch());
00001DC4  2F00      3047          move.l    D0,-(A7)
00001DC6  4EB8 09A0 3048          jsr       __getch
00001DCA  2200      3049          move.l    D0,D1
00001DCC  201F      3050          move.l    (A7)+,D0
00001DCE  2F01      3051          move.l    D1,-(A7)
00001DD0  4EB9 0000 3052          jsr       _toupper
00001DD4  3798      
00001DD6  584F      3053          addq.w    #4,A7
00001DD8  1400      3054          move.b    D0,D2
                    3055   ; if( c == (char)('D'))                                      // BreakPoint Display
00001DDA  0C02 0044 3056          cmp.b     #68,D2
00001DDE  6608      3057          bne.s     Breakpoint_1
                    3058   ; BreakPointDisplay() ;
00001DE0  4EB8 16AA 3059          jsr       _BreakPointDisplay
00001DE4  6000 0054 3060          bra       Breakpoint_10
                    3061   Breakpoint_1:
                    3062   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001DE8  0C02 004B 3063          cmp.b     #75,D2
00001DEC  6630      3064          bne.s     Breakpoint_3
                    3065   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001DEE  4879 0000 3066          pea       @m68kde~1_95.L
00001DF2  4A4E      
00001DF4  4EB9 0000 3067          jsr       _printf
00001DF8  37B4      
00001DFA  584F      3068          addq.w    #4,A7
                    3069   ; c = toupper(_getch());
00001DFC  2F00      3070          move.l    D0,-(A7)
00001DFE  4EB8 09A0 3071          jsr       __getch
00001E02  2200      3072          move.l    D0,D1
00001E04  201F      3073          move.l    (A7)+,D0
00001E06  2F01      3074          move.l    D1,-(A7)
00001E08  4EB9 0000 3075          jsr       _toupper
00001E0C  3798      
00001E0E  584F      3076          addq.w    #4,A7
00001E10  1400      3077          move.b    D0,D2
                    3078   ; if(c == (char)('Y'))
00001E12  0C02 0059 3079          cmp.b     #89,D2
00001E16  6604      3080          bne.s     Breakpoint_5
                    3081   ; KillAllBreakPoints() ;
00001E18  4EB8 1A42 3082          jsr       _KillAllBreakPoints
                    3083   Breakpoint_5:
00001E1C  601C      3084          bra.s     Breakpoint_10
                    3085   Breakpoint_3:
                    3086   ; }
                    3087   ; else if(c == (char)('S')) {
00001E1E  0C02 0053 3088          cmp.b     #83,D2
00001E22  6606      3089          bne.s     Breakpoint_7
                    3090   ; SetBreakPoint() ;
00001E24  4EB8 1ADA 3091          jsr       _SetBreakPoint
00001E28  6010      3092          bra.s     Breakpoint_10
                    3093   Breakpoint_7:
                    3094   ; }
                    3095   ; else if(c == (char)('C')) {
00001E2A  0C02 0043 3096          cmp.b     #67,D2
00001E2E  6606      3097          bne.s     Breakpoint_9
                    3098   ; BreakPointClear() ;
00001E30  4EB8 182A 3099          jsr       _BreakPointClear
00001E34  6004      3100          bra.s     Breakpoint_10
                    3101   Breakpoint_9:
                    3102   ; }
                    3103   ; else
                    3104   ; UnknownCommand() ;
00001E36  4EB8 1D96 3105          jsr       _UnknownCommand
                    3106   Breakpoint_10:
00001E3A  241F      3107          move.l    (A7)+,D2
00001E3C  4E75      3108          rts
                    3109   ; }
                    3110   ; void Watchpoint(void)
                    3111   ; {
                    3112   _Watchpoint:
00001E3E  2F02      3113          move.l    D2,-(A7)
                    3114   ; char c;
                    3115   ; c = toupper(_getch());
00001E40  2F00      3116          move.l    D0,-(A7)
00001E42  4EB8 09A0 3117          jsr       __getch
00001E46  2200      3118          move.l    D0,D1
00001E48  201F      3119          move.l    (A7)+,D0
00001E4A  2F01      3120          move.l    D1,-(A7)
00001E4C  4EB9 0000 3121          jsr       _toupper
00001E50  3798      
00001E52  584F      3122          addq.w    #4,A7
00001E54  1400      3123          move.b    D0,D2
                    3124   ; if( c == (char)('D'))                                      // WatchPoint Display
00001E56  0C02 0044 3125          cmp.b     #68,D2
00001E5A  6608      3126          bne.s     Watchpoint_1
                    3127   ; WatchPointDisplay() ;
00001E5C  4EB8 177E 3128          jsr       _WatchPointDisplay
00001E60  6000 0054 3129          bra       Watchpoint_10
                    3130   Watchpoint_1:
                    3131   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001E64  0C02 004B 3132          cmp.b     #75,D2
00001E68  6630      3133          bne.s     Watchpoint_3
                    3134   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001E6A  4879 0000 3135          pea       @m68kde~1_96.L
00001E6E  4A70      
00001E70  4EB9 0000 3136          jsr       _printf
00001E74  37B4      
00001E76  584F      3137          addq.w    #4,A7
                    3138   ; c = toupper(_getch());
00001E78  2F00      3139          move.l    D0,-(A7)
00001E7A  4EB8 09A0 3140          jsr       __getch
00001E7E  2200      3141          move.l    D0,D1
00001E80  201F      3142          move.l    (A7)+,D0
00001E82  2F01      3143          move.l    D1,-(A7)
00001E84  4EB9 0000 3144          jsr       _toupper
00001E88  3798      
00001E8A  584F      3145          addq.w    #4,A7
00001E8C  1400      3146          move.b    D0,D2
                    3147   ; if(c == (char)('Y'))
00001E8E  0C02 0059 3148          cmp.b     #89,D2
00001E92  6604      3149          bne.s     Watchpoint_5
                    3150   ; KillAllWatchPoints() ;
00001E94  4EB8 1AAA 3151          jsr       _KillAllWatchPoints
                    3152   Watchpoint_5:
00001E98  601C      3153          bra.s     Watchpoint_10
                    3154   Watchpoint_3:
                    3155   ; }
                    3156   ; else if(c == (char)('S')) {
00001E9A  0C02 0053 3157          cmp.b     #83,D2
00001E9E  6606      3158          bne.s     Watchpoint_7
                    3159   ; SetWatchPoint() ;
00001EA0  4EB8 1BFA 3160          jsr       _SetWatchPoint
00001EA4  6010      3161          bra.s     Watchpoint_10
                    3162   Watchpoint_7:
                    3163   ; }
                    3164   ; else if(c == (char)('C')) {
00001EA6  0C02 0043 3165          cmp.b     #67,D2
00001EAA  6606      3166          bne.s     Watchpoint_9
                    3167   ; WatchPointClear() ;
00001EAC  4EB8 1904 3168          jsr       _WatchPointClear
00001EB0  6004      3169          bra.s     Watchpoint_10
                    3170   Watchpoint_9:
                    3171   ; }
                    3172   ; else
                    3173   ; UnknownCommand() ;
00001EB2  4EB8 1D96 3174          jsr       _UnknownCommand
                    3175   Watchpoint_10:
00001EB6  241F      3176          move.l    (A7)+,D2
00001EB8  4E75      3177          rts
                    3178   ; }
                    3179   ; void Help(void)
                    3180   ; {
                    3181   _Help:
00001EBA  48E7 2020 3182          movem.l   D2/A2,-(A7)
00001EBE  45F9 0000 3183          lea       _printf.L,A2
00001EC2  37B4      
                    3184   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001EC4  41F9 0000 3185          lea       @m68kde~1_97.L,A0
00001EC8  4A92      
00001ECA  2408      3186          move.l    A0,D2
                    3187   ; printf(banner) ;
00001ECC  2F02      3188          move.l    D2,-(A7)
00001ECE  4E92      3189          jsr       (A2)
00001ED0  584F      3190          addq.w    #4,A7
                    3191   ; printf("\r\n  Final Project") ;
00001ED2  4879 0000 3192          pea       @m68kde~1_98.L
00001ED6  4AD6      
00001ED8  4E92      3193          jsr       (A2)
00001EDA  584F      3194          addq.w    #4,A7
                    3195   ; printf(banner) ;
00001EDC  2F02      3196          move.l    D2,-(A7)
00001EDE  4E92      3197          jsr       (A2)
00001EE0  584F      3198          addq.w    #4,A7
                    3199   ; printf("\r\n  H    - Say Hello World") ;
00001EE2  4879 0000 3200          pea       @m68kde~1_99.L
00001EE6  4AE8      
00001EE8  4E92      3201          jsr       (A2)
00001EEA  584F      3202          addq.w    #4,A7
                    3203   ; printf(banner) ;
00001EEC  2F02      3204          move.l    D2,-(A7)
00001EEE  4E92      3205          jsr       (A2)
00001EF0  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\n  T    - Run Tetris Game") ;
00001EF2  4879 0000 3208          pea       @m68kde~1_100.L
00001EF6  4B04      
00001EF8  4E92      3209          jsr       (A2)
00001EFA  584F      3210          addq.w    #4,A7
                    3211   ; printf(banner) ;
00001EFC  2F02      3212          move.l    D2,-(A7)
00001EFE  4E92      3213          jsr       (A2)
00001F00  584F      3214          addq.w    #4,A7
00001F02  4CDF 0404 3215          movem.l   (A7)+,D2/A2
00001F06  4E75      3216          rts
                    3217   ; }
                    3218   ; void menu(void)
                    3219   ; {
                    3220   _menu:
00001F08  4E56 FFFC 3221          link      A6,#-4
00001F0C  48E7 2020 3222          movem.l   D2/A2,-(A7)
00001F10  45F9 0000 3223          lea       _printf.L,A2
00001F14  37B4      
                    3224   ; char c;
                    3225   ; int c1 ;
                    3226   ; while(1)    {
                    3227   menu_1:
                    3228   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001F16  4EB8 09DE 3229          jsr       _FlushKeyboard
                    3230   ; printf("\r\n#") ;
00001F1A  4879 0000 3231          pea       @m68kde~1_101.L
00001F1E  4B20      
00001F20  4E92      3232          jsr       (A2)
00001F22  584F      3233          addq.w    #4,A7
                    3234   ; c = toupper(_getch());
00001F24  2F00      3235          move.l    D0,-(A7)
00001F26  4EB8 09A0 3236          jsr       __getch
00001F2A  2200      3237          move.l    D0,D1
00001F2C  201F      3238          move.l    (A7)+,D0
00001F2E  2F01      3239          move.l    D1,-(A7)
00001F30  4EB9 0000 3240          jsr       _toupper
00001F34  3798      
00001F36  584F      3241          addq.w    #4,A7
00001F38  1400      3242          move.b    D0,D2
                    3243   ; if ( c == (char)('T'))  {
00001F3A  0C02 0054 3244          cmp.b     #84,D2
00001F3E  6612      3245          bne.s     menu_4
                    3246   ; printf("\nRunning Tetris Game\n");
00001F40  4879 0000 3247          pea       @m68kde~1_102.L
00001F44  4B24      
00001F46  4E92      3248          jsr       (A2)
00001F48  584F      3249          addq.w    #4,A7
                    3250   ; tetris_main();
00001F4A  4EB9 0000 3251          jsr       _tetris_main
00001F4E  338E      
                    3252   ; continue;
00001F50  6028      3253          bra.s     menu_8
                    3254   menu_4:
                    3255   ; }
                    3256   ; if ( c == (char)('H'))  {
00001F52  0C02 0048 3257          cmp.b     #72,D2
00001F56  6614      3258          bne.s     menu_6
                    3259   ; printf("\nSaying Hello World\n");
00001F58  4879 0000 3260          pea       @m68kde~1_103.L
00001F5C  4B3A      
00001F5E  4E92      3261          jsr       (A2)
00001F60  584F      3262          addq.w    #4,A7
                    3263   ; say_hello();
00001F62  4EB8 0904 3264          jsr       _say_hello
                    3265   ; say_world();
00001F66  4EB8 092A 3266          jsr       _say_world
                    3267   ; continue;
00001F6A  600E      3268          bra.s     menu_8
                    3269   menu_6:
                    3270   ; }
                    3271   ; if(c == (char)('M'))  {
00001F6C  0C02 004D 3272          cmp.b     #77,D2
00001F70  6608      3273          bne.s     menu_8
                    3274   ; MemoryChange();
00001F72  4EB8 0DFC 3275          jsr       _MemoryChange
                    3276   ; continue;
00001F76  6000 0002 3277          bra       menu_8
                    3278   menu_8:
00001F7A  609A      3279          bra       menu_1
                    3280   ; }
                    3281   ; }
                    3282   ; }
                    3283   ; void PrintErrorMessageandAbort(char *string) {
                    3284   _PrintErrorMessageandAbort:
00001F7C  4E56 0000 3285          link      A6,#0
                    3286   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00001F80  4879 0000 3287          pea       @m68kde~1_104.L
00001F84  4B50      
00001F86  4EB9 0000 3288          jsr       _printf
00001F8A  37B4      
00001F8C  584F      3289          addq.w    #4,A7
                    3290   ; printf("%s\r\n", string) ;
00001F8E  2F2E 0008 3291          move.l    8(A6),-(A7)
00001F92  4879 0000 3292          pea       @m68kde~1_105.L
00001F96  4B6C      
00001F98  4EB9 0000 3293          jsr       _printf
00001F9C  37B4      
00001F9E  504F      3294          addq.w    #8,A7
                    3295   ; menu() ;
00001FA0  4EB8 1F08 3296          jsr       _menu
00001FA4  4E5E      3297          unlk      A6
00001FA6  4E75      3298          rts
                    3299   ; }
                    3300   ; void IRQMessage(int level) {
                    3301   _IRQMessage:
00001FA8  4E56 0000 3302          link      A6,#0
                    3303   ; printf("\r\n\r\nProgram ABORT !!!!!");
00001FAC  4879 0000 3304          pea       @m68kde~1_106.L
00001FB0  4B72      
00001FB2  4EB9 0000 3305          jsr       _printf
00001FB6  37B4      
00001FB8  584F      3306          addq.w    #4,A7
                    3307   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00001FBA  2F2E 0008 3308          move.l    8(A6),-(A7)
00001FBE  4879 0000 3309          pea       @m68kde~1_107.L
00001FC2  4B8A      
00001FC4  4EB9 0000 3310          jsr       _printf
00001FC8  37B4      
00001FCA  504F      3311          addq.w    #8,A7
                    3312   ; menu() ;
00001FCC  4EB8 1F08 3313          jsr       _menu
00001FD0  4E5E      3314          unlk      A6
00001FD2  4E75      3315          rts
                    3316   ; }
                    3317   ; void UnhandledIRQ1(void) {
                    3318   _UnhandledIRQ1:
                    3319   ; IRQMessage(1);
00001FD4  4878 0001 3320          pea       1
00001FD8  4EB8 1FA8 3321          jsr       _IRQMessage
00001FDC  584F      3322          addq.w    #4,A7
00001FDE  4E75      3323          rts
                    3324   ; }
                    3325   ; void UnhandledIRQ2(void) {
                    3326   _UnhandledIRQ2:
                    3327   ; IRQMessage(2);
00001FE0  4878 0002 3328          pea       2
00001FE4  4EB8 1FA8 3329          jsr       _IRQMessage
00001FE8  584F      3330          addq.w    #4,A7
00001FEA  4E75      3331          rts
                    3332   ; }
                    3333   ; void UnhandledIRQ3(void){
                    3334   _UnhandledIRQ3:
                    3335   ; IRQMessage(3);
00001FEC  4878 0003 3336          pea       3
00001FF0  4EB8 1FA8 3337          jsr       _IRQMessage
00001FF4  584F      3338          addq.w    #4,A7
00001FF6  4E75      3339          rts
                    3340   ; }
                    3341   ; void UnhandledIRQ4(void) {
                    3342   _UnhandledIRQ4:
                    3343   ; IRQMessage(4);
00001FF8  4878 0004 3344          pea       4
00001FFC  4EB8 1FA8 3345          jsr       _IRQMessage
00002000  584F      3346          addq.w    #4,A7
00002002  4E75      3347          rts
                    3348   ; }
                    3349   ; void UnhandledIRQ5(void) {
                    3350   _UnhandledIRQ5:
                    3351   ; IRQMessage(5);
00002004  4878 0005 3352          pea       5
00002008  4EB8 1FA8 3353          jsr       _IRQMessage
0000200C  584F      3354          addq.w    #4,A7
0000200E  4E75      3355          rts
                    3356   ; }
                    3357   ; void UnhandledIRQ6(void) {
                    3358   _UnhandledIRQ6:
                    3359   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002010  4879 0000 3360          pea       @m68kde~1_108.L
00002014  4BAE      
00002016  4EB8 1F7C 3361          jsr       _PrintErrorMessageandAbort
0000201A  584F      3362          addq.w    #4,A7
                    3363   ; menu() ;
0000201C  4EB8 1F08 3364          jsr       _menu
00002020  4E75      3365          rts
                    3366   ; }
                    3367   ; void UnhandledIRQ7(void) {
                    3368   _UnhandledIRQ7:
                    3369   ; IRQMessage(7);
00002022  4878 0007 3370          pea       7
00002026  4EB8 1FA8 3371          jsr       _IRQMessage
0000202A  584F      3372          addq.w    #4,A7
0000202C  4E75      3373          rts
                    3374   ; }
                    3375   ; void UnhandledTrap(void) {
                    3376   _UnhandledTrap:
                    3377   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
0000202E  4879 0000 3378          pea       @m68kde~1_109.L
00002032  4BEE      
00002034  4EB8 1F7C 3379          jsr       _PrintErrorMessageandAbort
00002038  584F      3380          addq.w    #4,A7
0000203A  4E75      3381          rts
                    3382   ; }
                    3383   ; void BusError() {
                    3384   _BusError:
                    3385   ; PrintErrorMessageandAbort("BUS Error!") ;
0000203C  4879 0000 3386          pea       @m68kde~1_110.L
00002040  4C04      
00002042  4EB8 1F7C 3387          jsr       _PrintErrorMessageandAbort
00002046  584F      3388          addq.w    #4,A7
00002048  4E75      3389          rts
                    3390   ; }
                    3391   ; void AddressError() {
                    3392   _AddressError:
                    3393   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
0000204A  4879 0000 3394          pea       @m68kde~1_111.L
0000204E  4C10      
00002050  4EB8 1F7C 3395          jsr       _PrintErrorMessageandAbort
00002054  584F      3396          addq.w    #4,A7
00002056  4E75      3397          rts
                    3398   ; }
                    3399   ; void IllegalInstruction() {
                    3400   _IllegalInstruction:
                    3401   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002058  4879 0000 3402          pea       @m68kde~1_112.L
0000205C  4C20      
0000205E  4EB8 1F7C 3403          jsr       _PrintErrorMessageandAbort
00002062  584F      3404          addq.w    #4,A7
00002064  4E75      3405          rts
                    3406   ; }
                    3407   ; void Dividebyzero() {
                    3408   _Dividebyzero:
                    3409   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002066  4879 0000 3410          pea       @m68kde~1_113.L
0000206A  4C34      
0000206C  4EB8 1F7C 3411          jsr       _PrintErrorMessageandAbort
00002070  584F      3412          addq.w    #4,A7
00002072  4E75      3413          rts
                    3414   ; }
                    3415   ; void Check() {
                    3416   _Check:
                    3417   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002074  4879 0000 3418          pea       @m68kde~1_114.L
00002078  4C44      
0000207A  4EB8 1F7C 3419          jsr       _PrintErrorMessageandAbort
0000207E  584F      3420          addq.w    #4,A7
00002080  4E75      3421          rts
                    3422   ; }
                    3423   ; void Trapv() {
                    3424   _Trapv:
                    3425   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002082  4879 0000 3426          pea       @m68kde~1_115.L
00002086  4C56      
00002088  4EB8 1F7C 3427          jsr       _PrintErrorMessageandAbort
0000208C  584F      3428          addq.w    #4,A7
0000208E  4E75      3429          rts
                    3430   ; }
                    3431   ; void PrivError() {
                    3432   _PrivError:
                    3433   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002090  4879 0000 3434          pea       @m68kde~1_116.L
00002094  4C68      
00002096  4EB8 1F7C 3435          jsr       _PrintErrorMessageandAbort
0000209A  584F      3436          addq.w    #4,A7
0000209C  4E75      3437          rts
                    3438   ; }
                    3439   ; void UnitIRQ() {
                    3440   _UnitIRQ:
                    3441   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000209E  4879 0000 3442          pea       @m68kde~1_117.L
000020A2  4C7C      
000020A4  4EB8 1F7C 3443          jsr       _PrintErrorMessageandAbort
000020A8  584F      3444          addq.w    #4,A7
000020AA  4E75      3445          rts
                    3446   ; }
                    3447   ; void Spurious() {
                    3448   _Spurious:
                    3449   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000020AC  4879 0000 3450          pea       @m68kde~1_118.L
000020B0  4C8E      
000020B2  4EB8 1F7C 3451          jsr       _PrintErrorMessageandAbort
000020B6  584F      3452          addq.w    #4,A7
000020B8  4E75      3453          rts
                    3454   ; }
                    3455   ; void incrementTimer()
                    3456   ; {
                    3457   _incrementTimer:
000020BA  4E56 FFFC 3458          link      A6,#-4
                    3459   ; char* incrMsg;
                    3460   ; clockTimer+= 10;
000020BE  06B9 0000 3461          add.l     #10,_clockTimer.L
000020C2  000A 0803 
000020C6  0546      
                    3462   ; TIMER5_CONTROL = 0x03;
000020C8  13FC 0003 3463          move.b    #3,4194610
000020CC  0040 0132 
000020D0  4E5E      3464          unlk      A6
000020D2  4E75      3465          rts
                    3466   ; }
                    3467   ; void main(void)
                    3468   ; {
                    3469   _main:
000020D4  4E56 FFF0 3470          link      A6,#-16
000020D8  48E7 2020 3471          movem.l   D2/A2,-(A7)
000020DC  45F8 08C6 3472          lea       _InstallExceptionHandler.L,A2
                    3473   ; char c ;
                    3474   ; int i, j ;
                    3475   ; char *BugMessage = "DE1-68k Bug V1.77\r\ Paco Chan's (82033788) Final Project 2023W2";
000020E0  41F9 0000 3476          lea       @m68kde~1_119.L,A0
000020E4  4C9C      
000020E6  2D48 FFF8 3477          move.l    A0,-8(A6)
000020EA  41F9 0000 3479          lea       @m68kde~1_120.L,A0
000020EE  4CE4      
000020F0  2D48 FFFC 3480          move.l    A0,-4(A6)
                    3481   ; KillAllBreakPoints() ;
000020F4  4EB8 1A42 3482          jsr       _KillAllBreakPoints
                    3483   ; i = x = y = z = PortA_Count = 0;
000020F8  42B9 0803 3484          clr.l     _PortA_Count.L
000020FC  00D4      
000020FE  42B9 0803 3485          clr.l     _z.L
00002102  00D0      
00002104  42B9 0803 3486          clr.l     _y.L
00002108  00CC      
0000210A  42B9 0803 3487          clr.l     _x.L
0000210E  00C8      
00002110  4282      3488          clr.l     D2
                    3489   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002112  42B9 0803 3490          clr.l     _GoFlag.L
00002116  00DC      
00002118  42B9 0803 3491          clr.l     _Trace.L
0000211C  00D8      
                    3492   ; Echo = 1 ;
0000211E  23FC 0000 3493          move.l    #1,_Echo.L
00002122  0001 0803 
00002126  00E0      
                    3494   ; //setup timer
                    3495   ; clockTimer = 0;
00002128  42B9 0803 3496          clr.l     _clockTimer.L
0000212C  0546      
                    3497   ; InstallExceptionHandler(incrementTimer, 27);
0000212E  4878 001B 3498          pea       27
00002132  4878 20BA 3499          pea       _incrementTimer.L
00002136  4E92      3500          jsr       (A2)
00002138  504F      3501          addq.w    #8,A7
                    3502   ; TIMER5_DATA = 0x03;
0000213A  13FC 0003 3503          move.b    #3,4194608
0000213E  0040 0130 
                    3504   ; TIMER5_CONTROL = 0x03;
00002142  13FC 0003 3505          move.b    #3,4194610
00002146  0040 0132 
                    3506   ; // Initialise Breakpoint variables
                    3507   ; for(i = 0; i < 8; i++)  {
0000214A  4282      3508          clr.l     D2
                    3509   main_1:
0000214C  0C82 0000 3510          cmp.l     #8,D2
00002150  0008      
00002152  6C00 004C 3511          bge       main_3
                    3512   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002156  2002      3513          move.l    D2,D0
00002158  E588      3514          lsl.l     #2,D0
0000215A  41F9 0803 3515          lea       _BreakPointAddress.L,A0
0000215E  012E      
00002160  42B0 0800 3516          clr.l     0(A0,D0.L)
                    3517   ; WatchPointAddress[i] = 0 ;
00002164  2002      3518          move.l    D2,D0
00002166  E588      3519          lsl.l     #2,D0
00002168  41F9 0803 3520          lea       _WatchPointAddress.L,A0
0000216C  0182      
0000216E  42B0 0800 3521          clr.l     0(A0,D0.L)
                    3522   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002172  2002      3523          move.l    D2,D0
00002174  E388      3524          lsl.l     #1,D0
00002176  41F9 0803 3525          lea       _BreakPointInstruction.L,A0
0000217A  014E      
0000217C  4270 0800 3526          clr.w     0(A0,D0.L)
                    3527   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002180  2002      3528          move.l    D2,D0
00002182  E588      3529          lsl.l     #2,D0
00002184  41F9 0803 3530          lea       _BreakPointSetOrCleared.L,A0
00002188  015E      
0000218A  42B0 0800 3531          clr.l     0(A0,D0.L)
                    3532   ; WatchPointSetOrCleared[i] = 0;
0000218E  2002      3533          move.l    D2,D0
00002190  E588      3534          lsl.l     #2,D0
00002192  41F9 0803 3535          lea       _WatchPointSetOrCleared.L,A0
00002196  01A2      
00002198  42B0 0800 3536          clr.l     0(A0,D0.L)
0000219C  5282      3537          addq.l    #1,D2
0000219E  60AC      3538          bra       main_1
                    3539   main_3:
                    3540   ; }
                    3541   ; Init_RS232() ;     // initialise the RS232 port
000021A0  4EB8 094A 3542          jsr       _Init_RS232
                    3543   ; for( i = 32; i < 48; i++)
000021A4  7420      3544          moveq     #32,D2
                    3545   main_4:
000021A6  0C82 0000 3546          cmp.l     #48,D2
000021AA  0030      
000021AC  6C0E      3547          bge.s     main_6
                    3548   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000021AE  2F02      3549          move.l    D2,-(A7)
000021B0  4878 202E 3550          pea       _UnhandledTrap.L
000021B4  4E92      3551          jsr       (A2)
000021B6  504F      3552          addq.w    #8,A7
000021B8  5282      3553          addq.l    #1,D2
000021BA  60EA      3554          bra       main_4
                    3555   main_6:
                    3556   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000021BC  4878 002F 3557          pea       47
000021C0  4878 1F08 3558          pea       _menu.L
000021C4  4E92      3559          jsr       (A2)
000021C6  504F      3560          addq.w    #8,A7
                    3561   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000021C8  4878 0019 3562          pea       25
000021CC  4878 1FD4 3563          pea       _UnhandledIRQ1.L
000021D0  4E92      3564          jsr       (A2)
000021D2  504F      3565          addq.w    #8,A7
                    3566   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000021D4  4878 001A 3567          pea       26
000021D8  4878 1FE0 3568          pea       _UnhandledIRQ2.L
000021DC  4E92      3569          jsr       (A2)
000021DE  504F      3570          addq.w    #8,A7
                    3571   ; // InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
                    3572   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
000021E0  4878 001C 3573          pea       28
000021E4  4878 1FF8 3574          pea       _UnhandledIRQ4.L
000021E8  4E92      3575          jsr       (A2)
000021EA  504F      3576          addq.w    #8,A7
                    3577   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
000021EC  4878 001D 3578          pea       29
000021F0  4878 2004 3579          pea       _UnhandledIRQ5.L
000021F4  4E92      3580          jsr       (A2)
000021F6  504F      3581          addq.w    #8,A7
                    3582   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000021F8  4878 001E 3583          pea       30
000021FC  4878 2010 3584          pea       _UnhandledIRQ6.L
00002200  4E92      3585          jsr       (A2)
00002202  504F      3586          addq.w    #8,A7
                    3587   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002204  4878 001F 3588          pea       31
00002208  4878 2022 3589          pea       _UnhandledIRQ7.L
0000220C  4E92      3590          jsr       (A2)
0000220E  504F      3591          addq.w    #8,A7
                    3592   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002210  4878 002E 3593          pea       46
00002214  4878 1CD0 3594          pea       _HandleBreakPoint.L
00002218  4E92      3595          jsr       (A2)
0000221A  504F      3596          addq.w    #8,A7
                    3597   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
0000221C  4878 001D 3598          pea       29
00002220  4878 13B0 3599          pea       _DumpRegistersandPause.L
00002224  4E92      3600          jsr       (A2)
00002226  504F      3601          addq.w    #8,A7
                    3602   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002228  4878 0002 3603          pea       2
0000222C  4878 203C 3604          pea       _BusError.L
00002230  4E92      3605          jsr       (A2)
00002232  504F      3606          addq.w    #8,A7
                    3607   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002234  4878 0003 3608          pea       3
00002238  4878 204A 3609          pea       _AddressError.L
0000223C  4E92      3610          jsr       (A2)
0000223E  504F      3611          addq.w    #8,A7
                    3612   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002240  4878 0004 3613          pea       4
00002244  4878 2058 3614          pea       _IllegalInstruction.L
00002248  4E92      3615          jsr       (A2)
0000224A  504F      3616          addq.w    #8,A7
                    3617   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
0000224C  4878 0005 3618          pea       5
00002250  4878 2066 3619          pea       _Dividebyzero.L
00002254  4E92      3620          jsr       (A2)
00002256  504F      3621          addq.w    #8,A7
                    3622   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002258  4878 0006 3623          pea       6
0000225C  4878 2074 3624          pea       _Check.L
00002260  4E92      3625          jsr       (A2)
00002262  504F      3626          addq.w    #8,A7
                    3627   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002264  4878 0007 3628          pea       7
00002268  4878 2082 3629          pea       _Trapv.L
0000226C  4E92      3630          jsr       (A2)
0000226E  504F      3631          addq.w    #8,A7
                    3632   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002270  4878 0008 3633          pea       8
00002274  4878 2090 3634          pea       _PrivError.L
00002278  4E92      3635          jsr       (A2)
0000227A  504F      3636          addq.w    #8,A7
                    3637   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
0000227C  4878 000F 3638          pea       15
00002280  4878 209E 3639          pea       _UnitIRQ.L
00002284  4E92      3640          jsr       (A2)
00002286  504F      3641          addq.w    #8,A7
                    3642   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002288  4878 0018 3643          pea       24
0000228C  4878 2074 3644          pea       _Check.L
00002290  4E92      3645          jsr       (A2)
00002292  504F      3646          addq.w    #8,A7
                    3647   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002294  4EB8 09DE 3648          jsr       _FlushKeyboard
                    3649   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002298  4239 0040 3650          clr.b     4194314
0000229C  000A      
                    3651   ; printf("\r\n%s", BugMessage) ;
0000229E  2F2E FFF8 3652          move.l    -8(A6),-(A7)
000022A2  4879 0000 3653          pea       @m68kde~1_121.L
000022A6  4D02      
000022A8  4EB9 0000 3654          jsr       _printf
000022AC  37B4      
000022AE  504F      3655          addq.w    #8,A7
                    3656   ; printf("\r\n%s", CopyrightMessage) ;
000022B0  2F2E FFFC 3657          move.l    -4(A6),-(A7)
000022B4  4879 0000 3658          pea       @m68kde~1_122.L
000022B8  4D08      
000022BA  4EB9 0000 3659          jsr       _printf
000022BE  37B4      
000022C0  504F      3660          addq.w    #8,A7
                    3661   ; menu();
000022C2  4EB8 1F08 3662          jsr       _menu
000022C6  4CDF 0404 3663          movem.l   (A7)+,D2/A2
000022CA  4E5E      3664          unlk      A6
000022CC  4E75      3665          rts
                    3666   ; }
                    3667   ; C:\proj\tetris\RTL\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3668   ; #include "say_phoneme.h"
                    3669   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3670   _talkphonemeAA:
000022CE  4878 0018 3671          pea       24
000022D2  4EB8 08E6 3672          jsr       _say_phoneme
000022D6  584F      3673          addq.w    #4,A7
000022D8  4E75      3674          rts
                    3675   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3676   _talkphonemeAE:
000022DA  4878 001A 3677          pea       26
000022DE  4EB8 08E6 3678          jsr       _say_phoneme
000022E2  584F      3679          addq.w    #4,A7
000022E4  4E75      3680          rts
                    3681   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3682   _talkphonemeAO:
000022E6  4878 0017 3683          pea       23
000022EA  4EB8 08E6 3684          jsr       _say_phoneme
000022EE  584F      3685          addq.w    #4,A7
000022F0  4E75      3686          rts
                    3687   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3688   _talkphonemeAR:
000022F2  4878 003B 3689          pea       59
000022F6  4EB8 08E6 3690          jsr       _say_phoneme
000022FA  584F      3691          addq.w    #4,A7
000022FC  4E75      3692          rts
                    3693   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3694   _talkphonemeAW:
000022FE  4878 0020 3695          pea       32
00002302  4EB8 08E6 3696          jsr       _say_phoneme
00002306  584F      3697          addq.w    #4,A7
00002308  4E75      3698          rts
                    3699   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3700   _talkphonemeAX:
0000230A  4878 000F 3701          pea       15
0000230E  4EB8 08E6 3702          jsr       _say_phoneme
00002312  584F      3703          addq.w    #4,A7
00002314  4E75      3704          rts
                    3705   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3706   _talkphonemeAY:
00002316  4878 0006 3707          pea       6
0000231A  4EB8 08E6 3708          jsr       _say_phoneme
0000231E  584F      3709          addq.w    #4,A7
00002320  4E75      3710          rts
                    3711   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3712   _talkphonemeBB1:
00002322  4878 001C 3713          pea       28
00002326  4EB8 08E6 3714          jsr       _say_phoneme
0000232A  584F      3715          addq.w    #4,A7
0000232C  4E75      3716          rts
                    3717   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3718   _talkphonemeBB2:
0000232E  4878 003F 3719          pea       63
00002332  4EB8 08E6 3720          jsr       _say_phoneme
00002336  584F      3721          addq.w    #4,A7
00002338  4E75      3722          rts
                    3723   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3724   _talkphonemeCH:
0000233A  4878 0032 3725          pea       50
0000233E  4EB8 08E6 3726          jsr       _say_phoneme
00002342  584F      3727          addq.w    #4,A7
00002344  4E75      3728          rts
                    3729   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3730   _talkphonemeDD1:
00002346  4878 0015 3731          pea       21
0000234A  4EB8 08E6 3732          jsr       _say_phoneme
0000234E  584F      3733          addq.w    #4,A7
00002350  4E75      3734          rts
                    3735   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3736   _talkphonemeDD2:
00002352  4878 0021 3737          pea       33
00002356  4EB8 08E6 3738          jsr       _say_phoneme
0000235A  584F      3739          addq.w    #4,A7
0000235C  4E75      3740          rts
                    3741   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3742   _talkphonemeDH1:
0000235E  4878 0012 3743          pea       18
00002362  4EB8 08E6 3744          jsr       _say_phoneme
00002366  584F      3745          addq.w    #4,A7
00002368  4E75      3746          rts
                    3747   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3748   _talkphonemeDH2:
0000236A  4878 0036 3749          pea       54
0000236E  4EB8 08E6 3750          jsr       _say_phoneme
00002372  584F      3751          addq.w    #4,A7
00002374  4E75      3752          rts
                    3753   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3754   _talkphonemeEH:
00002376  4878 0007 3755          pea       7
0000237A  4EB8 08E6 3756          jsr       _say_phoneme
0000237E  584F      3757          addq.w    #4,A7
00002380  4E75      3758          rts
                    3759   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3760   _talkphonemeEL:
00002382  4878 003E 3761          pea       62
00002386  4EB8 08E6 3762          jsr       _say_phoneme
0000238A  584F      3763          addq.w    #4,A7
0000238C  4E75      3764          rts
                    3765   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3766   _talkphonemeER1:
0000238E  4878 0033 3767          pea       51
00002392  4EB8 08E6 3768          jsr       _say_phoneme
00002396  584F      3769          addq.w    #4,A7
00002398  4E75      3770          rts
                    3771   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3772   _talkphonemeER2:
0000239A  4878 0034 3773          pea       52
0000239E  4EB8 08E6 3774          jsr       _say_phoneme
000023A2  584F      3775          addq.w    #4,A7
000023A4  4E75      3776          rts
                    3777   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3778   _talkphonemeEY:
000023A6  4878 0014 3779          pea       20
000023AA  4EB8 08E6 3780          jsr       _say_phoneme
000023AE  584F      3781          addq.w    #4,A7
000023B0  4E75      3782          rts
                    3783   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    3784   _talkphonemeFF:
000023B2  4878 0028 3785          pea       40
000023B6  4EB8 08E6 3786          jsr       _say_phoneme
000023BA  584F      3787          addq.w    #4,A7
000023BC  4E75      3788          rts
                    3789   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    3790   _talkphonemeGG1:
000023BE  4878 0024 3791          pea       36
000023C2  4EB8 08E6 3792          jsr       _say_phoneme
000023C6  584F      3793          addq.w    #4,A7
000023C8  4E75      3794          rts
                    3795   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    3796   _talkphonemeGG2:
000023CA  4878 003D 3797          pea       61
000023CE  4EB8 08E6 3798          jsr       _say_phoneme
000023D2  584F      3799          addq.w    #4,A7
000023D4  4E75      3800          rts
                    3801   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    3802   _talkphonemeGG3:
000023D6  4878 0022 3803          pea       34
000023DA  4EB8 08E6 3804          jsr       _say_phoneme
000023DE  584F      3805          addq.w    #4,A7
000023E0  4E75      3806          rts
                    3807   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    3808   _talkphonemeHH1:
000023E2  4878 001B 3809          pea       27
000023E6  4EB8 08E6 3810          jsr       _say_phoneme
000023EA  584F      3811          addq.w    #4,A7
000023EC  4E75      3812          rts
                    3813   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    3814   _talkphonemeHH2:
000023EE  4878 0039 3815          pea       57
000023F2  4EB8 08E6 3816          jsr       _say_phoneme
000023F6  584F      3817          addq.w    #4,A7
000023F8  4E75      3818          rts
                    3819   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    3820   _talkphonemeIH:
000023FA  4878 000C 3821          pea       12
000023FE  4EB8 08E6 3822          jsr       _say_phoneme
00002402  584F      3823          addq.w    #4,A7
00002404  4E75      3824          rts
                    3825   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    3826   _talkphonemeIY:
00002406  4878 0013 3827          pea       19
0000240A  4EB8 08E6 3828          jsr       _say_phoneme
0000240E  584F      3829          addq.w    #4,A7
00002410  4E75      3830          rts
                    3831   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    3832   _talkphonemeJH:
00002412  4878 000A 3833          pea       10
00002416  4EB8 08E6 3834          jsr       _say_phoneme
0000241A  584F      3835          addq.w    #4,A7
0000241C  4E75      3836          rts
                    3837   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    3838   _talkphonemeKK1:
0000241E  4878 002A 3839          pea       42
00002422  4EB8 08E6 3840          jsr       _say_phoneme
00002426  584F      3841          addq.w    #4,A7
00002428  4E75      3842          rts
                    3843   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    3844   _talkphonemeKK2:
0000242A  4878 0029 3845          pea       41
0000242E  4EB8 08E6 3846          jsr       _say_phoneme
00002432  584F      3847          addq.w    #4,A7
00002434  4E75      3848          rts
                    3849   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    3850   _talkphonemeKK3:
00002436  4878 0008 3851          pea       8
0000243A  4EB8 08E6 3852          jsr       _say_phoneme
0000243E  584F      3853          addq.w    #4,A7
00002440  4E75      3854          rts
                    3855   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    3856   _talkphonemeLL:
00002442  4878 002D 3857          pea       45
00002446  4EB8 08E6 3858          jsr       _say_phoneme
0000244A  584F      3859          addq.w    #4,A7
0000244C  4E75      3860          rts
                    3861   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    3862   _talkphonemeMM:
0000244E  4878 0010 3863          pea       16
00002452  4EB8 08E6 3864          jsr       _say_phoneme
00002456  584F      3865          addq.w    #4,A7
00002458  4E75      3866          rts
                    3867   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    3868   _talkphonemeNG:
0000245A  4878 002C 3869          pea       44
0000245E  4EB8 08E6 3870          jsr       _say_phoneme
00002462  584F      3871          addq.w    #4,A7
00002464  4E75      3872          rts
                    3873   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    3874   _talkphonemeNN1:
00002466  4878 000B 3875          pea       11
0000246A  4EB8 08E6 3876          jsr       _say_phoneme
0000246E  584F      3877          addq.w    #4,A7
00002470  4E75      3878          rts
                    3879   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    3880   _talkphonemeNN2:
00002472  4878 0038 3881          pea       56
00002476  4EB8 08E6 3882          jsr       _say_phoneme
0000247A  584F      3883          addq.w    #4,A7
0000247C  4E75      3884          rts
                    3885   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    3886   _talkphonemeOR:
0000247E  4878 003A 3887          pea       58
00002482  4EB8 08E6 3888          jsr       _say_phoneme
00002486  584F      3889          addq.w    #4,A7
00002488  4E75      3890          rts
                    3891   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    3892   _talkphonemeOW:
0000248A  4878 0035 3893          pea       53
0000248E  4EB8 08E6 3894          jsr       _say_phoneme
00002492  584F      3895          addq.w    #4,A7
00002494  4E75      3896          rts
                    3897   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    3898   _talkphonemeOY:
00002496  4878 0005 3899          pea       5
0000249A  4EB8 08E6 3900          jsr       _say_phoneme
0000249E  584F      3901          addq.w    #4,A7
000024A0  4E75      3902          rts
                    3903   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    3904   _talkphonemePP:
000024A2  4878 0009 3905          pea       9
000024A6  4EB8 08E6 3906          jsr       _say_phoneme
000024AA  584F      3907          addq.w    #4,A7
000024AC  4E75      3908          rts
                    3909   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    3910   _talkphonemeRR1:
000024AE  4878 000E 3911          pea       14
000024B2  4EB8 08E6 3912          jsr       _say_phoneme
000024B6  584F      3913          addq.w    #4,A7
000024B8  4E75      3914          rts
                    3915   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    3916   _talkphonemeRR2:
000024BA  4878 0027 3917          pea       39
000024BE  4EB8 08E6 3918          jsr       _say_phoneme
000024C2  584F      3919          addq.w    #4,A7
000024C4  4E75      3920          rts
                    3921   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    3922   _talkphonemeSH:
000024C6  4878 0025 3923          pea       37
000024CA  4EB8 08E6 3924          jsr       _say_phoneme
000024CE  584F      3925          addq.w    #4,A7
000024D0  4E75      3926          rts
                    3927   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    3928   _talkphonemeSS:
000024D2  4878 0037 3929          pea       55
000024D6  4EB8 08E6 3930          jsr       _say_phoneme
000024DA  584F      3931          addq.w    #4,A7
000024DC  4E75      3932          rts
                    3933   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    3934   _talkphonemeTH:
000024DE  4878 001D 3935          pea       29
000024E2  4EB8 08E6 3936          jsr       _say_phoneme
000024E6  584F      3937          addq.w    #4,A7
000024E8  4E75      3938          rts
                    3939   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    3940   _talkphonemeTT1:
000024EA  4878 0011 3941          pea       17
000024EE  4EB8 08E6 3942          jsr       _say_phoneme
000024F2  584F      3943          addq.w    #4,A7
000024F4  4E75      3944          rts
                    3945   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    3946   _talkphonemeTT2:
000024F6  4878 000D 3947          pea       13
000024FA  4EB8 08E6 3948          jsr       _say_phoneme
000024FE  584F      3949          addq.w    #4,A7
00002500  4E75      3950          rts
                    3951   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    3952   _talkphonemeUH:
00002502  4878 001E 3953          pea       30
00002506  4EB8 08E6 3954          jsr       _say_phoneme
0000250A  584F      3955          addq.w    #4,A7
0000250C  4E75      3956          rts
                    3957   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    3958   _talkphonemeUW1:
0000250E  4878 0016 3959          pea       22
00002512  4EB8 08E6 3960          jsr       _say_phoneme
00002516  584F      3961          addq.w    #4,A7
00002518  4E75      3962          rts
                    3963   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    3964   _talkphonemeUW2:
0000251A  4878 001F 3965          pea       31
0000251E  4EB8 08E6 3966          jsr       _say_phoneme
00002522  584F      3967          addq.w    #4,A7
00002524  4E75      3968          rts
                    3969   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    3970   _talkphonemeVV:
00002526  4878 0023 3971          pea       35
0000252A  4EB8 08E6 3972          jsr       _say_phoneme
0000252E  584F      3973          addq.w    #4,A7
00002530  4E75      3974          rts
                    3975   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    3976   _talkphonemeWH:
00002532  4878 0030 3977          pea       48
00002536  4EB8 08E6 3978          jsr       _say_phoneme
0000253A  584F      3979          addq.w    #4,A7
0000253C  4E75      3980          rts
                    3981   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    3982   _talkphonemeWW:
0000253E  4878 002E 3983          pea       46
00002542  4EB8 08E6 3984          jsr       _say_phoneme
00002546  584F      3985          addq.w    #4,A7
00002548  4E75      3986          rts
                    3987   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    3988   _talkphonemeXR:
0000254A  4878 002F 3989          pea       47
0000254E  4EB8 08E6 3990          jsr       _say_phoneme
00002552  584F      3991          addq.w    #4,A7
00002554  4E75      3992          rts
                    3993   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    3994   _talkphonemeYR:
00002556  4878 003C 3995          pea       60
0000255A  4EB8 08E6 3996          jsr       _say_phoneme
0000255E  584F      3997          addq.w    #4,A7
00002560  4E75      3998          rts
                    3999   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    4000   _talkphonemeYY1:
00002562  4878 0031 4001          pea       49
00002566  4EB8 08E6 4002          jsr       _say_phoneme
0000256A  584F      4003          addq.w    #4,A7
0000256C  4E75      4004          rts
                    4005   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    4006   _talkphonemeYY2:
0000256E  4878 0019 4007          pea       25
00002572  4EB8 08E6 4008          jsr       _say_phoneme
00002576  584F      4009          addq.w    #4,A7
00002578  4E75      4010          rts
                    4011   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4012   _talkphonemeZH:
0000257A  4878 0026 4013          pea       38
0000257E  4EB8 08E6 4014          jsr       _say_phoneme
00002582  584F      4015          addq.w    #4,A7
00002584  4E75      4016          rts
                    4017   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4018   _talkphonemeZZ:
00002586  4878 002B 4019          pea       43
0000258A  4EB8 08E6 4020          jsr       _say_phoneme
0000258E  584F      4021          addq.w    #4,A7
00002590  4E75      4022          rts
                    4023   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4024   _talkphonemePA1:
00002592  42A7      4025          clr.l     -(A7)
00002594  4EB8 08E6 4026          jsr       _say_phoneme
00002598  584F      4027          addq.w    #4,A7
0000259A  4E75      4028          rts
                    4029   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4030   _talkphonemePA2:
0000259C  4878 0001 4031          pea       1
000025A0  4EB8 08E6 4032          jsr       _say_phoneme
000025A4  584F      4033          addq.w    #4,A7
000025A6  4E75      4034          rts
                    4035   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4036   _talkphonemePA3:
000025A8  4878 0002 4037          pea       2
000025AC  4EB8 08E6 4038          jsr       _say_phoneme
000025B0  584F      4039          addq.w    #4,A7
000025B2  4E75      4040          rts
                    4041   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4042   _talkphonemePA4:
000025B4  4878 0003 4043          pea       3
000025B8  4EB8 08E6 4044          jsr       _say_phoneme
000025BC  584F      4045          addq.w    #4,A7
000025BE  4E75      4046          rts
                    4047   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4048   _talkphonemePA5:
000025C0  4878 0004 4049          pea       4
000025C4  4EB8 08E6 4050          jsr       _say_phoneme
000025C8  584F      4051          addq.w    #4,A7
000025CA  4E75      4052          rts
                    4053   ; void talkword0() {
                    4054   _talkword0:
                    4055   ; talkphonemeZZ  ()   ;
000025CC  4EB8 2586 4056          jsr       _talkphonemeZZ
                    4057   ; talkphonemeEH  ()   ;
000025D0  4EB8 2376 4058          jsr       _talkphonemeEH
                    4059   ; talkphonemeRR2 ()   ;
000025D4  4EB8 24BA 4060          jsr       _talkphonemeRR2
                    4061   ; talkphonemeOW  ()   ;
000025D8  4EB8 248A 4062          jsr       _talkphonemeOW
000025DC  4E75      4063          rts
                    4064   ; }
                    4065   ; void talkword1() {
                    4066   _talkword1:
                    4067   ; talkphonemeWW    ()  ;
000025DE  4EB8 253E 4068          jsr       _talkphonemeWW
                    4069   ; talkphonemeAO    ()  ;
000025E2  4EB8 22E6 4070          jsr       _talkphonemeAO
                    4071   ; talkphonemeNN1   ()  ;
000025E6  4EB8 2466 4072          jsr       _talkphonemeNN1
000025EA  4E75      4073          rts
                    4074   ; }
                    4075   ; void talkword2() {
                    4076   _talkword2:
                    4077   ; talkphonemeTT2();
000025EC  4EB8 24F6 4078          jsr       _talkphonemeTT2
                    4079   ; talkphonemeUW2();
000025F0  4EB8 251A 4080          jsr       _talkphonemeUW2
000025F4  4E75      4081          rts
                    4082   ; }
                    4083   ; void talkword3() {
                    4084   _talkword3:
                    4085   ; talkphonemeTH ();
000025F6  4EB8 24DE 4086          jsr       _talkphonemeTH
                    4087   ; talkphonemeRR2();
000025FA  4EB8 24BA 4088          jsr       _talkphonemeRR2
                    4089   ; talkphonemeIY ();
000025FE  4EB8 2406 4090          jsr       _talkphonemeIY
00002602  4E75      4091          rts
                    4092   ; }
                    4093   ; void talkword4() {
                    4094   _talkword4:
                    4095   ; talkphonemeFF  ();
00002604  4EB8 23B2 4096          jsr       _talkphonemeFF
                    4097   ; talkphonemeOR  ();
00002608  4EB8 247E 4098          jsr       _talkphonemeOR
0000260C  4E75      4099          rts
                    4100   ; }
                    4101   ; void talkword5() {
                    4102   _talkword5:
                    4103   ; talkphonemeFF();
0000260E  4EB8 23B2 4104          jsr       _talkphonemeFF
                    4105   ; talkphonemeAY();
00002612  4EB8 2316 4106          jsr       _talkphonemeAY
                    4107   ; talkphonemeVV();
00002616  4EB8 2526 4108          jsr       _talkphonemeVV
0000261A  4E75      4109          rts
                    4110   ; }
                    4111   ; void talkword6() {
                    4112   _talkword6:
0000261C  2F0A      4113          move.l    A2,-(A7)
0000261E  45F8 24D2 4114          lea       _talkphonemeSS.L,A2
                    4115   ; talkphonemeSS  ();
00002622  4E92      4116          jsr       (A2)
                    4117   ; talkphonemeIH  ();
00002624  4EB8 23FA 4118          jsr       _talkphonemeIH
                    4119   ; talkphonemeKK2 ();
00002628  4EB8 242A 4120          jsr       _talkphonemeKK2
                    4121   ; talkphonemeSS  ();
0000262C  4E92      4122          jsr       (A2)
                    4123   ; talkphonemeSS  ();
0000262E  4E92      4124          jsr       (A2)
00002630  245F      4125          move.l    (A7)+,A2
00002632  4E75      4126          rts
                    4127   ; }
                    4128   ; void talkword7() {
                    4129   _talkword7:
                    4130   ; talkphonemeSS    ();
00002634  4EB8 24D2 4131          jsr       _talkphonemeSS
                    4132   ; talkphonemeEH    ();
00002638  4EB8 2376 4133          jsr       _talkphonemeEH
                    4134   ; talkphonemeVV    ();
0000263C  4EB8 2526 4135          jsr       _talkphonemeVV
                    4136   ; talkphonemeAX    ();
00002640  4EB8 230A 4137          jsr       _talkphonemeAX
                    4138   ; talkphonemeNN1   ();
00002644  4EB8 2466 4139          jsr       _talkphonemeNN1
00002648  4E75      4140          rts
                    4141   ; }
                    4142   ; void talkword8() {
                    4143   _talkword8:
                    4144   ; talkphonemeEY  ();
0000264A  4EB8 23A6 4145          jsr       _talkphonemeEY
                    4146   ; talkphonemeTT1 ();
0000264E  4EB8 24EA 4147          jsr       _talkphonemeTT1
00002652  4E75      4148          rts
                    4149   ; }
                    4150   ; void talkword9() {
                    4151   _talkword9:
                    4152   ; talkphonemeNN2();
00002654  4EB8 2472 4153          jsr       _talkphonemeNN2
                    4154   ; talkphonemeAY ();
00002658  4EB8 2316 4155          jsr       _talkphonemeAY
                    4156   ; talkphonemeNN1();
0000265C  4EB8 2466 4157          jsr       _talkphonemeNN1
00002660  4E75      4158          rts
                    4159   ; }
                    4160   ; void talkword10() {
                    4161   _talkword10:
                    4162   ; talkphonemeTT2 ();
00002662  4EB8 24F6 4163          jsr       _talkphonemeTT2
                    4164   ; talkphonemeEH  ();
00002666  4EB8 2376 4165          jsr       _talkphonemeEH
                    4166   ; talkphonemeNN1 ();
0000266A  4EB8 2466 4167          jsr       _talkphonemeNN1
0000266E  4E75      4168          rts
                    4169   ; }
                    4170   ; void talkword11() {
                    4171   _talkword11:
                    4172   ; talkphonemeIH ();
00002670  4EB8 23FA 4173          jsr       _talkphonemeIH
                    4174   ; talkphonemeLL ();
00002674  4EB8 2442 4175          jsr       _talkphonemeLL
                    4176   ; talkphonemeEH ();
00002678  4EB8 2376 4177          jsr       _talkphonemeEH
                    4178   ; talkphonemeVV ();
0000267C  4EB8 2526 4179          jsr       _talkphonemeVV
                    4180   ; talkphonemeEH ();
00002680  4EB8 2376 4181          jsr       _talkphonemeEH
                    4182   ; talkphonemeNN1();
00002684  4EB8 2466 4183          jsr       _talkphonemeNN1
00002688  4E75      4184          rts
                    4185   ; }
                    4186   ; void talkword12() {
                    4187   _talkword12:
                    4188   ; talkphonemeTT2 ();
0000268A  4EB8 24F6 4189          jsr       _talkphonemeTT2
                    4190   ; talkphonemeWW  ();
0000268E  4EB8 253E 4191          jsr       _talkphonemeWW
                    4192   ; talkphonemeEH  ();
00002692  4EB8 2376 4193          jsr       _talkphonemeEH
                    4194   ; talkphonemeEL  ();
00002696  4EB8 2382 4195          jsr       _talkphonemeEL
                    4196   ; talkphonemeVV  ();
0000269A  4EB8 2526 4197          jsr       _talkphonemeVV
0000269E  4E75      4198          rts
                    4199   ; }
                    4200   ; void talkword13() {
                    4201   _talkword13:
                    4202   ; talkphonemeTH  ();
000026A0  4EB8 24DE 4203          jsr       _talkphonemeTH
                    4204   ; talkphonemeER2 ();
000026A4  4EB8 239A 4205          jsr       _talkphonemeER2
000026A8  4E75      4206          rts
                    4207   ; }
                    4208   ; void talkwordteen() {
                    4209   _talkwordteen:
                    4210   ; talkphonemeTT2   ();
000026AA  4EB8 24F6 4211          jsr       _talkphonemeTT2
                    4212   ; talkphonemeIY    ();
000026AE  4EB8 2406 4213          jsr       _talkphonemeIY
                    4214   ; talkphonemeNN1   ();
000026B2  4EB8 2466 4215          jsr       _talkphonemeNN1
000026B6  4E75      4216          rts
                    4217   ; }
                    4218   ; void talkword14() {
                    4219   _talkword14:
                    4220   ; talkword4();
000026B8  4EB8 2604 4221          jsr       _talkword4
                    4222   ; talkwordteen();
000026BC  4EB8 26AA 4223          jsr       _talkwordteen
000026C0  4E75      4224          rts
                    4225   ; }
                    4226   ; void talkword15() {
                    4227   _talkword15:
                    4228   ; talkphonemeFF ();
000026C2  4EB8 23B2 4229          jsr       _talkphonemeFF
                    4230   ; talkphonemeIH ();
000026C6  4EB8 23FA 4231          jsr       _talkphonemeIH
                    4232   ; talkphonemeFF ();
000026CA  4EB8 23B2 4233          jsr       _talkphonemeFF
                    4234   ; talkwordteen  ();
000026CE  4EB8 26AA 4235          jsr       _talkwordteen
000026D2  4E75      4236          rts
                    4237   ; }
                    4238   ; void talkword16() {
                    4239   _talkword16:
                    4240   ; talkword6    ();
000026D4  4EB8 261C 4241          jsr       _talkword6
                    4242   ; talkwordteen ();
000026D8  4EB8 26AA 4243          jsr       _talkwordteen
000026DC  4E75      4244          rts
                    4245   ; }
                    4246   ; void talkword17() {
                    4247   _talkword17:
                    4248   ; talkword7      ();
000026DE  4EB8 2634 4249          jsr       _talkword7
                    4250   ; talkwordteen   ();
000026E2  4EB8 26AA 4251          jsr       _talkwordteen
000026E6  4E75      4252          rts
                    4253   ; }
                    4254   ; void talkword18() {
                    4255   _talkword18:
                    4256   ; talkword8    ();
000026E8  4EB8 264A 4257          jsr       _talkword8
                    4258   ; talkwordteen ();
000026EC  4EB8 26AA 4259          jsr       _talkwordteen
000026F0  4E75      4260          rts
                    4261   ; }
                    4262   ; void talkword19() {
                    4263   _talkword19:
                    4264   ; talkword9     ();
000026F2  4EB8 2654 4265          jsr       _talkword9
                    4266   ; talkwordteen  ();
000026F6  4EB8 26AA 4267          jsr       _talkwordteen
000026FA  4E75      4268          rts
                    4269   ; }
                    4270   ; void talkword20() {
                    4271   _talkword20:
                    4272   ; talkphonemeTT2 ();
000026FC  4EB8 24F6 4273          jsr       _talkphonemeTT2
                    4274   ; talkphonemeWW  ();
00002700  4EB8 253E 4275          jsr       _talkphonemeWW
                    4276   ; talkphonemeEH  ();
00002704  4EB8 2376 4277          jsr       _talkphonemeEH
                    4278   ; talkphonemeNN1 ();
00002708  4EB8 2466 4279          jsr       _talkphonemeNN1
0000270C  4E75      4280          rts
                    4281   ; }
                    4282   ; void talkwordty() {
                    4283   _talkwordty:
                    4284   ; talkphonemeTT2 ();
0000270E  4EB8 24F6 4285          jsr       _talkphonemeTT2
                    4286   ; talkphonemeIY  ();
00002712  4EB8 2406 4287          jsr       _talkphonemeIY
00002716  4E75      4288          rts
                    4289   ; }
                    4290   ; void talkword30() {
                    4291   _talkword30:
                    4292   ; talkphonemeTH  ();
00002718  4EB8 24DE 4293          jsr       _talkphonemeTH
                    4294   ; talkphonemeER1 ();
0000271C  4EB8 238E 4295          jsr       _talkphonemeER1
                    4296   ; talkwordty     ();
00002720  4EB8 270E 4297          jsr       _talkwordty
00002724  4E75      4298          rts
                    4299   ; }
                    4300   ; void talkword40() {
                    4301   _talkword40:
                    4302   ; talkword4  ();
00002726  4EB8 2604 4303          jsr       _talkword4
                    4304   ; talkwordty ();
0000272A  4EB8 270E 4305          jsr       _talkwordty
0000272E  4E75      4306          rts
                    4307   ; }
                    4308   ; void talkword50() {
                    4309   _talkword50:
                    4310   ; talkphonemeFF ();
00002730  4EB8 23B2 4311          jsr       _talkphonemeFF
                    4312   ; talkphonemeIH ();
00002734  4EB8 23FA 4313          jsr       _talkphonemeIH
                    4314   ; talkphonemeFF ();
00002738  4EB8 23B2 4315          jsr       _talkphonemeFF
                    4316   ; talkwordty    ();
0000273C  4EB8 270E 4317          jsr       _talkwordty
00002740  4E75      4318          rts
                    4319   ; }
                    4320   ; void talkword60() {
                    4321   _talkword60:
                    4322   ; talkword6  ();
00002742  4EB8 261C 4323          jsr       _talkword6
                    4324   ; talkwordty ();
00002746  4EB8 270E 4325          jsr       _talkwordty
0000274A  4E75      4326          rts
                    4327   ; }
                    4328   ; void talkword70() {
                    4329   _talkword70:
                    4330   ; talkword7  ();
0000274C  4EB8 2634 4331          jsr       _talkword7
                    4332   ; talkwordty ();
00002750  4EB8 270E 4333          jsr       _talkwordty
00002754  4E75      4334          rts
                    4335   ; }
                    4336   ; void talkword80() {
                    4337   _talkword80:
                    4338   ; talkword8   ();
00002756  4EB8 264A 4339          jsr       _talkword8
                    4340   ; talkwordty  ();
0000275A  4EB8 270E 4341          jsr       _talkwordty
0000275E  4E75      4342          rts
                    4343   ; }
                    4344   ; void talkword90() {
                    4345   _talkword90:
                    4346   ; talkword9   ();
00002760  4EB8 2654 4347          jsr       _talkword9
                    4348   ; talkwordty  ();
00002764  4EB8 270E 4349          jsr       _talkwordty
00002768  4E75      4350          rts
                    4351   ; }
                    4352   ; void talkwordhundred() {
                    4353   _talkwordhundred:
                    4354   ; talkphonemeHH2  ();
0000276A  4EB8 23EE 4355          jsr       _talkphonemeHH2
                    4356   ; talkphonemeAX   ();
0000276E  4EB8 230A 4357          jsr       _talkphonemeAX
                    4358   ; talkphonemeNN1  ();
00002772  4EB8 2466 4359          jsr       _talkphonemeNN1
                    4360   ; talkphonemeDD2  ();
00002776  4EB8 2352 4361          jsr       _talkphonemeDD2
                    4362   ; talkphonemeRR2  ();
0000277A  4EB8 24BA 4363          jsr       _talkphonemeRR2
                    4364   ; talkphonemeDD1  ();
0000277E  4EB8 2346 4365          jsr       _talkphonemeDD1
00002782  4E75      4366          rts
                    4367   ; }
                    4368   ; void talkworddepth() {
                    4369   _talkworddepth:
                    4370   ; talkphonemeDD2   ();
00002784  4EB8 2352 4371          jsr       _talkphonemeDD2
                    4372   ; talkphonemeEH    ();
00002788  4EB8 2376 4373          jsr       _talkphonemeEH
                    4374   ; talkphonemeEH    ();
0000278C  4EB8 2376 4375          jsr       _talkphonemeEH
                    4376   ; talkphonemePP    ();
00002790  4EB8 24A2 4377          jsr       _talkphonemePP
                    4378   ; talkphonemeTH    ();
00002794  4EB8 24DE 4379          jsr       _talkphonemeTH
                    4380   ; endword          ();
00002798  4EB9 0000 4381          jsr       _endword
0000279C  2974      
0000279E  4E75      4382          rts
                    4383   ; }
                    4384   ; void talkwordpoint() {
                    4385   _talkwordpoint:
                    4386   ; talkphonemePP   ();
000027A0  4EB8 24A2 4387          jsr       _talkphonemePP
                    4388   ; talkphonemeOY   ();
000027A4  4EB8 2496 4389          jsr       _talkphonemeOY
                    4390   ; talkphonemeTT1  ();
000027A8  4EB8 24EA 4391          jsr       _talkphonemeTT1
                    4392   ; endword         ();
000027AC  4EB9 0000 4393          jsr       _endword
000027B0  2974      
000027B2  4E75      4394          rts
                    4395   ; }
                    4396   ; void talkwordanchor() {
                    4397   _talkwordanchor:
                    4398   ; talkphonemeEY   ();
000027B4  4EB8 23A6 4399          jsr       _talkphonemeEY
                    4400   ; talkphonemeKK3  ();
000027B8  4EB8 2436 4401          jsr       _talkphonemeKK3
                    4402   ; talkphonemeAE   ();
000027BC  4EB8 22DA 4403          jsr       _talkphonemeAE
                    4404   ; endword         ();
000027C0  4EB9 0000 4405          jsr       _endword
000027C4  2974      
000027C6  4E75      4406          rts
                    4407   ; }
                    4408   ; void talkwordalarm() {
                    4409   _talkwordalarm:
                    4410   ; talkphonemeAE  ();
000027C8  4EB8 22DA 4411          jsr       _talkphonemeAE
                    4412   ; talkphonemeLL  ();
000027CC  4EB8 2442 4413          jsr       _talkphonemeLL
                    4414   ; talkphonemeAR  ();
000027D0  4EB8 22F2 4415          jsr       _talkphonemeAR
                    4416   ; talkphonemeMM  ();
000027D4  4EB8 244E 4417          jsr       _talkphonemeMM
                    4418   ; endword        ();
000027D8  4EB9 0000 4419          jsr       _endword
000027DC  2974      
000027DE  4E75      4420          rts
                    4421   ; }
                    4422   ; void talkwordon() {
                    4423   _talkwordon:
                    4424   ; talkphonemeAO ();
000027E0  4EB8 22E6 4425          jsr       _talkphonemeAO
                    4426   ; talkphonemeNG ();
000027E4  4EB8 245A 4427          jsr       _talkphonemeNG
                    4428   ; endword       ();
000027E8  4EB9 0000 4429          jsr       _endword
000027EC  2974      
000027EE  4E75      4430          rts
                    4431   ; }
                    4432   ; void talkwordoff() {
                    4433   _talkwordoff:
                    4434   ; talkphonemeAO  ();
000027F0  4EB8 22E6 4435          jsr       _talkphonemeAO
                    4436   ; talkphonemeFF  ();
000027F4  4EB8 23B2 4437          jsr       _talkphonemeFF
                    4438   ; talkphonemeFF  ();
000027F8  4EB8 23B2 4439          jsr       _talkphonemeFF
                    4440   ; endword        ();
000027FC  4EB9 0000 4441          jsr       _endword
00002800  2974      
00002802  4E75      4442          rts
                    4443   ; }
                    4444   ; void talkwordshallow() {
                    4445   _talkwordshallow:
                    4446   ; talkphonemeSH ();
00002804  4EB8 24C6 4447          jsr       _talkphonemeSH
                    4448   ; talkphonemeAE ();
00002808  4EB8 22DA 4449          jsr       _talkphonemeAE
                    4450   ; talkphonemeLL ();
0000280C  4EB8 2442 4451          jsr       _talkphonemeLL
                    4452   ; talkphonemeOW ();
00002810  4EB8 248A 4453          jsr       _talkphonemeOW
                    4454   ; endword       ();
00002814  4EB9 0000 4455          jsr       _endword
00002818  2974      
0000281A  4E75      4456          rts
                    4457   ; }
                    4458   ; void talkwordand() {
                    4459   _talkwordand:
                    4460   ; talkphonemeIH    ();
0000281C  4EB8 23FA 4461          jsr       _talkphonemeIH
                    4462   ; talkphonemeIH    ();
00002820  4EB8 23FA 4463          jsr       _talkphonemeIH
                    4464   ; talkphonemeNN1   ();
00002824  4EB8 2466 4465          jsr       _talkphonemeNN1
                    4466   ; talkphonemeDD2   ();
00002828  4EB8 2352 4467          jsr       _talkphonemeDD2
                    4468   ; endword          ();
0000282C  4EB9 0000 4469          jsr       _endword
00002830  2974      
00002832  4E75      4470          rts
                    4471   ; }
                    4472   ; void talkwordwatch() {
                    4473   _talkwordwatch:
                    4474   ; talkphonemeWW  ();
00002834  4EB8 253E 4475          jsr       _talkphonemeWW
                    4476   ; talkphonemeAO  ();
00002838  4EB8 22E6 4477          jsr       _talkphonemeAO
                    4478   ; talkphonemeTT1 ();
0000283C  4EB8 24EA 4479          jsr       _talkphonemeTT1
                    4480   ; talkphonemeCH  ();
00002840  4EB8 233A 4481          jsr       _talkphonemeCH
                    4482   ; endword        ();
00002844  4EB9 0000 4483          jsr       _endword
00002848  2974      
0000284A  4E75      4484          rts
                    4485   ; }
                    4486   ; void talkwordlimit() {
                    4487   _talkwordlimit:
                    4488   ; talkphonemeLL   ();
0000284C  4EB8 2442 4489          jsr       _talkphonemeLL
                    4490   ; talkphonemeIH   ();
00002850  4EB8 23FA 4491          jsr       _talkphonemeIH
                    4492   ; talkphonemeMM   ();
00002854  4EB8 244E 4493          jsr       _talkphonemeMM
                    4494   ; talkphonemeIH   ();
00002858  4EB8 23FA 4495          jsr       _talkphonemeIH
                    4496   ; talkphonemeTT1  ();
0000285C  4EB8 24EA 4497          jsr       _talkphonemeTT1
                    4498   ; endword         ();
00002860  4EB9 0000 4499          jsr       _endword
00002864  2974      
00002866  4E75      4500          rts
                    4501   ; }
                    4502   ; void talkwordset()  {
                    4503   _talkwordset:
                    4504   ; talkphonemeSS    ();
00002868  4EB8 24D2 4505          jsr       _talkphonemeSS
                    4506   ; talkphonemeSS    ();
0000286C  4EB8 24D2 4507          jsr       _talkphonemeSS
                    4508   ; talkphonemeEH    ();
00002870  4EB8 2376 4509          jsr       _talkphonemeEH
                    4510   ; talkphonemeTT2   ();
00002874  4EB8 24F6 4511          jsr       _talkphonemeTT2
                    4512   ; endword          ();
00002878  4EB9 0000 4513          jsr       _endword
0000287C  2974      
0000287E  4E75      4514          rts
                    4515   ; }
                    4516   ; void talkwordheading() {
                    4517   _talkwordheading:
                    4518   ; talkphonemeHH1   ();
00002880  4EB8 23E2 4519          jsr       _talkphonemeHH1
                    4520   ; talkphonemeEH    ();
00002884  4EB8 2376 4521          jsr       _talkphonemeEH
                    4522   ; talkphonemeDD2   ();
00002888  4EB8 2352 4523          jsr       _talkphonemeDD2
                    4524   ; talkphonemeIH    ();
0000288C  4EB8 23FA 4525          jsr       _talkphonemeIH
                    4526   ; talkphonemeNG    ();
00002890  4EB8 245A 4527          jsr       _talkphonemeNG
                    4528   ; endword          ();
00002894  4EB9 0000 4529          jsr       _endword
00002898  2974      
0000289A  4E75      4530          rts
                    4531   ; }
                    4532   ; void talkwordgps() {
                    4533   _talkwordgps:
                    4534   ; talkphonemeJH  ();
0000289C  4EB8 2412 4535          jsr       _talkphonemeJH
                    4536   ; talkphonemeIY  ();
000028A0  4EB8 2406 4537          jsr       _talkphonemeIY
                    4538   ; talkphonemePP  ();
000028A4  4EB8 24A2 4539          jsr       _talkphonemePP
                    4540   ; talkphonemeIY  ();
000028A8  4EB8 2406 4541          jsr       _talkphonemeIY
                    4542   ; talkphonemeEH  ();
000028AC  4EB8 2376 4543          jsr       _talkphonemeEH
                    4544   ; talkphonemeSS  ();
000028B0  4EB8 24D2 4545          jsr       _talkphonemeSS
                    4546   ; talkphonemeSS  ();
000028B4  4EB8 24D2 4547          jsr       _talkphonemeSS
                    4548   ; endword        ();
000028B8  4EB9 0000 4549          jsr       _endword
000028BC  2974      
000028BE  4E75      4550          rts
                    4551   ; }
                    4552   ; void talkwordno() {
                    4553   _talkwordno:
                    4554   ; talkphonemeNN2  ();
000028C0  4EB8 2472 4555          jsr       _talkphonemeNN2
                    4556   ; talkphonemeOW   ();
000028C4  4EB8 248A 4557          jsr       _talkphonemeOW
                    4558   ; endword         ();
000028C8  4EB9 0000 4559          jsr       _endword
000028CC  2974      
000028CE  4E75      4560          rts
                    4561   ; }
                    4562   ; void talkworddata() {
                    4563   _talkworddata:
                    4564   ; talkphonemeDD2   ();
000028D0  4EB8 2352 4565          jsr       _talkphonemeDD2
                    4566   ; talkphonemeEY    ();
000028D4  4EB8 23A6 4567          jsr       _talkphonemeEY
                    4568   ; talkphonemeTT2   ();
000028D8  4EB8 24F6 4569          jsr       _talkphonemeTT2
                    4570   ; talkphonemeAX    ();
000028DC  4EB8 230A 4571          jsr       _talkphonemeAX
                    4572   ; endword          ();
000028E0  4EB9 0000 4573          jsr       _endword
000028E4  2974      
000028E6  4E75      4574          rts
                    4575   ; }
                    4576   ; void talkwordnorth() {
                    4577   _talkwordnorth:
                    4578   ; talkphonemeNN2 ();
000028E8  4EB8 2472 4579          jsr       _talkphonemeNN2
                    4580   ; talkphonemeOR  ();
000028EC  4EB8 247E 4581          jsr       _talkphonemeOR
                    4582   ; talkphonemeHH1 ();
000028F0  4EB8 23E2 4583          jsr       _talkphonemeHH1
                    4584   ; endword        ();
000028F4  4EB9 0000 4585          jsr       _endword
000028F8  2974      
000028FA  4E75      4586          rts
                    4587   ; }
                    4588   ; void talkwordsouth() {
                    4589   _talkwordsouth:
                    4590   ; talkphonemeSS();
000028FC  4EB8 24D2 4591          jsr       _talkphonemeSS
                    4592   ; talkphonemeSS();
00002900  4EB8 24D2 4593          jsr       _talkphonemeSS
                    4594   ; talkphonemeAW();
00002904  4EB8 22FE 4595          jsr       _talkphonemeAW
                    4596   ; talkphonemeTH();
00002908  4EB8 24DE 4597          jsr       _talkphonemeTH
                    4598   ; talkphonemeTH();
0000290C  4EB8 24DE 4599          jsr       _talkphonemeTH
00002910  4E75      4600          rts
                    4601   ; }
                    4602   ; void talkwordeast() {
                    4603   _talkwordeast:
                    4604   ; talkphonemeIY   ();
00002912  4EB8 2406 4605          jsr       _talkphonemeIY
                    4606   ; talkphonemeSS   ();
00002916  4EB8 24D2 4607          jsr       _talkphonemeSS
                    4608   ; talkphonemeSS   ();
0000291A  4EB8 24D2 4609          jsr       _talkphonemeSS
                    4610   ; talkphonemeTT2  ();
0000291E  4EB8 24F6 4611          jsr       _talkphonemeTT2
                    4612   ; endword         ();
00002922  4EB9 0000 4613          jsr       _endword
00002926  2974      
00002928  4E75      4614          rts
                    4615   ; }
                    4616   ; void talkwordwest() {
                    4617   _talkwordwest:
                    4618   ; talkphonemeWW     ();
0000292A  4EB8 253E 4619          jsr       _talkphonemeWW
                    4620   ; talkphonemeEH     ();
0000292E  4EB8 2376 4621          jsr       _talkphonemeEH
                    4622   ; talkphonemeSS     ();
00002932  4EB8 24D2 4623          jsr       _talkphonemeSS
                    4624   ; talkphonemeSS     ();
00002936  4EB8 24D2 4625          jsr       _talkphonemeSS
                    4626   ; talkphonemeTT2    ();
0000293A  4EB8 24F6 4627          jsr       _talkphonemeTT2
                    4628   ; endword           ();
0000293E  4EB9 0000 4629          jsr       _endword
00002942  2974      
00002944  4E75      4630          rts
                    4631   ; }
                    4632   ; void talkwordposition() {
                    4633   _talkwordposition:
                    4634   ; talkphonemePP   ();
00002946  4EB8 24A2 4635          jsr       _talkphonemePP
                    4636   ; talkphonemeIH   ();
0000294A  4EB8 23FA 4637          jsr       _talkphonemeIH
                    4638   ; talkphonemeZZ   ();
0000294E  4EB8 2586 4639          jsr       _talkphonemeZZ
                    4640   ; talkphonemeIH   ();
00002952  4EB8 23FA 4641          jsr       _talkphonemeIH
                    4642   ; talkphonemeSH   ();
00002956  4EB8 24C6 4643          jsr       _talkphonemeSH
                    4644   ; talkphonemeNN1  ();
0000295A  4EB8 2466 4645          jsr       _talkphonemeNN1
                    4646   ; endword         ();
0000295E  4EB9 0000 4647          jsr       _endword
00002962  2974      
00002964  4E75      4648          rts
                    4649   ; }
                    4650   ; void talkphonemePA6() {
                    4651   _talkphonemePA6:
                    4652   ; talkphonemePA5();
00002966  4EB8 25C0 4653          jsr       _talkphonemePA5
                    4654   ; talkphonemePA5();
0000296A  4EB8 25C0 4655          jsr       _talkphonemePA5
                    4656   ; talkphonemePA4();
0000296E  4EB8 25B4 4657          jsr       _talkphonemePA4
00002972  4E75      4658          rts
                    4659   ; }
                    4660   ; void endword() {
                    4661   _endword:
                    4662   ; talkphonemePA5();
00002974  4EB8 25C0 4663          jsr       _talkphonemePA5
                    4664   ; talkphonemePA4();
00002978  4EB8 25B4 4665          jsr       _talkphonemePA4
0000297C  4E75      4666          rts
                    4667   ; }
                    4668   ; C:\proj\tetris\RTL\PROGRAMS\DEBUGMONITORCODE\TETRIS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4669   ; #include <stdio.h>
                    4670   ; #include <stdlib.h>
                    4671   ; #include <limits.h>
                    4672   ; #include "tetris.h"
                    4673   ; #include "say_phoneme.h"
                    4674   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4675   ; int tetris_score;
                    4676   ; char GameOn;
                    4677   ; int tetris_timer;
                    4678   ; typedef struct {
                    4679   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4680   ; int width, row, col;
                    4681   ; } Shape;
                    4682   ; Shape current;
                    4683   ; Shape ShapesArray[NUM_SHAPES];
                    4684   ; struct
                    4685   ; {
                    4686   ; int speed;
                    4687   ; int speed_increase;
                    4688   ; } Tetris_Speed;
                    4689   ; int printw_x;  //hint: could be a useful variable
                    4690   ; int printw_y;  //hint: could be a useful variable
                    4691   ; extern volatile long clockTimer;
                    4692   ; /* Compute x mod y using binary long division. */
                    4693   ; int mod_bld(int x, int y)
                    4694   ; {
                    4695   _mod_bld:
0000297E  4E56 0000 4696          link      A6,#0
00002982  48E7 3000 4697          movem.l   D2/D3,-(A7)
                    4698   ; int modulus = x, divisor = y;
00002986  262E 0008 4699          move.l    8(A6),D3
0000298A  242E 000C 4700          move.l    12(A6),D2
                    4701   ; while (divisor <= modulus && divisor <= 16384)
                    4702   mod_bld_1:
0000298E  B483      4703          cmp.l     D3,D2
00002990  6E0C      4704          bgt.s     mod_bld_3
00002992  0C82 0000 4705          cmp.l     #16384,D2
00002996  4000      
00002998  6E04      4706          bgt.s     mod_bld_3
                    4707   ; divisor <<= 1;
0000299A  E382      4708          asl.l     #1,D2
0000299C  60F0      4709          bra       mod_bld_1
                    4710   mod_bld_3:
                    4711   ; while (modulus >= y) {
                    4712   mod_bld_4:
0000299E  B6AE 000C 4713          cmp.l     12(A6),D3
000029A2  6D0C      4714          blt.s     mod_bld_6
                    4715   ; while (divisor > modulus)
                    4716   mod_bld_7:
000029A4  B483      4717          cmp.l     D3,D2
000029A6  6F04      4718          ble.s     mod_bld_9
                    4719   ; divisor >>= 1;
000029A8  E282      4720          asr.l     #1,D2
000029AA  60F8      4721          bra       mod_bld_7
                    4722   mod_bld_9:
                    4723   ; modulus -= divisor;
000029AC  9682      4724          sub.l     D2,D3
000029AE  60EE      4725          bra       mod_bld_4
                    4726   mod_bld_6:
                    4727   ; }
                    4728   ; return modulus;
000029B0  2003      4729          move.l    D3,D0
000029B2  4CDF 000C 4730          movem.l   (A7)+,D2/D3
000029B6  4E5E      4731          unlk      A6
000029B8  4E75      4732          rts
                    4733   ; }
                    4734   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4735   ; //
                    4736   ; //
                    4737   ; //                        functions to implement
                    4738   ; //
                    4739   ; //
                    4740   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4741   ; void go_to_top_corner()
                    4742   ; {
                    4743   _go_to_top_corner:
                    4744   ; //Make the cursor (whether visible or not) go to the top left corner of the screen
                    4745   ; 
                    4746   ; gotoxy(0,0);
000029BA  42A7      4747          clr.l     -(A7)
000029BC  42A7      4748          clr.l     -(A7)
000029BE  4EB9 0000 4749          jsr       _gotoxy
000029C2  2A82      
000029C4  504F      4750          addq.w    #8,A7
000029C6  4E75      4751          rts
                    4752   ; };
                    4753   ; void clear_screen()
                    4754   ; {
                    4755   _clear_screen:
000029C8  2F02      4756          move.l    D2,-(A7)
                    4757   ; //Clear the screen
                    4758   ; 
                    4759   ; int i;
                    4760   ; go_to_top_corner();
000029CA  4EB8 29BA 4761          jsr       _go_to_top_corner
                    4762   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
000029CE  4878 00A2 4763          pea       162
000029D2  4EB9 0000 4764          jsr       _set_vga_control_reg
000029D6  2ABA      
000029D8  584F      4765          addq.w    #4,A7
                    4766   ; printw_x = 0;
000029DA  42B9 0803 4767          clr.l     _printw_x.L
000029DE  0768      
                    4768   ; printw_y = 0;
000029E0  42B9 0803 4769          clr.l     _printw_y.L
000029E4  076C      
                    4770   ; for (i = 0; i < 3200; i++)
000029E6  4282      4771          clr.l     D2
                    4772   clear_screen_1:
000029E8  0C82 0000 4773          cmp.l     #3200,D2
000029EC  0C80      
000029EE  6C22      4774          bge.s     clear_screen_3
                    4775   ; {
                    4776   ; VGA_RAM(i, 0x20);
000029F0  203C F004 4777          move.l    #-268173312,D0
000029F4  0000      
000029F6  223C 0000 4778          move.l    #8193,D1
000029FA  2001      
000029FC  2F00      4779          move.l    D0,-(A7)
000029FE  2002      4780          move.l    D2,D0
00002A00  E380      4781          asl.l     #1,D0
00002A02  D280      4782          add.l     D0,D1
00002A04  201F      4783          move.l    (A7)+,D0
00002A06  D081      4784          add.l     D1,D0
00002A08  2040      4785          move.l    D0,A0
00002A0A  10BC 0020 4786          move.b    #32,(A0)
00002A0E  5282      4787          addq.l    #1,D2
00002A10  60D6      4788          bra       clear_screen_1
                    4789   clear_screen_3:
00002A12  241F      4790          move.l    (A7)+,D2
00002A14  4E75      4791          rts
                    4792   ; }
                    4793   ; };
                    4794   ; void say_awesome() {
                    4795   _say_awesome:
                    4796   ; //Say the word "Awesome"
                    4797   ; 
                    4798   ; talkphonemeKK1();
00002A16  4EB8 241E 4799          jsr       _talkphonemeKK1
                    4800   ; talkphonemeUW2();
00002A1A  4EB8 251A 4801          jsr       _talkphonemeUW2
                    4802   ; talkphonemeLL();
00002A1E  4EB8 2442 4803          jsr       _talkphonemeLL
00002A22  4E75      4804          rts
                    4805   ; }
                    4806   ; void say_cool() {
                    4807   _say_cool:
                    4808   ; //Say the word "Cool"
                    4809   ; 
                    4810   ; talkphonemeAA();
00002A24  4EB8 22CE 4811          jsr       _talkphonemeAA
                    4812   ; talkphonemeSS();
00002A28  4EB8 24D2 4813          jsr       _talkphonemeSS
                    4814   ; talkphonemeUH();
00002A2C  4EB8 2502 4815          jsr       _talkphonemeUH
                    4816   ; talkphonemeMM();
00002A30  4EB8 244E 4817          jsr       _talkphonemeMM
00002A34  4E75      4818          rts
                    4819   ; }
                    4820   ; void say_yeah() {
                    4821   _say_yeah:
                    4822   ; //Say the word "Yeah"
                    4823   ; 
                    4824   ; talkphonemeYY2();
00002A36  4EB8 256E 4825          jsr       _talkphonemeYY2
                    4826   ; talkphonemeEH();
00002A3A  4EB8 2376 4827          jsr       _talkphonemeEH
00002A3E  4E75      4828          rts
                    4829   ; }
                    4830   ; void putcharxy(int x, int y, char ch,char* error_message) {
                    4831   _putcharxy:
00002A40  4E56 FFFC 4832          link      A6,#-4
                    4833   ; //Put the character "ch" in row x, column y on the screen.
                    4834   ; //The parameter "error_message" can be used to print out
                    4835   ; //an error message in Hyperterminal during debugging if, 
                    4836   ; //for example, x or y are out of range
                    4837   ; 
                    4838   ; int coord;
                    4839   ; coord = (y*80) + x;
00002A44  2F2E 000C 4840          move.l    12(A6),-(A7)
00002A48  4878 0050 4841          pea       80
00002A4C  4EB9 0000 4842          jsr       LMUL
00002A50  37F6      
00002A52  2017      4843          move.l    (A7),D0
00002A54  504F      4844          addq.w    #8,A7
00002A56  D0AE 0008 4845          add.l     8(A6),D0
00002A5A  2D40 FFFC 4846          move.l    D0,-4(A6)
                    4847   ; VGA_RAM(coord, ch);
00002A5E  203C F004 4848          move.l    #-268173312,D0
00002A62  0000      
00002A64  223C 0000 4849          move.l    #8193,D1
00002A68  2001      
00002A6A  2F00      4850          move.l    D0,-(A7)
00002A6C  202E FFFC 4851          move.l    -4(A6),D0
00002A70  E380      4852          asl.l     #1,D0
00002A72  D280      4853          add.l     D0,D1
00002A74  201F      4854          move.l    (A7)+,D0
00002A76  D081      4855          add.l     D1,D0
00002A78  2040      4856          move.l    D0,A0
00002A7A  10AE 0013 4857          move.b    19(A6),(A0)
00002A7E  4E5E      4858          unlk      A6
00002A80  4E75      4859          rts
                    4860   ; }
                    4861   ; void gotoxy(int x, int y)
                    4862   ; {
                    4863   _gotoxy:
00002A82  4E56 0000 4864          link      A6,#0
                    4865   ; //have the cursor (whether visible or not) go to row x, column y on the screen
                    4866   ; 
                    4867   ; VGA_CRX = x & 0xFF;
00002A86  202E 0008 4868          move.l    8(A6),D0
00002A8A  C0BC 0000 4869          and.l     #255,D0
00002A8E  00FF      
00002A90  13C0 F004 4870          move.b    D0,-268173309
00002A94  0003      
                    4871   ; VGA_CRY = y & 0xFF;
00002A96  202E 000C 4872          move.l    12(A6),D0
00002A9A  C0BC 0000 4873          and.l     #255,D0
00002A9E  00FF      
00002AA0  13C0 F004 4874          move.b    D0,-268173307
00002AA4  0005      
                    4875   ; printw_x = x;
00002AA6  23EE 0008 4876          move.l    8(A6),_printw_x.L
00002AAA  0803 0768 
                    4877   ; printw_y = y;
00002AAE  23EE 000C 4878          move.l    12(A6),_printw_y.L
00002AB2  0803 076C 
00002AB6  4E5E      4879          unlk      A6
00002AB8  4E75      4880          rts
                    4881   ; };
                    4882   ; void set_vga_control_reg(char x) {
                    4883   _set_vga_control_reg:
00002ABA  4E56 0000 4884          link      A6,#0
                    4885   ; //Set the value of the control register in the VGA core
                    4886   ; 
                    4887   ; VGA_CTL = x;
00002ABE  13EE 000B 4888          move.b    11(A6),-268173311
00002AC2  F004 0001 
00002AC6  4E5E      4889          unlk      A6
00002AC8  4E75      4890          rts
                    4891   ; }
                    4892   ; char get_vga_control_reg() {
                    4893   _get_vga_control_reg:
                    4894   ; //Get the value of the control register in the VGA core
                    4895   ; 
                    4896   ; return VGA_CTL;
00002ACA  1039 F004 4897          move.b    -268173311,D0
00002ACE  0001      
00002AD0  4E75      4898          rts
                    4899   ; }
                    4900   ; void set_color(int color) {
                    4901   _set_color:
00002AD2  4E56 0000 4902          link      A6,#0
                    4903   ; //Set the color of the screen
                    4904   ; 
                    4905   ; VGA_CTL = (VGA_CTL & 0xf8) | (color & 0x7);
00002AD6  1039 F004 4906          move.b    -268173311,D0
00002ADA  0001      
00002ADC  C07C 00FF 4907          and.w     #255,D0
00002AE0  C07C 00F8 4908          and.w     #248,D0
00002AE4  48C0      4909          ext.l     D0
00002AE6  222E 0008 4910          move.l    8(A6),D1
00002AEA  C2BC 0000 4911          and.l     #7,D1
00002AEE  0007      
00002AF0  8081      4912          or.l      D1,D0
00002AF2  13C0 F004 4913          move.b    D0,-268173311
00002AF6  0001      
00002AF8  4E5E      4914          unlk      A6
00002AFA  4E75      4915          rts
                    4916   ; }
                    4917   ; int clock() {
                    4918   _clock:
                    4919   ; //Returns time in milliseconds since the timer was initialized
                    4920   ; 
                    4921   ; return clockTimer;
00002AFC  2039 0803 4922          move.l    _clockTimer.L,D0
00002B00  0546      
00002B02  4E75      4923          rts
                    4924   ; }
                    4925   ; void printw(const char* str,char* error_message) {
                    4926   _printw:
00002B04  4E56 0000 4927          link      A6,#0
00002B08  48E7 2020 4928          movem.l   D2/A2,-(A7)
00002B0C  242E 0008 4929          move.l    8(A6),D2
00002B10  45F9 0803 4930          lea       _printw_x.L,A2
00002B14  0768      
                    4931   ; //like "printf", just on the VGA screen
                    4932   ; //a newline character ("\n") causes the location
                    4933   ; //to move to the beginning of a new line
                    4934   ; //prints the string in the parameter "str", 
                    4935   ; //the parameter "error_message" can be used for debugging
                    4936   ; //hint: maybe this function could use the function  putcharxy(int x, int y, char ch,char* error_message)
                    4937   ; 
                    4938   ; while (*str != '\0') {
                    4939   printw_1:
00002B16  2042      4940          move.l    D2,A0
00002B18  1010      4941          move.b    (A0),D0
00002B1A  6700 003A 4942          beq       printw_3
                    4943   ; if (*str == '\n') {
00002B1E  2042      4944          move.l    D2,A0
00002B20  1010      4945          move.b    (A0),D0
00002B22  0C00 000A 4946          cmp.b     #10,D0
00002B26  660A      4947          bne.s     printw_4
                    4948   ; printw_x = 0;
00002B28  4292      4949          clr.l     (A2)
                    4950   ; printw_y++;
00002B2A  52B9 0803 4951          addq.l    #1,_printw_y.L
00002B2E  076C      
00002B30  6020      4952          bra.s     printw_5
                    4953   printw_4:
                    4954   ; } else {
                    4955   ; putcharxy(printw_x, printw_y, *str, error_message);
00002B32  2F2E 000C 4956          move.l    12(A6),-(A7)
00002B36  2042      4957          move.l    D2,A0
00002B38  1210      4958          move.b    (A0),D1
00002B3A  4881      4959          ext.w     D1
00002B3C  48C1      4960          ext.l     D1
00002B3E  2F01      4961          move.l    D1,-(A7)
00002B40  2F39 0803 4962          move.l    _printw_y.L,-(A7)
00002B44  076C      
00002B46  2F12      4963          move.l    (A2),-(A7)
00002B48  4EB8 2A40 4964          jsr       _putcharxy
00002B4C  DEFC 0010 4965          add.w     #16,A7
                    4966   ; printw_x++;
00002B50  5292      4967          addq.l    #1,(A2)
                    4968   printw_5:
                    4969   ; }
                    4970   ; str++;
00002B52  5282      4971          addq.l    #1,D2
00002B54  60C0      4972          bra       printw_1
                    4973   printw_3:
00002B56  4CDF 0404 4974          movem.l   (A7)+,D2/A2
00002B5A  4E5E      4975          unlk      A6
00002B5C  4E75      4976          rts
                    4977   ; }
                    4978   ; }
                    4979   ; void delayedPrint(const char* str, char* error_message)
                    4980   ; {
                    4981   _delayedPrint:
00002B5E  4E56 0000 4982          link      A6,#0
00002B62  48E7 2020 4983          movem.l   D2/A2,-(A7)
00002B66  242E 0008 4984          move.l    8(A6),D2
00002B6A  45F9 0803 4985          lea       _printw_y.L,A2
00002B6E  076C      
                    4986   ; while (*str != '\0') {
                    4987   delayedPrint_1:
00002B70  2042      4988          move.l    D2,A0
00002B72  1010      4989          move.b    (A0),D0
00002B74  6700 005E 4990          beq       delayedPrint_3
                    4991   ; if (*str == '\n') {
00002B78  2042      4992          move.l    D2,A0
00002B7A  1010      4993          move.b    (A0),D0
00002B7C  0C00 000A 4994          cmp.b     #10,D0
00002B80  6612      4995          bne.s     delayedPrint_4
                    4996   ; gotoxy(0, printw_y + 1);
00002B82  2212      4997          move.l    (A2),D1
00002B84  5281      4998          addq.l    #1,D1
00002B86  2F01      4999          move.l    D1,-(A7)
00002B88  42A7      5000          clr.l     -(A7)
00002B8A  4EB8 2A82 5001          jsr       _gotoxy
00002B8E  504F      5002          addq.w    #8,A7
00002B90  6000 0032 5003          bra       delayedPrint_5
                    5004   delayedPrint_4:
                    5005   ; } else {
                    5006   ; putcharxy(printw_x, printw_y, *str, error_message);
00002B94  2F2E 000C 5007          move.l    12(A6),-(A7)
00002B98  2042      5008          move.l    D2,A0
00002B9A  1210      5009          move.b    (A0),D1
00002B9C  4881      5010          ext.w     D1
00002B9E  48C1      5011          ext.l     D1
00002BA0  2F01      5012          move.l    D1,-(A7)
00002BA2  2F12      5013          move.l    (A2),-(A7)
00002BA4  2F39 0803 5014          move.l    _printw_x.L,-(A7)
00002BA8  0768      
00002BAA  4EB8 2A40 5015          jsr       _putcharxy
00002BAE  DEFC 0010 5016          add.w     #16,A7
                    5017   ; gotoxy(printw_x + 1, printw_y);
00002BB2  2F12      5018          move.l    (A2),-(A7)
00002BB4  2239 0803 5019          move.l    _printw_x.L,D1
00002BB8  0768      
00002BBA  5281      5020          addq.l    #1,D1
00002BBC  2F01      5021          move.l    D1,-(A7)
00002BBE  4EB8 2A82 5022          jsr       _gotoxy
00002BC2  504F      5023          addq.w    #8,A7
                    5024   delayedPrint_5:
                    5025   ; }
                    5026   ; str++;
00002BC4  5282      5027          addq.l    #1,D2
                    5028   ; delay_ms(100);
00002BC6  4878 0064 5029          pea       100
00002BCA  4EB9 0000 5030          jsr       _delay_ms
00002BCE  2CDC      
00002BD0  584F      5031          addq.w    #4,A7
00002BD2  609C      5032          bra       delayedPrint_1
                    5033   delayedPrint_3:
00002BD4  4CDF 0404 5034          movem.l   (A7)+,D2/A2
00002BD8  4E5E      5035          unlk      A6
00002BDA  4E75      5036          rts
                    5037   ; }
                    5038   ; }
                    5039   ; void gameOver()
                    5040   ; {
                    5041   _gameOver:
00002BDC  4E56 FF70 5042          link      A6,#-144
00002BE0  48E7 3000 5043          movem.l   D2/D3,-(A7)
                    5044   ; 
                    5045   ; 
                    5046   ; char gameover[] = "Game over!\n";
00002BE4  41EE FF70 5047          lea       -144(A6),A0
00002BE8  43F9 0000 5048          lea       gameOver_gameover.L,A1
00002BEC  4EDE      
00002BEE  7002      5049          moveq     #2,D0
00002BF0  20D9      5050          move.l    (A1)+,(A0)+
00002BF2  51C8 FFFC 5051          dbra      D0,*-2
                    5052   ; char score[128];
                    5053   ; char* cChar;
                    5054   ; int exit;
                    5055   ; int i;
                    5056   ; //say game over
                    5057   ; talkphonemeGG1();
00002BF6  4EB8 23BE 5058          jsr       _talkphonemeGG1
                    5059   ; talkphonemeEY();
00002BFA  4EB8 23A6 5060          jsr       _talkphonemeEY
                    5061   ; talkphonemeMM();
00002BFE  4EB8 244E 5062          jsr       _talkphonemeMM
                    5063   ; talkphonemePA4();
00002C02  4EB8 25B4 5064          jsr       _talkphonemePA4
                    5065   ; talkphonemeOW();
00002C06  4EB8 248A 5066          jsr       _talkphonemeOW
                    5067   ; talkphonemeVV();
00002C0A  4EB8 2526 5068          jsr       _talkphonemeVV
                    5069   ; talkphonemeER1();
00002C0E  4EB8 238E 5070          jsr       _talkphonemeER1
                    5071   ; //clear the screen
                    5072   ; clear_screen();
00002C12  4EB8 29C8 5073          jsr       _clear_screen
                    5074   ; //enable the cursor
                    5075   ; set_vga_control_reg(0xE4);
00002C16  4878 00E4 5076          pea       228
00002C1A  4EB8 2ABA 5077          jsr       _set_vga_control_reg
00002C1E  584F      5078          addq.w    #4,A7
                    5079   ; //print the game over message
                    5080   ; gotoxy(36, 20);
00002C20  4878 0014 5081          pea       20
00002C24  4878 0024 5082          pea       36
00002C28  4EB8 2A82 5083          jsr       _gotoxy
00002C2C  504F      5084          addq.w    #8,A7
                    5085   ; delayedPrint(gameover, "game over");
00002C2E  4879 0000 5086          pea       @tetris_1.L
00002C32  4D0E      
00002C34  486E FF70 5087          pea       -144(A6)
00002C38  4EB8 2B5E 5088          jsr       _delayedPrint
00002C3C  504F      5089          addq.w    #8,A7
                    5090   ; gotoxy(36, 21);
00002C3E  4878 0015 5091          pea       21
00002C42  4878 0024 5092          pea       36
00002C46  4EB8 2A82 5093          jsr       _gotoxy
00002C4A  504F      5094          addq.w    #8,A7
                    5095   ; sprintf(score,"Score: %d ",tetris_score);
00002C4C  2F39 0803 5096          move.l    _tetris_score.L,-(A7)
00002C50  0676      
00002C52  4879 0000 5097          pea       @tetris_2.L
00002C56  4D18      
00002C58  486E FF7C 5098          pea       -132(A6)
00002C5C  4EB9 0000 5099          jsr       _sprintf
00002C60  3750      
00002C62  DEFC 000C 5100          add.w     #12,A7
                    5101   ; delayedPrint(score, "score");
00002C66  4879 0000 5102          pea       @tetris_3.L
00002C6A  4D24      
00002C6C  486E FF7C 5103          pea       -132(A6)
00002C70  4EB8 2B5E 5104          jsr       _delayedPrint
00002C74  504F      5105          addq.w    #8,A7
                    5106   ; FlushKeyboard();
00002C76  4EB8 09DE 5107          jsr       _FlushKeyboard
                    5108   ; //change the color
                    5109   ; exit = 1;
00002C7A  7601      5110          moveq     #1,D3
                    5111   ; i = 1;
00002C7C  7401      5112          moveq     #1,D2
                    5113   ; while(exit)
                    5114   gameOver_1:
00002C7E  4A83      5115          tst.l     D3
00002C80  6700 0052 5116          beq       gameOver_3
                    5117   ; {
                    5118   ; set_color(i & 0x7);
00002C84  2202      5119          move.l    D2,D1
00002C86  C2BC 0000 5120          and.l     #7,D1
00002C8A  0007      
00002C8C  2F01      5121          move.l    D1,-(A7)
00002C8E  4EB8 2AD2 5122          jsr       _set_color
00002C92  584F      5123          addq.w    #4,A7
                    5124   ; i++;
00002C94  5282      5125          addq.l    #1,D2
                    5126   ; if(i > 7) i = 1;
00002C96  0C82 0000 5127          cmp.l     #7,D2
00002C9A  0007      
00002C9C  6F02      5128          ble.s     gameOver_4
00002C9E  7401      5129          moveq     #1,D2
                    5130   gameOver_4:
                    5131   ; if(kbhit())
00002CA0  4EB8 095C 5132          jsr       _kbhit
00002CA4  4A80      5133          tst.l     D0
00002CA6  671E      5134          beq.s     gameOver_6
                    5135   ; {
                    5136   ; printf("Press any key to continue. ", getch());
00002CA8  2F00      5137          move.l    D0,-(A7)
00002CAA  4EB9 0000 5138          jsr       _getch
00002CAE  3884      
00002CB0  2200      5139          move.l    D0,D1
00002CB2  201F      5140          move.l    (A7)+,D0
00002CB4  2F01      5141          move.l    D1,-(A7)
00002CB6  4879 0000 5142          pea       @tetris_4.L
00002CBA  4D2A      
00002CBC  4EB9 0000 5143          jsr       _printf
00002CC0  37B4      
00002CC2  504F      5144          addq.w    #8,A7
                    5145   ; exit = 0;
00002CC4  4283      5146          clr.l     D3
                    5147   gameOver_6:
                    5148   ; }
                    5149   ; //delay
                    5150   ; delay_ms(300);
00002CC6  4878 012C 5151          pea       300
00002CCA  4EB9 0000 5152          jsr       _delay_ms
00002CCE  2CDC      
00002CD0  584F      5153          addq.w    #4,A7
00002CD2  60AA      5154          bra       gameOver_1
                    5155   gameOver_3:
00002CD4  4CDF 000C 5156          movem.l   (A7)+,D2/D3
00002CD8  4E5E      5157          unlk      A6
00002CDA  4E75      5158          rts
                    5159   ; }
                    5160   ; }
                    5161   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5162   ; //
                    5163   ; //
                    5164   ; //                      end  functions to implement
                    5165   ; //
                    5166   ; //
                    5167   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5168   ; void delay_ms(int num_ms) {
                    5169   _delay_ms:
00002CDC  4E56 0000 5170          link      A6,#0
00002CE0  48E7 3000 5171          movem.l   D2/D3,-(A7)
                    5172   ; int start_time;
                    5173   ; int current_time;
                    5174   ; start_time = clock();
00002CE4  4EB8 2AFC 5175          jsr       _clock
00002CE8  2400      5176          move.l    D0,D2
                    5177   ; do {
                    5178   delay_ms_1:
                    5179   ; current_time = clock();
00002CEA  4EB8 2AFC 5180          jsr       _clock
00002CEE  2600      5181          move.l    D0,D3
                    5182   ; if (current_time < start_time) { //handle wraparound
00002CF0  B682      5183          cmp.l     D2,D3
00002CF2  6C0E      5184          bge.s     delay_ms_3
                    5185   ; num_ms = num_ms - (INT_MAX-start_time);
00002CF4  203C 7FFF 5186          move.l    #2147483647,D0
00002CF8  FFFF      
00002CFA  9082      5187          sub.l     D2,D0
00002CFC  91AE 0008 5188          sub.l     D0,8(A6)
                    5189   ; start_time = current_time;
00002D00  2403      5190          move.l    D3,D2
                    5191   delay_ms_3:
00002D02  2003      5192          move.l    D3,D0
00002D04  9082      5193          sub.l     D2,D0
00002D06  B0AE 0008 5194          cmp.l     8(A6),D0
00002D0A  6DDE      5195          blt       delay_ms_1
00002D0C  4CDF 000C 5196          movem.l   (A7)+,D2/D3
00002D10  4E5E      5197          unlk      A6
00002D12  4E75      5198          rts
                    5199   ; }
                    5200   ; } while ((current_time - start_time) < num_ms);
                    5201   ; }
                    5202   ; int tetris_rand() {
                    5203   _tetris_rand:
                    5204   ; return ((clock() >> 4)& 0xFFFF); //divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
00002D14  4EB8 2AFC 5205          jsr       _clock
00002D18  E880      5206          asr.l     #4,D0
00002D1A  C0BC 0000 5207          and.l     #65535,D0
00002D1E  FFFF      
00002D20  4E75      5208          rts
                    5209   ; }
                    5210   ; void CopyShape(Shape* shape, Shape* new_shape){
                    5211   _CopyShape:
00002D22  4E56 0000 5212          link      A6,#0
00002D26  48E7 3C00 5213          movem.l   D2/D3/D4/D5,-(A7)
00002D2A  242E 000C 5214          move.l    12(A6),D2
00002D2E  2A2E 0008 5215          move.l    8(A6),D5
                    5216   ; int i;
                    5217   ; int j;
                    5218   ; new_shape->width = shape->width;
00002D32  2045      5219          move.l    D5,A0
00002D34  2242      5220          move.l    D2,A1
00002D36  2368 0010 5221          move.l    16(A0),16(A1)
00002D3A  0010      
                    5222   ; new_shape->row = shape->row;
00002D3C  2045      5223          move.l    D5,A0
00002D3E  2242      5224          move.l    D2,A1
00002D40  2368 0014 5225          move.l    20(A0),20(A1)
00002D44  0014      
                    5226   ; new_shape->col = shape->col;
00002D46  2045      5227          move.l    D5,A0
00002D48  2242      5228          move.l    D2,A1
00002D4A  2368 0018 5229          move.l    24(A0),24(A1)
00002D4E  0018      
                    5230   ; for(i = 0; i < new_shape->width; i++){
00002D50  4284      5231          clr.l     D4
                    5232   CopyShape_1:
00002D52  2042      5233          move.l    D2,A0
00002D54  B8A8 0010 5234          cmp.l     16(A0),D4
00002D58  6C00 002A 5235          bge       CopyShape_3
                    5236   ; for(j=0; j < new_shape->width; j++) {
00002D5C  4283      5237          clr.l     D3
                    5238   CopyShape_4:
00002D5E  2042      5239          move.l    D2,A0
00002D60  B6A8 0010 5240          cmp.l     16(A0),D3
00002D64  6C1A      5241          bge.s     CopyShape_6
                    5242   ; new_shape->array[i][j] = shape->array[i][j];
00002D66  2045      5243          move.l    D5,A0
00002D68  2004      5244          move.l    D4,D0
00002D6A  E588      5245          lsl.l     #2,D0
00002D6C  D1C0      5246          add.l     D0,A0
00002D6E  2242      5247          move.l    D2,A1
00002D70  2004      5248          move.l    D4,D0
00002D72  E588      5249          lsl.l     #2,D0
00002D74  D3C0      5250          add.l     D0,A1
00002D76  13B0 3800 5251          move.b    0(A0,D3.L),0(A1,D3.L)
00002D7A  3800      
00002D7C  5283      5252          addq.l    #1,D3
00002D7E  60DE      5253          bra       CopyShape_4
                    5254   CopyShape_6:
00002D80  5284      5255          addq.l    #1,D4
00002D82  60CE      5256          bra       CopyShape_1
                    5257   CopyShape_3:
00002D84  4CDF 003C 5258          movem.l   (A7)+,D2/D3/D4/D5
00002D88  4E5E      5259          unlk      A6
00002D8A  4E75      5260          rts
                    5261   ; }
                    5262   ; }
                    5263   ; }
                    5264   ; int CheckPosition(Shape* shape){ //Check the position of the copied shape
                    5265   _CheckPosition:
00002D8C  4E56 0000 5266          link      A6,#0
00002D90  48E7 3800 5267          movem.l   D2/D3/D4,-(A7)
00002D94  242E 0008 5268          move.l    8(A6),D2
                    5269   ; int i, j;
                    5270   ; for(i = 0; i < shape->width;i++) {
00002D98  4284      5271          clr.l     D4
                    5272   CheckPosition_1:
00002D9A  2042      5273          move.l    D2,A0
00002D9C  B8A8 0010 5274          cmp.l     16(A0),D4
00002DA0  6C00 0096 5275          bge       CheckPosition_3
                    5276   ; for(j = 0; j < shape->width ;j++){
00002DA4  4283      5277          clr.l     D3
                    5278   CheckPosition_4:
00002DA6  2042      5279          move.l    D2,A0
00002DA8  B6A8 0010 5280          cmp.l     16(A0),D3
00002DAC  6C00 0084 5281          bge       CheckPosition_6
                    5282   ; if((shape->col+j < 0 || shape->col+j >= TETRIS_COLS || shape->row+i >= TETRIS_ROWS)){ //Out of borders
00002DB0  2042      5283          move.l    D2,A0
00002DB2  2028 0018 5284          move.l    24(A0),D0
00002DB6  D083      5285          add.l     D3,D0
00002DB8  0C80 0000 5286          cmp.l     #0,D0
00002DBC  0000      
00002DBE  6D20      5287          blt.s     CheckPosition_9
00002DC0  2042      5288          move.l    D2,A0
00002DC2  2028 0018 5289          move.l    24(A0),D0
00002DC6  D083      5290          add.l     D3,D0
00002DC8  0C80 0000 5291          cmp.l     #15,D0
00002DCC  000F      
00002DCE  6C10      5292          bge.s     CheckPosition_9
00002DD0  2042      5293          move.l    D2,A0
00002DD2  2028 0014 5294          move.l    20(A0),D0
00002DD6  D084      5295          add.l     D4,D0
00002DD8  0C80 0000 5296          cmp.l     #20,D0
00002DDC  0014      
00002DDE  6D18      5297          blt.s     CheckPosition_7
                    5298   CheckPosition_9:
                    5299   ; if(shape->array[i][j]) //but is it just a phantom?
00002DE0  2042      5300          move.l    D2,A0
00002DE2  2004      5301          move.l    D4,D0
00002DE4  E588      5302          lsl.l     #2,D0
00002DE6  D1C0      5303          add.l     D0,A0
00002DE8  4A30 3800 5304          tst.b     0(A0,D3.L)
00002DEC  6706      5305          beq.s     CheckPosition_10
                    5306   ; return FALSE;
00002DEE  4280      5307          clr.l     D0
00002DF0  6000 0048 5308          bra       CheckPosition_12
                    5309   CheckPosition_10:
00002DF4  6000 0036 5310          bra       CheckPosition_13
                    5311   CheckPosition_7:
                    5312   ; }
                    5313   ; else if(Table[shape->row+i][shape->col+j] && shape->array[i][j])
00002DF8  2042      5314          move.l    D2,A0
00002DFA  2028 0014 5315          move.l    20(A0),D0
00002DFE  D084      5316          add.l     D4,D0
00002E00  C1FC 000F 5317          muls      #15,D0
00002E04  41F9 0803 5318          lea       _Table.L,A0
00002E08  054A      
00002E0A  D1C0      5319          add.l     D0,A0
00002E0C  2242      5320          move.l    D2,A1
00002E0E  2029 0018 5321          move.l    24(A1),D0
00002E12  D083      5322          add.l     D3,D0
00002E14  4A30 0800 5323          tst.b     0(A0,D0.L)
00002E18  6712      5324          beq.s     CheckPosition_13
00002E1A  2042      5325          move.l    D2,A0
00002E1C  2004      5326          move.l    D4,D0
00002E1E  E588      5327          lsl.l     #2,D0
00002E20  D1C0      5328          add.l     D0,A0
00002E22  4A30 3800 5329          tst.b     0(A0,D3.L)
00002E26  6704      5330          beq.s     CheckPosition_13
                    5331   ; return FALSE;
00002E28  4280      5332          clr.l     D0
00002E2A  600E      5333          bra.s     CheckPosition_12
                    5334   CheckPosition_13:
00002E2C  5283      5335          addq.l    #1,D3
00002E2E  6000 FF76 5336          bra       CheckPosition_4
                    5337   CheckPosition_6:
00002E32  5284      5338          addq.l    #1,D4
00002E34  6000 FF64 5339          bra       CheckPosition_1
                    5340   CheckPosition_3:
                    5341   ; }
                    5342   ; }
                    5343   ; return TRUE;
00002E38  7001      5344          moveq     #1,D0
                    5345   CheckPosition_12:
00002E3A  4CDF 001C 5346          movem.l   (A7)+,D2/D3/D4
00002E3E  4E5E      5347          unlk      A6
00002E40  4E75      5348          rts
                    5349   ; }
                    5350   ; void SetNewRandomShape(){ //updates [current] with new shape
                    5351   _SetNewRandomShape:
00002E42  2F0A      5352          move.l    A2,-(A7)
00002E44  45F9 0803 5353          lea       _current.L,A2
00002E48  0680      
                    5354   ; CopyShape(&ShapesArray[mod_bld(tetris_rand(),NUM_SHAPES)],&current);
00002E4A  2F0A      5355          move.l    A2,-(A7)
00002E4C  4879 0803 5356          pea       _ShapesArray.L
00002E50  069C      
00002E52  2F00      5357          move.l    D0,-(A7)
00002E54  4878 0007 5358          pea       7
00002E58  2F01      5359          move.l    D1,-(A7)
00002E5A  4EB8 2D14 5360          jsr       _tetris_rand
00002E5E  221F      5361          move.l    (A7)+,D1
00002E60  2F00      5362          move.l    D0,-(A7)
00002E62  4EB8 297E 5363          jsr       _mod_bld
00002E66  504F      5364          addq.w    #8,A7
00002E68  2200      5365          move.l    D0,D1
00002E6A  201F      5366          move.l    (A7)+,D0
00002E6C  205F      5367          move.l    (A7)+,A0
00002E6E  C3FC 001C 5368          muls      #28,D1
00002E72  D1C1      5369          add.l     D1,A0
00002E74  2F08      5370          move.l    A0,-(A7)
00002E76  4EB8 2D22 5371          jsr       _CopyShape
00002E7A  504F      5372          addq.w    #8,A7
                    5373   ; current.col = mod_bld(tetris_rand(),(TETRIS_COLS-current.width+1));
00002E7C  720F      5374          moveq     #15,D1
00002E7E  4881      5375          ext.w     D1
00002E80  48C1      5376          ext.l     D1
00002E82  92AA 0010 5377          sub.l     16(A2),D1
00002E86  5281      5378          addq.l    #1,D1
00002E88  2F01      5379          move.l    D1,-(A7)
00002E8A  2F00      5380          move.l    D0,-(A7)
00002E8C  4EB8 2D14 5381          jsr       _tetris_rand
00002E90  2200      5382          move.l    D0,D1
00002E92  201F      5383          move.l    (A7)+,D0
00002E94  2F01      5384          move.l    D1,-(A7)
00002E96  4EB8 297E 5385          jsr       _mod_bld
00002E9A  504F      5386          addq.w    #8,A7
00002E9C  2540 0018 5387          move.l    D0,24(A2)
                    5388   ; current.row = 0;
00002EA0  42AA 0014 5389          clr.l     20(A2)
                    5390   ; if(!CheckPosition(&current)){
00002EA4  2F0A      5391          move.l    A2,-(A7)
00002EA6  4EB8 2D8C 5392          jsr       _CheckPosition
00002EAA  584F      5393          addq.w    #4,A7
00002EAC  4A80      5394          tst.l     D0
00002EAE  6606      5395          bne.s     SetNewRandomShape_1
                    5396   ; GameOn = FALSE;
00002EB0  4239 0803 5397          clr.b     _GameOn.L
00002EB4  067A      
                    5398   SetNewRandomShape_1:
00002EB6  245F      5399          move.l    (A7)+,A2
00002EB8  4E75      5400          rts
                    5401   ; //printf("Game on = false\n");
                    5402   ; }
                    5403   ; }
                    5404   ; void RotateShape(Shape* shape){ //rotates clockwise
                    5405   _RotateShape:
00002EBA  4E56 FFE4 5406          link      A6,#-28
00002EBE  48E7 3E00 5407          movem.l   D2/D3/D4/D5/D6,-(A7)
00002EC2  2C2E 0008 5408          move.l    8(A6),D6
                    5409   ; Shape temp;
                    5410   ; int i, j, k, width;
                    5411   ; CopyShape(shape,&temp);
00002EC6  486E FFE4 5412          pea       -28(A6)
00002ECA  2F06      5413          move.l    D6,-(A7)
00002ECC  4EB8 2D22 5414          jsr       _CopyShape
00002ED0  504F      5415          addq.w    #8,A7
                    5416   ; width = shape->width;
00002ED2  2046      5417          move.l    D6,A0
00002ED4  2828 0010 5418          move.l    16(A0),D4
                    5419   ; for(i = 0; i < width ; i++){
00002ED8  4282      5420          clr.l     D2
                    5421   RotateShape_1:
00002EDA  B484      5422          cmp.l     D4,D2
00002EDC  6C00 0030 5423          bge       RotateShape_3
                    5424   ; for(j = 0, k = width-1; j < width ; j++, k--){
00002EE0  4283      5425          clr.l     D3
00002EE2  2004      5426          move.l    D4,D0
00002EE4  5380      5427          subq.l    #1,D0
00002EE6  2A00      5428          move.l    D0,D5
                    5429   RotateShape_4:
00002EE8  B684      5430          cmp.l     D4,D3
00002EEA  6C1E      5431          bge.s     RotateShape_6
                    5432   ; shape->array[i][j] = temp.array[k][i];
00002EEC  41EE FFE4 5433          lea       -28(A6),A0
00002EF0  2005      5434          move.l    D5,D0
00002EF2  E588      5435          lsl.l     #2,D0
00002EF4  D1C0      5436          add.l     D0,A0
00002EF6  2246      5437          move.l    D6,A1
00002EF8  2002      5438          move.l    D2,D0
00002EFA  E588      5439          lsl.l     #2,D0
00002EFC  D3C0      5440          add.l     D0,A1
00002EFE  13B0 2800 5441          move.b    0(A0,D2.L),0(A1,D3.L)
00002F02  3800      
00002F04  5283      5442          addq.l    #1,D3
00002F06  5385      5443          subq.l    #1,D5
00002F08  60DE      5444          bra       RotateShape_4
                    5445   RotateShape_6:
00002F0A  5282      5446          addq.l    #1,D2
00002F0C  60CC      5447          bra       RotateShape_1
                    5448   RotateShape_3:
00002F0E  4CDF 007C 5449          movem.l   (A7)+,D2/D3/D4/D5/D6
00002F12  4E5E      5450          unlk      A6
00002F14  4E75      5451          rts
                    5452   ; }
                    5453   ; }
                    5454   ; }
                    5455   ; void WriteToTable(){
                    5456   _WriteToTable:
00002F16  48E7 3020 5457          movem.l   D2/D3/A2,-(A7)
00002F1A  45F9 0803 5458          lea       _current.L,A2
00002F1E  0680      
                    5459   ; int i, j;
                    5460   ; for(i = 0; i < current.width ;i++){
00002F20  4283      5461          clr.l     D3
                    5462   WriteToTable_1:
00002F22  B6AA 0010 5463          cmp.l     16(A2),D3
00002F26  6C00 0048 5464          bge       WriteToTable_3
                    5465   ; for(j = 0; j < current.width ; j++){
00002F2A  4282      5466          clr.l     D2
                    5467   WriteToTable_4:
00002F2C  B4AA 0010 5468          cmp.l     16(A2),D2
00002F30  6C00 003A 5469          bge       WriteToTable_6
                    5470   ; if(current.array[i][j])
00002F34  2003      5471          move.l    D3,D0
00002F36  E588      5472          lsl.l     #2,D0
00002F38  41F2 0800 5473          lea       0(A2,D0.L),A0
00002F3C  4A30 2800 5474          tst.b     0(A0,D2.L)
00002F40  6726      5475          beq.s     WriteToTable_7
                    5476   ; Table[current.row+i][current.col+j] = current.array[i][j];
00002F42  2003      5477          move.l    D3,D0
00002F44  E588      5478          lsl.l     #2,D0
00002F46  41F2 0800 5479          lea       0(A2,D0.L),A0
00002F4A  202A 0014 5480          move.l    20(A2),D0
00002F4E  D083      5481          add.l     D3,D0
00002F50  C1FC 000F 5482          muls      #15,D0
00002F54  43F9 0803 5483          lea       _Table.L,A1
00002F58  054A      
00002F5A  D3C0      5484          add.l     D0,A1
00002F5C  202A 0018 5485          move.l    24(A2),D0
00002F60  D082      5486          add.l     D2,D0
00002F62  13B0 2800 5487          move.b    0(A0,D2.L),0(A1,D0.L)
00002F66  0800      
                    5488   WriteToTable_7:
00002F68  5282      5489          addq.l    #1,D2
00002F6A  60C0      5490          bra       WriteToTable_4
                    5491   WriteToTable_6:
00002F6C  5283      5492          addq.l    #1,D3
00002F6E  60B2      5493          bra       WriteToTable_1
                    5494   WriteToTable_3:
00002F70  4CDF 040C 5495          movem.l   (A7)+,D2/D3/A2
00002F74  4E75      5496          rts
                    5497   ; }
                    5498   ; }
                    5499   ; }
                    5500   ; void RemoveFullRowsAndUpdateScore(){
                    5501   _RemoveFullRowsAndUpdateScore:
00002F76  4E56 FFFC 5502          link      A6,#-4
00002F7A  48E7 3F30 5503          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
00002F7E  45F9 0803 5504          lea       _Table.L,A2
00002F82  054A      
00002F84  47F9 0803 5505          lea       _Tetris_Speed.L,A3
00002F88  0760      
                    5506   ; int i, j, sum, count=0;
00002F8A  7E00      5507          moveq     #0,D7
                    5508   ; int l, k;
                    5509   ; int compliment_to_say;
                    5510   ; for(i=0;i<TETRIS_ROWS;i++){
00002F8C  4284      5511          clr.l     D4
                    5512   RemoveFullRowsAndUpdateScore_1:
00002F8E  0C84 0000 5513          cmp.l     #20,D4
00002F92  0014      
00002F94  6C00 00E2 5514          bge       RemoveFullRowsAndUpdateScore_3
                    5515   ; sum = 0;
00002F98  4286      5516          clr.l     D6
                    5517   ; for(j=0;j< TETRIS_COLS;j++) {
00002F9A  4285      5518          clr.l     D5
                    5519   RemoveFullRowsAndUpdateScore_4:
00002F9C  0C85 0000 5520          cmp.l     #15,D5
00002FA0  000F      
00002FA2  6C18      5521          bge.s     RemoveFullRowsAndUpdateScore_6
                    5522   ; sum+=Table[i][j];
00002FA4  2004      5523          move.l    D4,D0
00002FA6  C1FC 000F 5524          muls      #15,D0
00002FAA  41F2 0800 5525          lea       0(A2,D0.L),A0
00002FAE  1030 5800 5526          move.b    0(A0,D5.L),D0
00002FB2  4880      5527          ext.w     D0
00002FB4  48C0      5528          ext.l     D0
00002FB6  DC80      5529          add.l     D0,D6
00002FB8  5285      5530          addq.l    #1,D5
00002FBA  60E0      5531          bra       RemoveFullRowsAndUpdateScore_4
                    5532   RemoveFullRowsAndUpdateScore_6:
                    5533   ; }
                    5534   ; if(sum==TETRIS_COLS){
00002FBC  0C86 0000 5535          cmp.l     #15,D6
00002FC0  000F      
00002FC2  6600 00AE 5536          bne       RemoveFullRowsAndUpdateScore_7
                    5537   ; count++;
00002FC6  5287      5538          addq.l    #1,D7
                    5539   ; for(k = i;k >=1;k--)
00002FC8  2604      5540          move.l    D4,D3
                    5541   RemoveFullRowsAndUpdateScore_9:
00002FCA  0C83 0000 5542          cmp.l     #1,D3
00002FCE  0001      
00002FD0  6D2E      5543          blt.s     RemoveFullRowsAndUpdateScore_11
                    5544   ; for(l=0;l<TETRIS_COLS;l++)
00002FD2  4282      5545          clr.l     D2
                    5546   RemoveFullRowsAndUpdateScore_12:
00002FD4  0C82 0000 5547          cmp.l     #15,D2
00002FD8  000F      
00002FDA  6C20      5548          bge.s     RemoveFullRowsAndUpdateScore_14
                    5549   ; Table[k][l]=Table[k-1][l];
00002FDC  2003      5550          move.l    D3,D0
00002FDE  5380      5551          subq.l    #1,D0
00002FE0  C1FC 000F 5552          muls      #15,D0
00002FE4  41F2 0800 5553          lea       0(A2,D0.L),A0
00002FE8  2003      5554          move.l    D3,D0
00002FEA  C1FC 000F 5555          muls      #15,D0
00002FEE  43F2 0800 5556          lea       0(A2,D0.L),A1
00002FF2  13B0 2800 5557          move.b    0(A0,D2.L),0(A1,D2.L)
00002FF6  2800      
00002FF8  5282      5558          addq.l    #1,D2
00002FFA  60D8      5559          bra       RemoveFullRowsAndUpdateScore_12
                    5560   RemoveFullRowsAndUpdateScore_14:
00002FFC  5383      5561          subq.l    #1,D3
00002FFE  60CA      5562          bra       RemoveFullRowsAndUpdateScore_9
                    5563   RemoveFullRowsAndUpdateScore_11:
                    5564   ; for(l=0;l<TETRIS_COLS;l++)
00003000  4282      5565          clr.l     D2
                    5566   RemoveFullRowsAndUpdateScore_15:
00003002  0C82 0000 5567          cmp.l     #15,D2
00003006  000F      
00003008  6C12      5568          bge.s     RemoveFullRowsAndUpdateScore_17
                    5569   ; Table[k][l]=0;
0000300A  2003      5570          move.l    D3,D0
0000300C  C1FC 000F 5571          muls      #15,D0
00003010  41F2 0800 5572          lea       0(A2,D0.L),A0
00003014  4230 2800 5573          clr.b     0(A0,D2.L)
00003018  5282      5574          addq.l    #1,D2
0000301A  60E6      5575          bra       RemoveFullRowsAndUpdateScore_15
                    5576   RemoveFullRowsAndUpdateScore_17:
                    5577   ; compliment_to_say = mod_bld(tetris_rand(),NUM_LINE_SUCCESS_MESSAGES);
0000301C  4878 0003 5578          pea       3
00003020  2F00      5579          move.l    D0,-(A7)
00003022  4EB8 2D14 5580          jsr       _tetris_rand
00003026  2200      5581          move.l    D0,D1
00003028  201F      5582          move.l    (A7)+,D0
0000302A  2F01      5583          move.l    D1,-(A7)
0000302C  4EB8 297E 5584          jsr       _mod_bld
00003030  504F      5585          addq.w    #8,A7
00003032  2D40 FFFC 5586          move.l    D0,-4(A6)
                    5587   ; switch (compliment_to_say) {
00003036  202E FFFC 5588          move.l    -4(A6),D0
0000303A  0C80 0000 5589          cmp.l     #1,D0
0000303E  0001      
00003040  6718      5590          beq.s     RemoveFullRowsAndUpdateScore_21
00003042  6E06      5591          bgt.s     RemoveFullRowsAndUpdateScore_24
00003044  4A80      5592          tst.l     D0
00003046  670C      5593          beq.s     RemoveFullRowsAndUpdateScore_20
00003048  601C      5594          bra.s     RemoveFullRowsAndUpdateScore_18
                    5595   RemoveFullRowsAndUpdateScore_24:
0000304A  0C80 0000 5596          cmp.l     #2,D0
0000304E  0002      
00003050  670E      5597          beq.s     RemoveFullRowsAndUpdateScore_22
00003052  6012      5598          bra.s     RemoveFullRowsAndUpdateScore_18
                    5599   RemoveFullRowsAndUpdateScore_20:
                    5600   ; case 0:  say_awesome(); break;
00003054  4EB8 2A16 5601          jsr       _say_awesome
00003058  6010      5602          bra.s     RemoveFullRowsAndUpdateScore_19
                    5603   RemoveFullRowsAndUpdateScore_21:
                    5604   ; case 1:  say_cool(); break;
0000305A  4EB8 2A24 5605          jsr       _say_cool
0000305E  600A      5606          bra.s     RemoveFullRowsAndUpdateScore_19
                    5607   RemoveFullRowsAndUpdateScore_22:
                    5608   ; case 2:  say_yeah(); break;
00003060  4EB8 2A36 5609          jsr       _say_yeah
00003064  6004      5610          bra.s     RemoveFullRowsAndUpdateScore_19
                    5611   RemoveFullRowsAndUpdateScore_18:
                    5612   ; default: say_yeah(); break;
00003066  4EB8 2A36 5613          jsr       _say_yeah
                    5614   RemoveFullRowsAndUpdateScore_19:
                    5615   ; }
                    5616   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
0000306A  2013      5617          move.l    (A3),D0
0000306C  D0AB 0004 5618          add.l     4(A3),D0
00003070  2680      5619          move.l    D0,(A3)
                    5620   RemoveFullRowsAndUpdateScore_7:
00003072  5284      5621          addq.l    #1,D4
00003074  6000 FF18 5622          bra       RemoveFullRowsAndUpdateScore_1
                    5623   RemoveFullRowsAndUpdateScore_3:
                    5624   ; }
                    5625   ; }
                    5626   ; tetris_score += 100*count;
00003078  2F07      5627          move.l    D7,-(A7)
0000307A  4878 0064 5628          pea       100
0000307E  4EB9 0000 5629          jsr       LMUL
00003082  37F6      
00003084  2017      5630          move.l    (A7),D0
00003086  504F      5631          addq.w    #8,A7
00003088  D1B9 0803 5632          add.l     D0,_tetris_score.L
0000308C  0676      
0000308E  4CDF 0CFC 5633          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
00003092  4E5E      5634          unlk      A6
00003094  4E75      5635          rts
                    5636   ; }
                    5637   ; void PrintTable(){
                    5638   _PrintTable:
00003096  4E56 FE54 5639          link      A6,#-428
0000309A  48E7 3038 5640          movem.l   D2/D3/A2/A3/A4,-(A7)
0000309E  45F8 2B04 5641          lea       _printw.L,A2
000030A2  47F9 0803 5642          lea       _current.L,A3
000030A6  0680      
000030A8  49EE FED4 5643          lea       -300(A6),A4
                    5644   ; int i, j;
                    5645   ; char score_str[128];
                    5646   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    5647   ; for(i = 0; i < TETRIS_ROWS ;i++){
000030AC  4282      5648          clr.l     D2
                    5649   PrintTable_1:
000030AE  0C82 0000 5650          cmp.l     #20,D2
000030B2  0014      
000030B4  6C20      5651          bge.s     PrintTable_3
                    5652   ; for(j = 0; j < TETRIS_COLS ; j++){
000030B6  4283      5653          clr.l     D3
                    5654   PrintTable_4:
000030B8  0C83 0000 5655          cmp.l     #15,D3
000030BC  000F      
000030BE  6C12      5656          bge.s     PrintTable_6
                    5657   ; Buffer[i][j] = 0;
000030C0  2002      5658          move.l    D2,D0
000030C2  C1FC 000F 5659          muls      #15,D0
000030C6  41F4 0800 5660          lea       0(A4,D0.L),A0
000030CA  4230 3800 5661          clr.b     0(A0,D3.L)
000030CE  5283      5662          addq.l    #1,D3
000030D0  60E6      5663          bra       PrintTable_4
                    5664   PrintTable_6:
000030D2  5282      5665          addq.l    #1,D2
000030D4  60D8      5666          bra       PrintTable_1
                    5667   PrintTable_3:
                    5668   ; }
                    5669   ; }
                    5670   ; for(i = 0; i < current.width ;i++){
000030D6  4282      5671          clr.l     D2
                    5672   PrintTable_7:
000030D8  B4AB 0010 5673          cmp.l     16(A3),D2
000030DC  6C00 0044 5674          bge       PrintTable_9
                    5675   ; for(j = 0; j < current.width ; j++){
000030E0  4283      5676          clr.l     D3
                    5677   PrintTable_10:
000030E2  B6AB 0010 5678          cmp.l     16(A3),D3
000030E6  6C00 0036 5679          bge       PrintTable_12
                    5680   ; if(current.array[i][j])
000030EA  2002      5681          move.l    D2,D0
000030EC  E588      5682          lsl.l     #2,D0
000030EE  41F3 0800 5683          lea       0(A3,D0.L),A0
000030F2  4A30 3800 5684          tst.b     0(A0,D3.L)
000030F6  6722      5685          beq.s     PrintTable_13
                    5686   ; Buffer[current.row+i][current.col+j] = current.array[i][j];
000030F8  2002      5687          move.l    D2,D0
000030FA  E588      5688          lsl.l     #2,D0
000030FC  41F3 0800 5689          lea       0(A3,D0.L),A0
00003100  202B 0014 5690          move.l    20(A3),D0
00003104  D082      5691          add.l     D2,D0
00003106  C1FC 000F 5692          muls      #15,D0
0000310A  43F4 0800 5693          lea       0(A4,D0.L),A1
0000310E  202B 0018 5694          move.l    24(A3),D0
00003112  D083      5695          add.l     D3,D0
00003114  13B0 3800 5696          move.b    0(A0,D3.L),0(A1,D0.L)
00003118  0800      
                    5697   PrintTable_13:
0000311A  5283      5698          addq.l    #1,D3
0000311C  60C4      5699          bra       PrintTable_10
                    5700   PrintTable_12:
0000311E  5282      5701          addq.l    #1,D2
00003120  60B6      5702          bra       PrintTable_7
                    5703   PrintTable_9:
                    5704   ; }
                    5705   ; }
                    5706   ; go_to_top_corner();
00003122  4EB8 29BA 5707          jsr       _go_to_top_corner
                    5708   ; printw("\n\n\n","initial_newline");
00003126  4879 0000 5709          pea       @tetris_6.L
0000312A  4D4A      
0000312C  4879 0000 5710          pea       @tetris_5.L
00003130  4D46      
00003132  4E92      5711          jsr       (A2)
00003134  504F      5712          addq.w    #8,A7
                    5713   ; for(i=0; i<TETRIS_COLS-9; i++) {
00003136  4282      5714          clr.l     D2
                    5715   PrintTable_15:
00003138  0C82 0000 5716          cmp.l     #6,D2
0000313C  0006      
0000313E  6C14      5717          bge.s     PrintTable_17
                    5718   ; printw(" ","space");
00003140  4879 0000 5719          pea       @tetris_8.L
00003144  4D5C      
00003146  4879 0000 5720          pea       @tetris_7.L
0000314A  4D5A      
0000314C  4E92      5721          jsr       (A2)
0000314E  504F      5722          addq.w    #8,A7
00003150  5282      5723          addq.l    #1,D2
00003152  60E4      5724          bra       PrintTable_15
                    5725   PrintTable_17:
                    5726   ; }
                    5727   ; printw("Tetris\n","title");
00003154  4879 0000 5728          pea       @tetris_10.L
00003158  4D72      
0000315A  4879 0000 5729          pea       @tetris_9.L
0000315E  4D62      
00003160  4E92      5730          jsr       (A2)
00003162  504F      5731          addq.w    #8,A7
                    5732   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003164  4282      5733          clr.l     D2
                    5734   PrintTable_18:
00003166  0C82 0000 5735          cmp.l     #20,D2
0000316A  0014      
0000316C  6C00 006A 5736          bge       PrintTable_20
                    5737   ; for(j = 0; j < TETRIS_COLS ; j++){
00003170  4283      5738          clr.l     D3
                    5739   PrintTable_21:
00003172  0C83 0000 5740          cmp.l     #15,D3
00003176  000F      
00003178  6C00 004A 5741          bge       PrintTable_23
                    5742   ; if (Table[i][j] + Buffer[i][j]) {
0000317C  2002      5743          move.l    D2,D0
0000317E  C1FC 000F 5744          muls      #15,D0
00003182  41F9 0803 5745          lea       _Table.L,A0
00003186  054A      
00003188  D1C0      5746          add.l     D0,A0
0000318A  1030 3800 5747          move.b    0(A0,D3.L),D0
0000318E  2202      5748          move.l    D2,D1
00003190  C3FC 000F 5749          muls      #15,D1
00003194  41F4 1800 5750          lea       0(A4,D1.L),A0
00003198  D030 3800 5751          add.b     0(A0,D3.L),D0
0000319C  6712      5752          beq.s     PrintTable_24
                    5753   ; printw("#","table#");
0000319E  4879 0000 5754          pea       @tetris_12.L
000031A2  4D7A      
000031A4  4879 0000 5755          pea       @tetris_11.L
000031A8  4D78      
000031AA  4E92      5756          jsr       (A2)
000031AC  504F      5757          addq.w    #8,A7
000031AE  6010      5758          bra.s     PrintTable_25
                    5759   PrintTable_24:
                    5760   ; } else {
                    5761   ; printw(".","table.");
000031B0  4879 0000 5762          pea       @tetris_14.L
000031B4  4D84      
000031B6  4879 0000 5763          pea       @tetris_13.L
000031BA  4D82      
000031BC  4E92      5764          jsr       (A2)
000031BE  504F      5765          addq.w    #8,A7
                    5766   PrintTable_25:
000031C0  5283      5767          addq.l    #1,D3
000031C2  60AE      5768          bra       PrintTable_21
                    5769   PrintTable_23:
                    5770   ; }
                    5771   ; //printw(" ","space2");
                    5772   ; }
                    5773   ; printw("\n","newline1");
000031C4  4879 0000 5774          pea       @tetris_16.L
000031C8  4D8E      
000031CA  4879 0000 5775          pea       @tetris_15.L
000031CE  4D8C      
000031D0  4E92      5776          jsr       (A2)
000031D2  504F      5777          addq.w    #8,A7
000031D4  5282      5778          addq.l    #1,D2
000031D6  608E      5779          bra       PrintTable_18
                    5780   PrintTable_20:
                    5781   ; }
                    5782   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000031D8  2F39 0803 5783          move.l    _tetris_score.L,-(A7)
000031DC  0676      
000031DE  4879 0000 5784          pea       @tetris_17.L
000031E2  4D98      
000031E4  486E FE54 5785          pea       -428(A6)
000031E8  4EB9 0000 5786          jsr       _sprintf
000031EC  3750      
000031EE  DEFC 000C 5787          add.w     #12,A7
                    5788   ; printw(score_str,"scoreprint");
000031F2  4879 0000 5789          pea       @tetris_18.L
000031F6  4DA4      
000031F8  486E FE54 5790          pea       -428(A6)
000031FC  4E92      5791          jsr       (A2)
000031FE  504F      5792          addq.w    #8,A7
00003200  4CDF 1C0C 5793          movem.l   (A7)+,D2/D3/A2/A3/A4
00003204  4E5E      5794          unlk      A6
00003206  4E75      5795          rts
                    5796   ; }
                    5797   ; void ManipulateCurrent(int action){
                    5798   _ManipulateCurrent:
00003208  4E56 FFE4 5799          link      A6,#-28
0000320C  48E7 0038 5800          movem.l   A2/A3/A4,-(A7)
00003210  45EE FFE4 5801          lea       -28(A6),A2
00003214  47F9 0803 5802          lea       _current.L,A3
00003218  0680      
0000321A  49F8 2D8C 5803          lea       _CheckPosition.L,A4
                    5804   ; Shape temp;
                    5805   ; CopyShape(&current,&temp);
0000321E  2F0A      5806          move.l    A2,-(A7)
00003220  2F0B      5807          move.l    A3,-(A7)
00003222  4EB8 2D22 5808          jsr       _CopyShape
00003226  504F      5809          addq.w    #8,A7
                    5810   ; switch(action){
00003228  202E 0008 5811          move.l    8(A6),D0
0000322C  0C80 0000 5812          cmp.l     #115,D0
00003230  0073      
00003232  672C      5813          beq.s     ManipulateCurrent_3
00003234  6E1C      5814          bgt.s     ManipulateCurrent_7
00003236  0C80 0000 5815          cmp.l     #100,D0
0000323A  0064      
0000323C  6700 0056 5816          beq       ManipulateCurrent_4
00003240  6E00 00B6 5817          bgt       ManipulateCurrent_2
00003244  0C80 0000 5818          cmp.l     #97,D0
00003248  0061      
0000324A  6700 006E 5819          beq       ManipulateCurrent_5
0000324E  6000 00A8 5820          bra       ManipulateCurrent_2
                    5821   ManipulateCurrent_7:
00003252  0C80 0000 5822          cmp.l     #119,D0
00003256  0077      
00003258  6700 0084 5823          beq       ManipulateCurrent_6
0000325C  6000 009A 5824          bra       ManipulateCurrent_2
                    5825   ManipulateCurrent_3:
                    5826   ; case 's':
                    5827   ; temp.row++;  //move down
00003260  200A      5828          move.l    A2,D0
00003262  0680 0000 5829          add.l     #20,D0
00003266  0014      
00003268  2040      5830          move.l    D0,A0
0000326A  5290      5831          addq.l    #1,(A0)
                    5832   ; if(CheckPosition(&temp)) {
0000326C  2F0A      5833          move.l    A2,-(A7)
0000326E  4E94      5834          jsr       (A4)
00003270  584F      5835          addq.w    #4,A7
00003272  4A80      5836          tst.l     D0
00003274  670E      5837          beq.s     ManipulateCurrent_8
                    5838   ; current.row++;
00003276  200B      5839          move.l    A3,D0
00003278  0680 0000 5840          add.l     #20,D0
0000327C  0014      
0000327E  2040      5841          move.l    D0,A0
00003280  5290      5842          addq.l    #1,(A0)
00003282  600C      5843          bra.s     ManipulateCurrent_9
                    5844   ManipulateCurrent_8:
                    5845   ; } else {
                    5846   ; WriteToTable();
00003284  4EB8 2F16 5847          jsr       _WriteToTable
                    5848   ; RemoveFullRowsAndUpdateScore();
00003288  4EB8 2F76 5849          jsr       _RemoveFullRowsAndUpdateScore
                    5850   ; SetNewRandomShape();
0000328C  4EB8 2E42 5851          jsr       _SetNewRandomShape
                    5852   ManipulateCurrent_9:
                    5853   ; }
                    5854   ; break;
00003290  6000 0066 5855          bra       ManipulateCurrent_2
                    5856   ManipulateCurrent_4:
                    5857   ; case 'd':
                    5858   ; temp.col++;  //move right
00003294  200A      5859          move.l    A2,D0
00003296  0680 0000 5860          add.l     #24,D0
0000329A  0018      
0000329C  2040      5861          move.l    D0,A0
0000329E  5290      5862          addq.l    #1,(A0)
                    5863   ; if(CheckPosition(&temp))
000032A0  2F0A      5864          move.l    A2,-(A7)
000032A2  4E94      5865          jsr       (A4)
000032A4  584F      5866          addq.w    #4,A7
000032A6  4A80      5867          tst.l     D0
000032A8  670C      5868          beq.s     ManipulateCurrent_10
                    5869   ; current.col++;
000032AA  200B      5870          move.l    A3,D0
000032AC  0680 0000 5871          add.l     #24,D0
000032B0  0018      
000032B2  2040      5872          move.l    D0,A0
000032B4  5290      5873          addq.l    #1,(A0)
                    5874   ManipulateCurrent_10:
                    5875   ; break;
000032B6  6000 0040 5876          bra       ManipulateCurrent_2
                    5877   ManipulateCurrent_5:
                    5878   ; case 'a':
                    5879   ; temp.col--;  //move left
000032BA  200A      5880          move.l    A2,D0
000032BC  0680 0000 5881          add.l     #24,D0
000032C0  0018      
000032C2  2040      5882          move.l    D0,A0
000032C4  5390      5883          subq.l    #1,(A0)
                    5884   ; if(CheckPosition(&temp))
000032C6  2F0A      5885          move.l    A2,-(A7)
000032C8  4E94      5886          jsr       (A4)
000032CA  584F      5887          addq.w    #4,A7
000032CC  4A80      5888          tst.l     D0
000032CE  670C      5889          beq.s     ManipulateCurrent_12
                    5890   ; current.col--;
000032D0  200B      5891          move.l    A3,D0
000032D2  0680 0000 5892          add.l     #24,D0
000032D6  0018      
000032D8  2040      5893          move.l    D0,A0
000032DA  5390      5894          subq.l    #1,(A0)
                    5895   ManipulateCurrent_12:
                    5896   ; break;
000032DC  601A      5897          bra.s     ManipulateCurrent_2
                    5898   ManipulateCurrent_6:
                    5899   ; case 'w':
                    5900   ; RotateShape(&temp); // rotate clockwise
000032DE  2F0A      5901          move.l    A2,-(A7)
000032E0  4EB8 2EBA 5902          jsr       _RotateShape
000032E4  584F      5903          addq.w    #4,A7
                    5904   ; if(CheckPosition(&temp))
000032E6  2F0A      5905          move.l    A2,-(A7)
000032E8  4E94      5906          jsr       (A4)
000032EA  584F      5907          addq.w    #4,A7
000032EC  4A80      5908          tst.l     D0
000032EE  6708      5909          beq.s     ManipulateCurrent_14
                    5910   ; RotateShape(&current);
000032F0  2F0B      5911          move.l    A3,-(A7)
000032F2  4EB8 2EBA 5912          jsr       _RotateShape
000032F6  584F      5913          addq.w    #4,A7
                    5914   ManipulateCurrent_14:
                    5915   ; break;
                    5916   ManipulateCurrent_2:
                    5917   ; }
                    5918   ; PrintTable();
000032F8  4EB8 3096 5919          jsr       _PrintTable
000032FC  4CDF 1C00 5920          movem.l   (A7)+,A2/A3/A4
00003300  4E5E      5921          unlk      A6
00003302  4E75      5922          rts
                    5923   ; }
                    5924   ; void initTetris_Speed()
                    5925   ; {
                    5926   _initTetris_Speed:
                    5927   ; Tetris_Speed.speed          = INITIAL_TETRIS_SPEED ;
00003304  23FC 0000 5928          move.l    #2,_Tetris_Speed.L
00003308  0002 0803 
0000330C  0760      
                    5929   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
0000330E  23FC 0000 5930          move.l    #1,_Tetris_Speed+4.L
00003312  0001 0803 
00003316  0764      
00003318  4E75      5931          rts
                    5932   ; }
                    5933   ; void tetris_mainloop()
                    5934   ; {
                    5935   _tetris_mainloop:
0000331A  4E56 FFFC 5936          link      A6,#-4
0000331E  2F02      5937          move.l    D2,-(A7)
                    5938   ; int current_time;
                    5939   ; int got_game_over;
                    5940   ; while(1){
                    5941   tetris_mainloop_1:
                    5942   ; current_time = clock();
00003320  4EB8 2AFC 5943          jsr       _clock
00003324  2400      5944          move.l    D0,D2
                    5945   ; if (kbhit()) {
00003326  4EB8 095C 5946          jsr       _kbhit
0000332A  4A80      5947          tst.l     D0
0000332C  6720      5948          beq.s     tetris_mainloop_6
                    5949   ; ManipulateCurrent(getch());
0000332E  2F00      5950          move.l    D0,-(A7)
00003330  4EB9 0000 5951          jsr       _getch
00003334  3884      
00003336  2200      5952          move.l    D0,D1
00003338  201F      5953          move.l    (A7)+,D0
0000333A  2F01      5954          move.l    D1,-(A7)
0000333C  4EB8 3208 5955          jsr       _ManipulateCurrent
00003340  584F      5956          addq.w    #4,A7
                    5957   ; if (!GameOn) {
00003342  4A39 0803 5958          tst.b     _GameOn.L
00003346  067A      
00003348  6604      5959          bne.s     tetris_mainloop_6
                    5960   ; break;
0000334A  6000 003C 5961          bra       tetris_mainloop_3
                    5962   tetris_mainloop_6:
                    5963   ; }
                    5964   ; }
                    5965   ; if (current_time >= ((MILLISECONDS_PER_SEC/Tetris_Speed.speed) + tetris_timer)) {
0000334E  4878 03E8 5966          pea       1000
00003352  2F39 0803 5967          move.l    _Tetris_Speed.L,-(A7)
00003356  0760      
00003358  4EB9 0000 5968          jsr       LDIV
0000335C  363C      
0000335E  2017      5969          move.l    (A7),D0
00003360  504F      5970          addq.w    #8,A7
00003362  D0B9 0803 5971          add.l     _tetris_timer.L,D0
00003366  067C      
00003368  B480      5972          cmp.l     D0,D2
0000336A  6D1A      5973          blt.s     tetris_mainloop_8
                    5974   ; ManipulateCurrent('s');
0000336C  4878 0073 5975          pea       115
00003370  4EB8 3208 5976          jsr       _ManipulateCurrent
00003374  584F      5977          addq.w    #4,A7
                    5978   ; if (!GameOn) {
00003376  4A39 0803 5979          tst.b     _GameOn.L
0000337A  067A      
0000337C  6602      5980          bne.s     tetris_mainloop_10
                    5981   ; break;
0000337E  6008      5982          bra.s     tetris_mainloop_3
                    5983   tetris_mainloop_10:
                    5984   ; }
                    5985   ; tetris_timer = current_time;
00003380  23C2 0803 5986          move.l    D2,_tetris_timer.L
00003384  067C      
                    5987   tetris_mainloop_8:
00003386  6098      5988          bra       tetris_mainloop_1
                    5989   tetris_mainloop_3:
00003388  241F      5990          move.l    (A7)+,D2
0000338A  4E5E      5991          unlk      A6
0000338C  4E75      5992          rts
                    5993   ; }
                    5994   ; }
                    5995   ; }
                    5996   ; int tetris_main() {
                    5997   _tetris_main:
0000338E  4E56 FF7C 5998          link      A6,#-132
00003392  48E7 3030 5999          movem.l   D2/D3/A2/A3,-(A7)
00003396  45F9 0803 6000          lea       _ShapesArray.L,A2
0000339A  069C      
0000339C  47F9 0000 6001          lea       _printf.L,A3
000033A0  37B4      
                    6002   ; int i, j;
                    6003   ; int test1;
                    6004   ; char score_str[128];
                    6005   ; printw_x = 0;
000033A2  42B9 0803 6006          clr.l     _printw_x.L
000033A6  0768      
                    6007   ; printw_y = 0;
000033A8  42B9 0803 6008          clr.l     _printw_y.L
000033AC  076C      
                    6009   ; GameOn = TRUE;
000033AE  13FC 0001 6010          move.b    #1,_GameOn.L
000033B2  0803 067A 
                    6011   ; for(i = 0; i < TETRIS_ROWS ;i++){
000033B6  4283      6012          clr.l     D3
                    6013   tetris_main_1:
000033B8  0C83 0000 6014          cmp.l     #20,D3
000033BC  0014      
000033BE  6C24      6015          bge.s     tetris_main_3
                    6016   ; for(j = 0; j < TETRIS_COLS ; j++){
000033C0  4282      6017          clr.l     D2
                    6018   tetris_main_4:
000033C2  0C82 0000 6019          cmp.l     #15,D2
000033C6  000F      
000033C8  6C16      6020          bge.s     tetris_main_6
                    6021   ; Table[i][j] = 0;
000033CA  2003      6022          move.l    D3,D0
000033CC  C1FC 000F 6023          muls      #15,D0
000033D0  41F9 0803 6024          lea       _Table.L,A0
000033D4  054A      
000033D6  D1C0      6025          add.l     D0,A0
000033D8  4230 2800 6026          clr.b     0(A0,D2.L)
000033DC  5282      6027          addq.l    #1,D2
000033DE  60E2      6028          bra       tetris_main_4
                    6029   tetris_main_6:
000033E0  5283      6030          addq.l    #1,D3
000033E2  60D4      6031          bra       tetris_main_1
                    6032   tetris_main_3:
                    6033   ; }
                    6034   ; }
                    6035   ; //S shape
                    6036   ; ShapesArray[0].array[0][0] = 	0;
000033E4  4212      6037          clr.b     (A2)
                    6038   ; ShapesArray[0].array[0][1] = 	1;
000033E6  157C 0001 6039          move.b    #1,1(A2)
000033EA  0001      
                    6040   ; ShapesArray[0].array[0][2] = 	1;
000033EC  157C 0001 6041          move.b    #1,2(A2)
000033F0  0002      
                    6042   ; ShapesArray[0].array[1][0] = 	1;
000033F2  157C 0001 6043          move.b    #1,4(A2)
000033F6  0004      
                    6044   ; ShapesArray[0].array[1][1] = 	1;
000033F8  157C 0001 6045          move.b    #1,4+1(A2)
000033FC  0005      
                    6046   ; ShapesArray[0].array[1][2] = 	0;
000033FE  422A 0006 6047          clr.b     4+2(A2)
                    6048   ; ShapesArray[0].array[2][0] = 	0;
00003402  422A 0008 6049          clr.b     8(A2)
                    6050   ; ShapesArray[0].array[2][1] = 	0;
00003406  422A 0009 6051          clr.b     8+1(A2)
                    6052   ; ShapesArray[0].array[2][2] = 	0;
0000340A  422A 000A 6053          clr.b     8+2(A2)
                    6054   ; ShapesArray[0].width       = 	3;
0000340E  257C 0000 6055          move.l    #3,16(A2)
00003412  0003 0010 
                    6056   ; //Z shape
                    6057   ; ShapesArray[1].array[0][0] = 	1;
00003416  157C 0001 6058          move.b    #1,28(A2)
0000341A  001C      
                    6059   ; ShapesArray[1].array[0][1] = 	1;
0000341C  157C 0001 6060          move.b    #1,28+1(A2)
00003420  001D      
                    6061   ; ShapesArray[1].array[0][2] = 	0;
00003422  422A 001E 6062          clr.b     28+2(A2)
                    6063   ; ShapesArray[1].array[1][0] = 	0;
00003426  422A 0020 6064          clr.b     28+4(A2)
                    6065   ; ShapesArray[1].array[1][1] = 	1;
0000342A  157C 0001 6066          move.b    #1,28+4+1(A2)
0000342E  0021      
                    6067   ; ShapesArray[1].array[1][2] = 	1;
00003430  157C 0001 6068          move.b    #1,28+4+2(A2)
00003434  0022      
                    6069   ; ShapesArray[1].array[2][0] = 	0;
00003436  422A 0024 6070          clr.b     28+8(A2)
                    6071   ; ShapesArray[1].array[2][1] = 	0;
0000343A  422A 0025 6072          clr.b     28+8+1(A2)
                    6073   ; ShapesArray[1].array[2][2] = 	0;
0000343E  422A 0026 6074          clr.b     28+8+2(A2)
                    6075   ; ShapesArray[1].width       = 	3;
00003442  257C 0000 6076          move.l    #3,44(A2)
00003446  0003 002C 
                    6077   ; //T shape
                    6078   ; ShapesArray[2].array[0][0] = 	0;
0000344A  422A 0038 6079          clr.b     56(A2)
                    6080   ; ShapesArray[2].array[0][1] = 	1;
0000344E  157C 0001 6081          move.b    #1,56+1(A2)
00003452  0039      
                    6082   ; ShapesArray[2].array[0][2] = 	0;
00003454  422A 003A 6083          clr.b     56+2(A2)
                    6084   ; ShapesArray[2].array[1][0] = 	1;
00003458  157C 0001 6085          move.b    #1,56+4(A2)
0000345C  003C      
                    6086   ; ShapesArray[2].array[1][1] = 	1;
0000345E  157C 0001 6087          move.b    #1,56+4+1(A2)
00003462  003D      
                    6088   ; ShapesArray[2].array[1][2] = 	1;
00003464  157C 0001 6089          move.b    #1,56+4+2(A2)
00003468  003E      
                    6090   ; ShapesArray[2].array[2][0] = 	0;
0000346A  422A 0040 6091          clr.b     56+8(A2)
                    6092   ; ShapesArray[2].array[2][1] = 	0;
0000346E  422A 0041 6093          clr.b     56+8+1(A2)
                    6094   ; ShapesArray[2].array[2][2] = 	0;
00003472  422A 0042 6095          clr.b     56+8+2(A2)
                    6096   ; ShapesArray[2].width       = 	3;
00003476  257C 0000 6097          move.l    #3,72(A2)
0000347A  0003 0048 
                    6098   ; //L shape
                    6099   ; ShapesArray[3].array[0][0] = 	0;
0000347E  422A 0054 6100          clr.b     84(A2)
                    6101   ; ShapesArray[3].array[0][1] = 	0;
00003482  422A 0055 6102          clr.b     84+1(A2)
                    6103   ; ShapesArray[3].array[0][2] = 	1;
00003486  157C 0001 6104          move.b    #1,84+2(A2)
0000348A  0056      
                    6105   ; ShapesArray[3].array[1][0] = 	1;
0000348C  157C 0001 6106          move.b    #1,84+4(A2)
00003490  0058      
                    6107   ; ShapesArray[3].array[1][1] = 	1;
00003492  157C 0001 6108          move.b    #1,84+4+1(A2)
00003496  0059      
                    6109   ; ShapesArray[3].array[1][2] = 	1;
00003498  157C 0001 6110          move.b    #1,84+4+2(A2)
0000349C  005A      
                    6111   ; ShapesArray[3].array[2][0] = 	0;
0000349E  422A 005C 6112          clr.b     84+8(A2)
                    6113   ; ShapesArray[3].array[2][1] = 	0;
000034A2  422A 005D 6114          clr.b     84+8+1(A2)
                    6115   ; ShapesArray[3].array[2][2] = 	0;
000034A6  422A 005E 6116          clr.b     84+8+2(A2)
                    6117   ; ShapesArray[3].width       = 	3;
000034AA  257C 0000 6118          move.l    #3,100(A2)
000034AE  0003 0064 
                    6119   ; //flipped L shape
                    6120   ; ShapesArray[4].array[0][0] = 	1;
000034B2  157C 0001 6121          move.b    #1,112(A2)
000034B6  0070      
                    6122   ; ShapesArray[4].array[0][1] = 	0;
000034B8  422A 0071 6123          clr.b     112+1(A2)
                    6124   ; ShapesArray[4].array[0][2] = 	0;
000034BC  422A 0072 6125          clr.b     112+2(A2)
                    6126   ; ShapesArray[4].array[1][0] = 	1;
000034C0  157C 0001 6127          move.b    #1,112+4(A2)
000034C4  0074      
                    6128   ; ShapesArray[4].array[1][1] = 	1;
000034C6  157C 0001 6129          move.b    #1,112+4+1(A2)
000034CA  0075      
                    6130   ; ShapesArray[4].array[1][2] = 	1;
000034CC  157C 0001 6131          move.b    #1,112+4+2(A2)
000034D0  0076      
                    6132   ; ShapesArray[4].array[2][0] = 	0;
000034D2  422A 0078 6133          clr.b     112+8(A2)
                    6134   ; ShapesArray[4].array[2][1] = 	0;
000034D6  422A 0079 6135          clr.b     112+8+1(A2)
                    6136   ; ShapesArray[4].array[2][2] = 	0;
000034DA  422A 007A 6137          clr.b     112+8+2(A2)
                    6138   ; ShapesArray[4].width       = 	3;
000034DE  257C 0000 6139          move.l    #3,128(A2)
000034E2  0003 0080 
                    6140   ; //square shape
                    6141   ; ShapesArray[5].array[0][0] = 	1;
000034E6  157C 0001 6142          move.b    #1,140(A2)
000034EA  008C      
                    6143   ; ShapesArray[5].array[0][1] = 	1;
000034EC  157C 0001 6144          move.b    #1,140+1(A2)
000034F0  008D      
                    6145   ; ShapesArray[5].array[1][0] = 	1;
000034F2  157C 0001 6146          move.b    #1,140+4(A2)
000034F6  0090      
                    6147   ; ShapesArray[5].array[1][1] = 	1;
000034F8  157C 0001 6148          move.b    #1,140+4+1(A2)
000034FC  0091      
                    6149   ; ShapesArray[5].width       = 	2;
000034FE  257C 0000 6150          move.l    #2,156(A2)
00003502  0002 009C 
                    6151   ; //long bar shape
                    6152   ; ShapesArray[6].array[0][0] = 	0;
00003506  422A 00A8 6153          clr.b     168(A2)
                    6154   ; ShapesArray[6].array[0][1] = 	0;
0000350A  422A 00A9 6155          clr.b     168+1(A2)
                    6156   ; ShapesArray[6].array[0][2] = 	0;
0000350E  422A 00AA 6157          clr.b     168+2(A2)
                    6158   ; ShapesArray[6].array[0][3] = 	0;
00003512  422A 00AB 6159          clr.b     168+3(A2)
                    6160   ; ShapesArray[6].array[1][0] = 	1;
00003516  157C 0001 6161          move.b    #1,168+4(A2)
0000351A  00AC      
                    6162   ; ShapesArray[6].array[1][1] = 	1;
0000351C  157C 0001 6163          move.b    #1,168+4+1(A2)
00003520  00AD      
                    6164   ; ShapesArray[6].array[1][2] = 	1;
00003522  157C 0001 6165          move.b    #1,168+4+2(A2)
00003526  00AE      
                    6166   ; ShapesArray[6].array[1][3] = 	1;
00003528  157C 0001 6167          move.b    #1,168+4+3(A2)
0000352C  00AF      
                    6168   ; ShapesArray[6].array[2][0] = 	0;
0000352E  422A 00B0 6169          clr.b     168+8(A2)
                    6170   ; ShapesArray[6].array[2][1] = 	0;
00003532  422A 00B1 6171          clr.b     168+8+1(A2)
                    6172   ; ShapesArray[6].array[2][2] = 	0;
00003536  422A 00B2 6173          clr.b     168+8+2(A2)
                    6174   ; ShapesArray[6].array[2][3] = 	0;
0000353A  422A 00B3 6175          clr.b     168+8+3(A2)
                    6176   ; ShapesArray[6].array[3][0] = 	0;
0000353E  422A 00B4 6177          clr.b     168+12(A2)
                    6178   ; ShapesArray[6].array[3][1] = 	0;
00003542  422A 00B5 6179          clr.b     168+12+1(A2)
                    6180   ; ShapesArray[6].array[3][2] = 	0;
00003546  422A 00B6 6181          clr.b     168+12+2(A2)
                    6182   ; ShapesArray[6].array[3][3] = 	0;
0000354A  422A 00B7 6183          clr.b     168+12+3(A2)
                    6184   ; ShapesArray[6].width       = 	4;
0000354E  257C 0000 6185          move.l    #4,184(A2)
00003552  0004 00B8 
                    6186   ; set_color(TETRIS_COLOR);
00003556  4878 0002 6187          pea       2
0000355A  4EB8 2AD2 6188          jsr       _set_color
0000355E  584F      6189          addq.w    #4,A7
                    6190   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
00003560  4878 00A2 6191          pea       162
00003564  4EB8 2ABA 6192          jsr       _set_vga_control_reg
00003568  584F      6193          addq.w    #4,A7
                    6194   ; tetris_score = 0;
0000356A  42B9 0803 6195          clr.l     _tetris_score.L
0000356E  0676      
                    6196   ; initTetris_Speed();
00003570  4EB8 3304 6197          jsr       _initTetris_Speed
                    6198   ; clear_screen();
00003574  4EB8 29C8 6199          jsr       _clear_screen
                    6200   ; tetris_timer = clock();
00003578  4EB8 2AFC 6201          jsr       _clock
0000357C  23C0 0803 6202          move.l    D0,_tetris_timer.L
00003580  067C      
                    6203   ; SetNewRandomShape();
00003582  4EB8 2E42 6204          jsr       _SetNewRandomShape
                    6205   ; PrintTable();	
00003586  4EB8 3096 6206          jsr       _PrintTable
                    6207   ; tetris_mainloop();
0000358A  4EB8 331A 6208          jsr       _tetris_mainloop
                    6209   ; gameOver();
0000358E  4EB8 2BDC 6210          jsr       _gameOver
                    6211   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003592  4283      6212          clr.l     D3
                    6213   tetris_main_7:
00003594  0C83 0000 6214          cmp.l     #20,D3
00003598  0014      
0000359A  6C00 0048 6215          bge       tetris_main_9
                    6216   ; for(j = 0; j < TETRIS_COLS ; j++){
0000359E  4282      6217          clr.l     D2
                    6218   tetris_main_10:
000035A0  0C82 0000 6219          cmp.l     #15,D2
000035A4  000F      
000035A6  6C2E      6220          bge.s     tetris_main_12
                    6221   ; if (Table[i][j]) {
000035A8  2003      6222          move.l    D3,D0
000035AA  C1FC 000F 6223          muls      #15,D0
000035AE  41F9 0803 6224          lea       _Table.L,A0
000035B2  054A      
000035B4  D1C0      6225          add.l     D0,A0
000035B6  4A30 2800 6226          tst.b     0(A0,D2.L)
000035BA  670C      6227          beq.s     tetris_main_13
                    6228   ; printf("#");
000035BC  4879 0000 6229          pea       @tetris_19.L
000035C0  4DB0      
000035C2  4E93      6230          jsr       (A3)
000035C4  584F      6231          addq.w    #4,A7
000035C6  600A      6232          bra.s     tetris_main_14
                    6233   tetris_main_13:
                    6234   ; } else {
                    6235   ; printf(".");
000035C8  4879 0000 6236          pea       @tetris_20.L
000035CC  4DB2      
000035CE  4E93      6237          jsr       (A3)
000035D0  584F      6238          addq.w    #4,A7
                    6239   tetris_main_14:
000035D2  5282      6240          addq.l    #1,D2
000035D4  60CA      6241          bra       tetris_main_10
                    6242   tetris_main_12:
                    6243   ; }
                    6244   ; }
                    6245   ; printf("\n");
000035D6  4879 0000 6246          pea       @tetris_21.L
000035DA  4DB4      
000035DC  4E93      6247          jsr       (A3)
000035DE  584F      6248          addq.w    #4,A7
000035E0  5283      6249          addq.l    #1,D3
000035E2  60B0      6250          bra       tetris_main_7
                    6251   tetris_main_9:
                    6252   ; }
                    6253   ; printf("\nGame over!\n");
000035E4  4879 0000 6254          pea       @tetris_22.L
000035E8  4DB6      
000035EA  4E93      6255          jsr       (A3)
000035EC  584F      6256          addq.w    #4,A7
                    6257   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000035EE  2F39 0803 6258          move.l    _tetris_score.L,-(A7)
000035F2  0676      
000035F4  4879 0000 6259          pea       @tetris_23.L
000035F8  4DC4      
000035FA  486E FF80 6260          pea       -128(A6)
000035FE  4EB9 0000 6261          jsr       _sprintf
00003602  3750      
00003604  DEFC 000C 6262          add.w     #12,A7
                    6263   ; printf(score_str);
00003608  486E FF80 6264          pea       -128(A6)
0000360C  4E93      6265          jsr       (A3)
0000360E  584F      6266          addq.w    #4,A7
                    6267   ; return 0;
00003610  4280      6268          clr.l     D0
00003612  4CDF 0C0C 6269          movem.l   (A7)+,D2/D3/A2/A3
00003616  4E5E      6270          unlk      A6
00003618  4E75      6271          rts
                    6272   ; }
                    6273   _strcpy:
0000361A  206F 0004 6274          move.l    (4,A7),A0
0000361E  226F 0008 6275          move.l    (8,A7),A1
00003622  2008      6276          move.l    A0,D0
                    6277   strcpy_1:
00003624  10D9      6278          move.b    (A1)+,(A0)+
00003626  66FC      6279          bne.s     strcpy_1
00003628  4E75      6280          rts
                    6281   ULDIV:
0000362A  4E56 0000 6282          link    A6,#0
0000362E  48E7 C000 6283          movem.l D0/D1,-(A7)
00003632  222E 0008 6284          move.l  8(A6),D1
00003636  202E 000C 6285          move.l  12(A6),D0
0000363A  6036      6286          bra.s   ldiv_3
                    6287   LDIV:
0000363C  4E56 0000 6288          link    A6,#0
00003640  48E7 C000 6289          movem.l D0/D1,-(A7)
00003644  222E 0008 6290          move.l  8(A6),D1
00003648  202E 000C 6291          move.l  12(A6),D0
0000364C  4A80      6292          tst.l   D0
0000364E  6A0E      6293          bpl.s   ldiv_1
00003650  4480      6294          neg.l   D0
00003652  4A81      6295          tst.l   D1
00003654  6A14      6296          bpl.s   ldiv_2
00003656  4481      6297          neg.l   D1
00003658  612A      6298          bsr.s   dodiv
0000365A  4481      6299          neg.l   D1
0000365C  6016      6300          bra.s   ldiv_4
                    6301   ldiv_1:
0000365E  4A81      6302          tst.l   D1
00003660  6A10      6303          bpl.s   ldiv_3
00003662  4481      6304          neg.l   D1
00003664  611E      6305          bsr.s   dodiv
00003666  4480      6306          neg.l   D0
00003668  600A      6307          bra.s   ldiv_4
                    6308   ldiv_2:
0000366A  6118      6309          bsr.s   dodiv
0000366C  4480      6310          neg.l   D0
0000366E  4481      6311          neg.l   D1
00003670  6002      6312          bra.s   ldiv_4
                    6313   ldiv_3:
00003672  6110      6314          bsr.s   dodiv
                    6315   ldiv_4:
00003674  2D40 0008 6316          move.l  D0,8(A6)
00003678  2D41 000C 6317          move.l  D1,12(A6)
0000367C  4CDF 0003 6318          movem.l (A7)+,D0/D1
00003680  4E5E      6319          unlk    A6
00003682  4E75      6320          rts
                    6321   dodiv:
00003684  0C81 0000 6322          cmpi.l  #$FFFF,D1
00003688  FFFF      
0000368A  6236      6323          bhi.s   dodiv_2
0000368C  0C80 0000 6324          cmpi.l  #$FFFF,D0
00003690  FFFF      
00003692  6210      6325          bhi.s   dodiv_1
00003694  80C1      6326          divu    D1,D0
00003696  2200      6327          move.l  D0,D1
00003698  4241      6328          clr.w   D1
0000369A  4841      6329          swap    D1
0000369C  0280 0000 6330          andi.l  #$FFFF,D0
000036A0  FFFF      
000036A2  4E75      6331          rts
                    6332   dodiv_1:
000036A4  48A7 A000 6333          movem.w D0/D2,-(A7)
000036A8  4240      6334          clr.w   D0
000036AA  4840      6335          swap    D0
000036AC  80C1      6336          divu    D1,D0
000036AE  3400      6337          move.w  D0,D2
000036B0  301F      6338          move.w  (A7)+,D0
000036B2  80C1      6339          divu    D1,D0
000036B4  4840      6340          swap    D0
000036B6  4281      6341          clr.l   D1
000036B8  3200      6342          move.w  D0,D1
000036BA  3002      6343          move.w  D2,D0
000036BC  4840      6344          swap    D0
000036BE  341F      6345          move.w  (A7)+,D2
000036C0  4E75      6346          rts
                    6347   dodiv_2:
000036C2  48E7 3800 6348          movem.l D2/D3/D4,-(A7)
000036C6  2401      6349          move.l  D1,D2
000036C8  4242      6350          clr.w   D2
000036CA  4842      6351          swap    D2
000036CC  5282      6352          addq.l  #1,D2
000036CE  2600      6353          move.l  D0,D3
000036D0  2801      6354          move.l  D1,D4
000036D2  2202      6355          move.l  D2,D1
000036D4  61CE      6356          bsr.s   dodiv_1
000036D6  2204      6357          move.l  D4,D1
000036D8  82C2      6358          divu    D2,D1
000036DA  80C1      6359          divu    D1,D0
000036DC  0280 0000 6360          andi.l  #$FFFF,D0
000036E0  FFFF      
                    6361   dodiv_3:
000036E2  2204      6362          move.l  D4,D1
000036E4  2404      6363          move.l  D4,D2
000036E6  4842      6364          swap    D2
000036E8  C2C0      6365          mulu    D0,D1
000036EA  C4C0      6366          mulu    D0,D2
000036EC  4842      6367          swap    D2
000036EE  D282      6368          add.l   D2,D1
000036F0  9283      6369          sub.l   D3,D1
000036F2  620A      6370          bhi.s   dodiv_4
000036F4  4481      6371          neg.l   D1
000036F6  B881      6372          cmp.l   D1,D4
000036F8  6208      6373          bhi.s   dodiv_5
000036FA  5280      6374          addq.l  #1,D0
000036FC  60E4      6375          bra.s   dodiv_3
                    6376   dodiv_4:
000036FE  5380      6377          subq.l  #1,D0
00003700  60E0      6378          bra.s   dodiv_3
                    6379   dodiv_5:
00003702  4CDF 001C 6380          movem.l (A7)+,D2/D3/D4
00003706  4E75      6381          rts
                    6382   _putch:
00003708  4E56 0000 6383          link      A6,#0
0000370C  2F02      6384          move.l    D2,-(A7)
0000370E  242E 0008 6385          move.l    8(A6),D2
00003712  0C82 0000 6386          cmp.l     #10,D2
00003716  000A      
00003718  660A      6387          bne.s     putch_1
0000371A  4878 000D 6388          pea       13
0000371E  4EB8 0974 6389          jsr       __putch
00003722  584F      6390          addq.w    #4,A7
                    6391   putch_1:
00003724  2F02      6392          move.l    D2,-(A7)
00003726  4EB8 0974 6393          jsr       __putch
0000372A  584F      6394          addq.w    #4,A7
0000372C  2002      6395          move.l    D2,D0
0000372E  241F      6396          move.l    (A7)+,D2
00003730  4E5E      6397          unlk      A6
00003732  4E75      6398          rts
                    6399   _tolower:
00003734  202F 0004 6400          move.l    4(A7),D0
00003738  0C80 0000 6401          cmp.l     #'A',D0
0000373C  0041      
0000373E  6D0E      6402          blt.s     tolower_1
00003740  0C80 0000 6403          cmp.l     #'Z',D0
00003744  005A      
00003746  6E06      6404          bgt.s     tolower_1
00003748  0680 0000 6405          add.l     #$20,D0
0000374C  0020      
                    6406   tolower_1:
0000374E  4E75      6407          rts
                    6408   _sprintf:
00003750  4E56 FFFC 6409          link      A6,#-4
00003754  2F02      6410          move.l    D2,-(A7)
00003756  41EE 000C 6411          lea       12(A6),A0
0000375A  5848      6412          addq.w    #4,A0
0000375C  2408      6413          move.l    A0,D2
0000375E  2F02      6414          move.l    D2,-(A7)
00003760  2F2E 000C 6415          move.l    12(A6),-(A7)
00003764  2F2E 0008 6416          move.l    8(A6),-(A7)
00003768  4EB9 0000 6417          jsr       _doprint
0000376C  3960      
0000376E  DEFC 000C 6418          add.w     #12,A7
00003772  2D40 FFFC 6419          move.l    D0,-4(A6)
00003776  4282      6420          clr.l     D2
00003778  202E FFFC 6421          move.l    -4(A6),D0
0000377C  241F      6422          move.l    (A7)+,D2
0000377E  4E5E      6423          unlk      A6
00003780  4E75      6424          rts
                    6425   _strcat:
00003782  206F 0004 6426          move.l    (4,A7),A0
00003786  226F 0008 6427          move.l    (8,A7),A1
0000378A  2008      6428          move.l    A0,D0
                    6429   strcat_1:
0000378C  4A18      6430          tst.b     (A0)+
0000378E  66FC      6431          bne.s     strcat_1
00003790  5388      6432          subq.l    #1,A0
                    6433   strcat_2:
00003792  10D9      6434          move.b    (A1)+,(A0)+
00003794  66FC      6435          bne.s     strcat_2
00003796  4E75      6436          rts
                    6437   _toupper:
00003798  202F 0004 6438          move.l    4(A7),D0
0000379C  0C80 0000 6439          cmp.l     #'a',D0
000037A0  0061      
000037A2  6D0E      6440          blt.s     toupper_1
000037A4  0C80 0000 6441          cmp.l     #'z',D0
000037A8  007A      
000037AA  6E06      6442          bgt.s     toupper_1
000037AC  0480 0000 6443          sub.l     #$20,D0
000037B0  0020      
                    6444   toupper_1:
000037B2  4E75      6445          rts
                    6446   _printf:
000037B4  4E56 FFFC 6447          link      A6,#-4
000037B8  2F02      6448          move.l    D2,-(A7)
000037BA  41EE 0008 6449          lea       8(A6),A0
000037BE  5848      6450          addq.w    #4,A0
000037C0  2408      6451          move.l    A0,D2
000037C2  2F02      6452          move.l    D2,-(A7)
000037C4  2F2E 0008 6453          move.l    8(A6),-(A7)
000037C8  42A7      6454          clr.l     -(A7)
000037CA  4EB9 0000 6455          jsr       _doprint
000037CE  3960      
000037D0  DEFC 000C 6456          add.w     #12,A7
000037D4  2D40 FFFC 6457          move.l    D0,-4(A6)
000037D8  4282      6458          clr.l     D2
000037DA  202E FFFC 6459          move.l    -4(A6),D0
000037DE  241F      6460          move.l    (A7)+,D2
000037E0  4E5E      6461          unlk      A6
000037E2  4E75      6462          rts
                    6463   ULMUL:
000037E4  4E56 0000 6464          link    A6,#0
000037E8  48E7 C000 6465          movem.l D0/D1,-(A7)
000037EC  222E 0008 6466          move.l  8(A6),D1
000037F0  202E 000C 6467          move.l  12(A6),D0
000037F4  602C      6468          bra.s   lmul_3
                    6469   LMUL:
000037F6  4E56 0000 6470          link    A6,#0
000037FA  48E7 C000 6471          movem.l D0/D1,-(A7)
000037FE  222E 0008 6472          move.l  8(A6),D1
00003802  202E 000C 6473          move.l  12(A6),D0
00003806  4A80      6474          tst.l   D0
00003808  6A0A      6475          bpl.s   lmul_1
0000380A  4480      6476          neg.l   D0
0000380C  4A81      6477          tst.l   D1
0000380E  6A0A      6478          bpl.s   lmul_2
00003810  4481      6479          neg.l   D1
00003812  600E      6480          bra.s   lmul_3
                    6481   lmul_1:
00003814  4A81      6482          tst.l   D1
00003816  6A0A      6483          bpl.s   lmul_3
00003818  4481      6484          neg.l   D1
                    6485   lmul_2:
0000381A  6114      6486          bsr.s   domul
0000381C  4481      6487          neg.l   D1
0000381E  4080      6488          negx.l  D0
00003820  6002      6489          bra.s   lmul_4
                    6490   lmul_3:
00003822  610C      6491          bsr.s   domul
                    6492   lmul_4:
00003824  2D41 0008 6493          move.l  D1,8(A6)
00003828  4CDF 0003 6494          movem.l (A7)+,D0/D1
0000382C  4E5E      6495          unlk    A6
0000382E  4E75      6496          rts
                    6497   domul:
00003830  0C81 0000 6498          cmpi.l  #$FFFF,D1
00003834  FFFF      
00003836  620C      6499          bhi.s   domul_1
00003838  0C80 0000 6500          cmpi.l  #$FFFF,D0
0000383C  FFFF      
0000383E  620E      6501          bhi.s   domul_2
00003840  C2C0      6502          mulu    D0,D1
00003842  4E75      6503          rts
                    6504   domul_1:
00003844  0C80 0000 6505          cmpi.l  #$FFFF,D0
00003848  FFFF      
0000384A  6218      6506          bhi.s   domul_4
0000384C  6002      6507          bra.s   domul_3
                    6508   domul_2
0000384E  C141      6509          exg     D0,D1
                    6510   domul_3:
00003850  2F02      6511          move.l  D2,-(A7)
00003852  2401      6512          move.l  D1,D2
00003854  4842      6513          swap    D2
00003856  C2C0      6514          mulu    D0,D1
00003858  C4C0      6515          mulu    D0,D2
0000385A  4842      6516          swap    D2
0000385C  4242      6517          clr.w   D2
0000385E  D282      6518          add.l   D2,D1
00003860  241F      6519          move.l  (A7)+,D2
00003862  4E75      6520          rts
                    6521   domul_4:
00003864  48E7 3000 6522          movem.l D2/D3,-(A7)
00003868  2401      6523          move.l  D1,D2
0000386A  2601      6524          move.l  D1,D3
0000386C  C2C0      6525          mulu    D0,D1
0000386E  4842      6526          swap    D2
00003870  C4C0      6527          mulu    D0,D2
00003872  4840      6528          swap    D0
00003874  C6C0      6529          mulu    D0,D3
00003876  D483      6530          add.l   D3,D2
00003878  4842      6531          swap    D2
0000387A  4242      6532          clr.w   D2
0000387C  D282      6533          add.l   D2,D1
0000387E  4CDF 000C 6534          movem.l (A7)+,D2/D3
00003882  4E75      6535          rts
                    6536   _getch:
00003884  2F02      6537          move.l    D2,-(A7)
00003886  2439 0803 6538          move.l    __ungetbuf.L,D2
0000388A  00C0      
0000388C  2039 0803 6539          move.l    __ungetbuf.L,D0
00003890  00C0      
00003892  0C80 FFFF 6540          cmp.l     #-1,D0
00003896  FFFF      
00003898  670C      6541          beq.s     getch_1
0000389A  23FC FFFF 6542          move.l    #-1,__ungetbuf.L
0000389E  FFFF 0803 
000038A2  00C0      
000038A4  6010      6543          bra.s     getch_3
                    6544   getch_1:
000038A6  4EB8 09A0 6545          jsr       __getch
000038AA  2400      6546          move.l    D0,D2
000038AC  0C80 0000 6547          cmp.l     #13,D0
000038B0  000D      
000038B2  6602      6548          bne.s     getch_3
000038B4  740A      6549          moveq     #10,D2
                    6550   getch_3:
000038B6  2002      6551          move.l    D2,D0
000038B8  241F      6552          move.l    (A7)+,D2
000038BA  4E75      6553          rts
                    6554   @doprint_copy:
000038BC  4E56 0000 6555          link      A6,#0
000038C0  206E 0008 6556          move.l    8(A6),A0
000038C4  4A90      6557          tst.l     (A0)
000038C6  6710      6558          beq.s     @doprint_copy_1
000038C8  202E 000C 6559          move.l    12(A6),D0
000038CC  206E 0008 6560          move.l    8(A6),A0
000038D0  2250      6561          move.l    (A0),A1
000038D2  5290      6562          addq.l    #1,(A0)
000038D4  1280      6563          move.b    D0,(A1)
000038D6  600A      6564          bra.s     @doprint_copy_2
                    6565   @doprint_copy_1:
000038D8  2F2E 000C 6566          move.l    12(A6),-(A7)
000038DC  4EB8 3708 6567          jsr       _putch
000038E0  584F      6568          addq.w    #4,A7
                    6569   @doprint_copy_2:
000038E2  4E5E      6570          unlk      A6
000038E4  4E75      6571          rts
                    6572   @doprint_getval:
000038E6  4E56 0000 6573          link      A6,#0
000038EA  48E7 3000 6574          movem.l   D2/D3,-(A7)
000038EE  262E 0008 6575          move.l    8(A6),D3
000038F2  4282      6576          clr.l     D2
000038F4  2043      6577          move.l    D3,A0
000038F6  2050      6578          move.l    (A0),A0
000038F8  1010      6579          move.b    (A0),D0
000038FA  0C00 002A 6580          cmp.b     #42,D0
000038FE  6612      6581          bne.s     @doprint_getval_1
00003900  206E 000C 6582          move.l    12(A6),A0
00003904  2250      6583          move.l    (A0),A1
00003906  5890      6584          addq.l    #4,(A0)
00003908  2411      6585          move.l    (A1),D2
0000390A  2043      6586          move.l    D3,A0
0000390C  5290      6587          addq.l    #1,(A0)
0000390E  6000 0046 6588          bra       @doprint_getval_5
                    6589   @doprint_getval_1:
00003912  7001      6590          moveq     #1,D0
00003914  2043      6591          move.l    D3,A0
00003916  2050      6592          move.l    (A0),A0
00003918  1210      6593          move.b    (A0),D1
0000391A  4881      6594          ext.w     D1
0000391C  48C1      6595          ext.l     D1
0000391E  D081      6596          add.l     D1,D0
00003920  41F9 0000 6597          lea       __ctype.L,A0
00003924  4DDC      
00003926  1030 0800 6598          move.b    0(A0,D0.L),D0
0000392A  C03C 0004 6599          and.b     #4,D0
0000392E  6726      6600          beq.s     @doprint_getval_5
00003930  2F02      6601          move.l    D2,-(A7)
00003932  4878 000A 6602          pea       10
00003936  4EB8 37F6 6603          jsr       LMUL
0000393A  2017      6604          move.l    (A7),D0
0000393C  504F      6605          addq.w    #8,A7
0000393E  2043      6606          move.l    D3,A0
00003940  2250      6607          move.l    (A0),A1
00003942  5290      6608          addq.l    #1,(A0)
00003944  1211      6609          move.b    (A1),D1
00003946  4881      6610          ext.w     D1
00003948  48C1      6611          ext.l     D1
0000394A  D081      6612          add.l     D1,D0
0000394C  0480 0000 6613          sub.l     #48,D0
00003950  0030      
00003952  2400      6614          move.l    D0,D2
00003954  60BC      6615          bra       @doprint_getval_1
                    6616   @doprint_getval_5:
00003956  2002      6617          move.l    D2,D0
00003958  4CDF 000C 6618          movem.l   (A7)+,D2/D3
0000395C  4E5E      6619          unlk      A6
0000395E  4E75      6620          rts
                    6621   _doprint:
00003960  4E56 FFCC 6622          link      A6,#-52
00003964  48E7 3F3C 6623          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003968  45EE 0008 6624          lea       8(A6),A2
0000396C  47F8 38BC 6625          lea       @doprint_copy.L,A3
00003970  49F9 0000 6626          lea       _ultoa.L,A4
00003974  4088      
00003976  4286      6627          clr.l     D6
                    6628   doprint_1:
00003978  206E 000C 6629          move.l    12(A6),A0
0000397C  4A10      6630          tst.b     (A0)
0000397E  6700 05EA 6631          beq       doprint_3
00003982  206E 000C 6632          move.l    12(A6),A0
00003986  1010      6633          move.b    (A0),D0
00003988  0C00 0025 6634          cmp.b     #37,D0
0000398C  671C      6635          beq.s     doprint_4
0000398E  206E 000C 6636          move.l    12(A6),A0
00003992  52AE 000C 6637          addq.l    #1,12(A6)
00003996  1210      6638          move.b    (A0),D1
00003998  4881      6639          ext.w     D1
0000399A  48C1      6640          ext.l     D1
0000399C  2F01      6641          move.l    D1,-(A7)
0000399E  2F0A      6642          move.l    A2,-(A7)
000039A0  4E93      6643          jsr       (A3)
000039A2  504F      6644          addq.w    #8,A7
000039A4  5286      6645          addq.l    #1,D6
000039A6  6000 05BE 6646          bra       doprint_2
                    6647   doprint_4:
000039AA  52AE 000C 6648          addq.l    #1,12(A6)
000039AE  422E FFD3 6649          clr.b     -45(A6)
000039B2  422E FFD2 6650          clr.b     -46(A6)
000039B6  422E FFD0 6651          clr.b     -48(A6)
000039BA  422E FFCF 6652          clr.b     -49(A6)
000039BE  422E FFCE 6653          clr.b     -50(A6)
000039C2  422E FFCD 6654          clr.b     -51(A6)
000039C6  42AE FFFC 6655          clr.l     -4(A6)
000039CA  7AFF      6656          moveq     #-1,D5
000039CC  41EE FFDC 6657          lea       -36(A6),A0
000039D0  2608      6658          move.l    A0,D3
000039D2  2408      6659          move.l    A0,D2
                    6660   doprint_6:
000039D4  206E 000C 6661          move.l    12(A6),A0
000039D8  1010      6662          move.b    (A0),D0
000039DA  4880      6663          ext.w     D0
000039DC  48C0      6664          ext.l     D0
000039DE  0C80 0000 6665          cmp.l     #43,D0
000039E2  002B      
000039E4  6730      6666          beq.s     doprint_12
000039E6  6E18      6667          bgt.s     doprint_15
000039E8  0C80 0000 6668          cmp.l     #35,D0
000039EC  0023      
000039EE  6700 003E 6669          beq       doprint_14
000039F2  6E00 0046 6670          bgt       doprint_9
000039F6  0C80 0000 6671          cmp.l     #32,D0
000039FA  0020      
000039FC  6724      6672          beq.s     doprint_13
000039FE  603A      6673          bra.s     doprint_9
                    6674   doprint_15:
00003A00  0C80 0000 6675          cmp.l     #45,D0
00003A04  002D      
00003A06  6702      6676          beq.s     doprint_11
00003A08  6030      6677          bra.s     doprint_9
                    6678   doprint_11:
00003A0A  1D7C 0001 6679          move.b    #1,-51(A6)
00003A0E  FFCD      
00003A10  52AE 000C 6680          addq.l    #1,12(A6)
00003A14  6026      6681          bra.s     doprint_7
                    6682   doprint_12:
00003A16  1D7C 0001 6683          move.b    #1,-50(A6)
00003A1A  FFCE      
00003A1C  52AE 000C 6684          addq.l    #1,12(A6)
00003A20  601A      6685          bra.s     doprint_7
                    6686   doprint_13:
00003A22  1D7C 0001 6687          move.b    #1,-49(A6)
00003A26  FFCF      
00003A28  52AE 000C 6688          addq.l    #1,12(A6)
00003A2C  600E      6689          bra.s     doprint_7
                    6690   doprint_14:
00003A2E  1D7C 0001 6691          move.b    #1,-48(A6)
00003A32  FFD0      
00003A34  52AE 000C 6692          addq.l    #1,12(A6)
00003A38  6002      6693          bra.s     doprint_7
                    6694   doprint_9:
00003A3A  6002      6695          bra.s     doprint_8
                    6696   doprint_7:
00003A3C  6096      6697          bra       doprint_6
                    6698   doprint_8:
00003A3E  206E 000C 6699          move.l    12(A6),A0
00003A42  1010      6700          move.b    (A0),D0
00003A44  0C00 0030 6701          cmp.b     #48,D0
00003A48  660A      6702          bne.s     doprint_16
00003A4A  52AE 000C 6703          addq.l    #1,12(A6)
00003A4E  1D7C 0001 6704          move.b    #1,-46(A6)
00003A52  FFD2      
                    6705   doprint_16:
00003A54  486E 0010 6706          pea       16(A6)
00003A58  486E 000C 6707          pea       12(A6)
00003A5C  4EB8 38E6 6708          jsr       @doprint_getval
00003A60  504F      6709          addq.w    #8,A7
00003A62  2A40      6710          move.l    D0,A5
00003A64  206E 000C 6711          move.l    12(A6),A0
00003A68  1010      6712          move.b    (A0),D0
00003A6A  0C00 002E 6713          cmp.b     #46,D0
00003A6E  6614      6714          bne.s     doprint_18
00003A70  52AE 000C 6715          addq.l    #1,12(A6)
00003A74  486E 0010 6716          pea       16(A6)
00003A78  486E 000C 6717          pea       12(A6)
00003A7C  4EB8 38E6 6718          jsr       @doprint_getval
00003A80  504F      6719          addq.w    #8,A7
00003A82  2A00      6720          move.l    D0,D5
                    6721   doprint_18:
00003A84  206E 000C 6722          move.l    12(A6),A0
00003A88  1010      6723          move.b    (A0),D0
00003A8A  0C00 006C 6724          cmp.b     #108,D0
00003A8E  660A      6725          bne.s     doprint_20
00003A90  52AE 000C 6726          addq.l    #1,12(A6)
00003A94  1D7C 0001 6727          move.b    #1,-45(A6)
00003A98  FFD3      
                    6728   doprint_20:
00003A9A  206E 000C 6729          move.l    12(A6),A0
00003A9E  1010      6730          move.b    (A0),D0
00003AA0  4880      6731          ext.w     D0
00003AA2  48C0      6732          ext.l     D0
00003AA4  0C80 0000 6733          cmp.l     #111,D0
00003AA8  006F      
00003AAA  6700 00D8 6734          beq       doprint_27
00003AAE  6E34      6735          bgt.s     doprint_33
00003AB0  0C80 0000 6736          cmp.l     #100,D0
00003AB4  0064      
00003AB6  6700 0054 6737          beq       doprint_24
00003ABA  6E1C      6738          bgt.s     doprint_34
00003ABC  0C80 0000 6739          cmp.l     #99,D0
00003AC0  0063      
00003AC2  6700 0130 6740          beq       doprint_30
00003AC6  6E00 0174 6741          bgt       doprint_22
00003ACA  0C80 0000 6742          cmp.l     #88,D0
00003ACE  0058      
00003AD0  6700 00EA 6743          beq       doprint_28
00003AD4  6000 0166 6744          bra       doprint_22
                    6745   doprint_34:
00003AD8  0C80 0000 6746          cmp.l     #105,D0
00003ADC  0069      
00003ADE  672C      6747          beq.s     doprint_24
00003AE0  6000 015A 6748          bra       doprint_22
                    6749   doprint_33:
00003AE4  0C80 0000 6750          cmp.l     #117,D0
00003AE8  0075      
00003AEA  6700 0060 6751          beq       doprint_26
00003AEE  6E0E      6752          bgt.s     doprint_35
00003AF0  0C80 0000 6753          cmp.l     #115,D0
00003AF4  0073      
00003AF6  6700 0124 6754          beq       doprint_31
00003AFA  6000 0140 6755          bra       doprint_22
                    6756   doprint_35:
00003AFE  0C80 0000 6757          cmp.l     #120,D0
00003B02  0078      
00003B04  6700 00B6 6758          beq       doprint_28
00003B08  6000 0132 6759          bra       doprint_22
                    6760   doprint_24:
00003B0C  4A2E FFD3 6761          tst.b     -45(A6)
00003B10  671C      6762          beq.s     doprint_36
00003B12  4878 000A 6763          pea       10
00003B16  2F03      6764          move.l    D3,-(A7)
00003B18  206E 0010 6765          move.l    16(A6),A0
00003B1C  58AE 0010 6766          addq.l    #4,16(A6)
00003B20  2F10      6767          move.l    (A0),-(A7)
00003B22  4EB9 0000 6768          jsr       _ltoa
00003B26  4004      
00003B28  DEFC 000C 6769          add.w     #12,A7
00003B2C  601A      6770          bra.s     doprint_37
                    6771   doprint_36:
00003B2E  4878 000A 6772          pea       10
00003B32  2F03      6773          move.l    D3,-(A7)
00003B34  206E 0010 6774          move.l    16(A6),A0
00003B38  58AE 0010 6775          addq.l    #4,16(A6)
00003B3C  2F10      6776          move.l    (A0),-(A7)
00003B3E  4EB9 0000 6777          jsr       _ltoa
00003B42  4004      
00003B44  DEFC 000C 6778          add.w     #12,A7
                    6779   doprint_37:
00003B48  6000 0100 6780          bra       doprint_23
                    6781   doprint_26:
00003B4C  4A2E FFD3 6782          tst.b     -45(A6)
00003B50  6718      6783          beq.s     doprint_38
00003B52  4878 000A 6784          pea       10
00003B56  2F03      6785          move.l    D3,-(A7)
00003B58  206E 0010 6786          move.l    16(A6),A0
00003B5C  58AE 0010 6787          addq.l    #4,16(A6)
00003B60  2F10      6788          move.l    (A0),-(A7)
00003B62  4E94      6789          jsr       (A4)
00003B64  DEFC 000C 6790          add.w     #12,A7
00003B68  6016      6791          bra.s     doprint_39
                    6792   doprint_38:
00003B6A  4878 000A 6793          pea       10
00003B6E  2F03      6794          move.l    D3,-(A7)
00003B70  206E 0010 6795          move.l    16(A6),A0
00003B74  58AE 0010 6796          addq.l    #4,16(A6)
00003B78  2F10      6797          move.l    (A0),-(A7)
00003B7A  4E94      6798          jsr       (A4)
00003B7C  DEFC 000C 6799          add.w     #12,A7
                    6800   doprint_39:
00003B80  6000 00C8 6801          bra       doprint_23
                    6802   doprint_27:
00003B84  4A2E FFD3 6803          tst.b     -45(A6)
00003B88  6718      6804          beq.s     doprint_40
00003B8A  4878 0008 6805          pea       8
00003B8E  2F03      6806          move.l    D3,-(A7)
00003B90  206E 0010 6807          move.l    16(A6),A0
00003B94  58AE 0010 6808          addq.l    #4,16(A6)
00003B98  2F10      6809          move.l    (A0),-(A7)
00003B9A  4E94      6810          jsr       (A4)
00003B9C  DEFC 000C 6811          add.w     #12,A7
00003BA0  6016      6812          bra.s     doprint_41
                    6813   doprint_40:
00003BA2  4878 0008 6814          pea       8
00003BA6  2F03      6815          move.l    D3,-(A7)
00003BA8  206E 0010 6816          move.l    16(A6),A0
00003BAC  58AE 0010 6817          addq.l    #4,16(A6)
00003BB0  2F10      6818          move.l    (A0),-(A7)
00003BB2  4E94      6819          jsr       (A4)
00003BB4  DEFC 000C 6820          add.w     #12,A7
                    6821   doprint_41:
00003BB8  6000 0090 6822          bra       doprint_23
                    6823   doprint_28:
00003BBC  4A2E FFD3 6824          tst.b     -45(A6)
00003BC0  6718      6825          beq.s     doprint_42
00003BC2  4878 0010 6826          pea       16
00003BC6  2F03      6827          move.l    D3,-(A7)
00003BC8  206E 0010 6828          move.l    16(A6),A0
00003BCC  58AE 0010 6829          addq.l    #4,16(A6)
00003BD0  2F10      6830          move.l    (A0),-(A7)
00003BD2  4E94      6831          jsr       (A4)
00003BD4  DEFC 000C 6832          add.w     #12,A7
00003BD8  6016      6833          bra.s     doprint_43
                    6834   doprint_42:
00003BDA  4878 0010 6835          pea       16
00003BDE  2F03      6836          move.l    D3,-(A7)
00003BE0  206E 0010 6837          move.l    16(A6),A0
00003BE4  58AE 0010 6838          addq.l    #4,16(A6)
00003BE8  2F10      6839          move.l    (A0),-(A7)
00003BEA  4E94      6840          jsr       (A4)
00003BEC  DEFC 000C 6841          add.w     #12,A7
                    6842   doprint_43:
00003BF0  6000 0058 6843          bra       doprint_23
                    6844   doprint_30:
00003BF4  206E 0010 6845          move.l    16(A6),A0
00003BF8  58AE 0010 6846          addq.l    #4,16(A6)
00003BFC  2010      6847          move.l    (A0),D0
00003BFE  2042      6848          move.l    D2,A0
00003C00  5282      6849          addq.l    #1,D2
00003C02  1080      6850          move.b    D0,(A0)
00003C04  2042      6851          move.l    D2,A0
00003C06  4210      6852          clr.b     (A0)
00003C08  200D      6853          move.l    A5,D0
00003C0A  6704      6854          beq.s     doprint_44
00003C0C  200D      6855          move.l    A5,D0
00003C0E  6006      6856          bra.s     doprint_45
                    6857   doprint_44:
00003C10  7001      6858          moveq     #1,D0
00003C12  4880      6859          ext.w     D0
00003C14  48C0      6860          ext.l     D0
                    6861   doprint_45:
00003C16  2A00      6862          move.l    D0,D5
00003C18  6000 0030 6863          bra       doprint_23
                    6864   doprint_31:
00003C1C  206E 0010 6865          move.l    16(A6),A0
00003C20  58AE 0010 6866          addq.l    #4,16(A6)
00003C24  2610      6867          move.l    (A0),D3
00003C26  0C85 FFFF 6868          cmp.l     #-1,D5
00003C2A  FFFF      
00003C2C  660C      6869          bne.s     doprint_46
00003C2E  2F03      6870          move.l    D3,-(A7)
00003C30  4EB9 0000 6871          jsr       _strlen
00003C34  40EA      
00003C36  584F      6872          addq.w    #4,A7
00003C38  2A00      6873          move.l    D0,D5
                    6874   doprint_46:
00003C3A  600E      6875          bra.s     doprint_23
                    6876   doprint_22:
00003C3C  206E 000C 6877          move.l    12(A6),A0
00003C40  2242      6878          move.l    D2,A1
00003C42  5282      6879          addq.l    #1,D2
00003C44  1290      6880          move.b    (A0),(A1)
00003C46  2042      6881          move.l    D2,A0
00003C48  4210      6882          clr.b     (A0)
                    6883   doprint_23:
00003C4A  2F03      6884          move.l    D3,-(A7)
00003C4C  4EB9 0000 6885          jsr       _strlen
00003C50  40EA      
00003C52  584F      6886          addq.w    #4,A7
00003C54  1800      6887          move.b    D0,D4
00003C56  206E 000C 6888          move.l    12(A6),A0
00003C5A  1010      6889          move.b    (A0),D0
00003C5C  0C00 0073 6890          cmp.b     #115,D0
00003C60  661C      6891          bne.s     doprint_48
00003C62  0C85 0000 6892          cmp.l     #0,D5
00003C66  0000      
00003C68  6D14      6893          blt.s     doprint_48
00003C6A  4884      6894          ext.w     D4
00003C6C  48C4      6895          ext.l     D4
00003C6E  B885      6896          cmp.l     D5,D4
00003C70  6F04      6897          ble.s     doprint_50
00003C72  2005      6898          move.l    D5,D0
00003C74  6006      6899          bra.s     doprint_51
                    6900   doprint_50:
00003C76  1004      6901          move.b    D4,D0
00003C78  4880      6902          ext.w     D0
00003C7A  48C0      6903          ext.l     D0
                    6904   doprint_51:
00003C7C  1800      6905          move.b    D0,D4
                    6906   doprint_48:
00003C7E  206E 000C 6907          move.l    12(A6),A0
00003C82  1010      6908          move.b    (A0),D0
00003C84  0C00 0058 6909          cmp.b     #88,D0
00003C88  6600 0026 6910          bne       doprint_56
00003C8C  41EE FFDC 6911          lea       -36(A6),A0
00003C90  2408      6912          move.l    A0,D2
                    6913   doprint_54:
00003C92  2042      6914          move.l    D2,A0
00003C94  4A10      6915          tst.b     (A0)
00003C96  6718      6916          beq.s     doprint_56
00003C98  2042      6917          move.l    D2,A0
00003C9A  1210      6918          move.b    (A0),D1
00003C9C  4881      6919          ext.w     D1
00003C9E  48C1      6920          ext.l     D1
00003CA0  2F01      6921          move.l    D1,-(A7)
00003CA2  4EB8 3798 6922          jsr       _toupper
00003CA6  584F      6923          addq.w    #4,A7
00003CA8  2042      6924          move.l    D2,A0
00003CAA  1080      6925          move.b    D0,(A0)
00003CAC  5282      6926          addq.l    #1,D2
00003CAE  60E2      6927          bra       doprint_54
                    6928   doprint_56:
00003CB0  7E00      6929          moveq     #0,D7
00003CB2  41EE FFD4 6930          lea       -44(A6),A0
00003CB6  2408      6931          move.l    A0,D2
00003CB8  206E 000C 6932          move.l    12(A6),A0
00003CBC  1010      6933          move.b    (A0),D0
00003CBE  0C00 0064 6934          cmp.b     #100,D0
00003CC2  670E      6935          beq.s     doprint_59
00003CC4  206E 000C 6936          move.l    12(A6),A0
00003CC8  1010      6937          move.b    (A0),D0
00003CCA  0C00 0069 6938          cmp.b     #105,D0
00003CCE  6600 0068 6939          bne       doprint_65
                    6940   doprint_59:
00003CD2  102E FFCE 6941          move.b    -50(A6),D0
00003CD6  4880      6942          ext.w     D0
00003CD8  48C0      6943          ext.l     D0
00003CDA  4A80      6944          tst.l     D0
00003CDC  660C      6945          bne.s     doprint_62
00003CDE  2043      6946          move.l    D3,A0
00003CE0  1010      6947          move.b    (A0),D0
00003CE2  0C00 002D 6948          cmp.b     #45,D0
00003CE6  6600 0028 6949          bne       doprint_60
                    6950   doprint_62:
00003CEA  2043      6951          move.l    D3,A0
00003CEC  1010      6952          move.b    (A0),D0
00003CEE  0C00 002D 6953          cmp.b     #45,D0
00003CF2  660E      6954          bne.s     doprint_63
00003CF4  2043      6955          move.l    D3,A0
00003CF6  5283      6956          addq.l    #1,D3
00003CF8  2242      6957          move.l    D2,A1
00003CFA  5282      6958          addq.l    #1,D2
00003CFC  1290      6959          move.b    (A0),(A1)
00003CFE  5304      6960          subq.b    #1,D4
00003D00  6008      6961          bra.s     doprint_64
                    6962   doprint_63:
00003D02  2042      6963          move.l    D2,A0
00003D04  5282      6964          addq.l    #1,D2
00003D06  10BC 002B 6965          move.b    #43,(A0)
                    6966   doprint_64:
00003D0A  5287      6967          addq.l    #1,D7
00003D0C  6000 002A 6968          bra       doprint_65
                    6969   doprint_60:
00003D10  4A2E FFCF 6970          tst.b     -49(A6)
00003D14  6722      6971          beq.s     doprint_65
00003D16  2043      6972          move.l    D3,A0
00003D18  1010      6973          move.b    (A0),D0
00003D1A  0C00 002D 6974          cmp.b     #45,D0
00003D1E  660E      6975          bne.s     doprint_67
00003D20  2043      6976          move.l    D3,A0
00003D22  5283      6977          addq.l    #1,D3
00003D24  2242      6978          move.l    D2,A1
00003D26  5282      6979          addq.l    #1,D2
00003D28  1290      6980          move.b    (A0),(A1)
00003D2A  5304      6981          subq.b    #1,D4
00003D2C  6008      6982          bra.s     doprint_68
                    6983   doprint_67:
00003D2E  2042      6984          move.l    D2,A0
00003D30  5282      6985          addq.l    #1,D2
00003D32  10BC 0020 6986          move.b    #32,(A0)
                    6987   doprint_68:
00003D36  5287      6988          addq.l    #1,D7
                    6989   doprint_65:
00003D38  4A2E FFD0 6990          tst.b     -48(A6)
00003D3C  6700 005A 6991          beq       doprint_77
00003D40  206E 000C 6992          move.l    12(A6),A0
00003D44  1010      6993          move.b    (A0),D0
00003D46  4880      6994          ext.w     D0
00003D48  48C0      6995          ext.l     D0
00003D4A  0C80 0000 6996          cmp.l     #111,D0
00003D4E  006F      
00003D50  671A      6997          beq.s     doprint_73
00003D52  6E0C      6998          bgt.s     doprint_76
00003D54  0C80 0000 6999          cmp.l     #88,D0
00003D58  0058      
00003D5A  6710      7000          beq.s     doprint_73
00003D5C  6000 003A 7001          bra       doprint_77
                    7002   doprint_76:
00003D60  0C80 0000 7003          cmp.l     #120,D0
00003D64  0078      
00003D66  6704      7004          beq.s     doprint_73
00003D68  6000 002E 7005          bra       doprint_77
                    7006   doprint_73:
00003D6C  2042      7007          move.l    D2,A0
00003D6E  5282      7008          addq.l    #1,D2
00003D70  10BC 0030 7009          move.b    #48,(A0)
00003D74  5287      7010          addq.l    #1,D7
00003D76  206E 000C 7011          move.l    12(A6),A0
00003D7A  1010      7012          move.b    (A0),D0
00003D7C  0C00 0078 7013          cmp.b     #120,D0
00003D80  670C      7014          beq.s     doprint_79
00003D82  206E 000C 7015          move.l    12(A6),A0
00003D86  1010      7016          move.b    (A0),D0
00003D88  0C00 0058 7017          cmp.b     #88,D0
00003D8C  660A      7018          bne.s     doprint_77
                    7019   doprint_79:
00003D8E  2042      7020          move.l    D2,A0
00003D90  5282      7021          addq.l    #1,D2
00003D92  10BC 0078 7022          move.b    #120,(A0)
00003D96  5287      7023          addq.l    #1,D7
                    7024   doprint_77:
00003D98  2042      7025          move.l    D2,A0
00003D9A  4210      7026          clr.b     (A0)
00003D9C  206E 000C 7027          move.l    12(A6),A0
00003DA0  1010      7028          move.b    (A0),D0
00003DA2  4880      7029          ext.w     D0
00003DA4  48C0      7030          ext.l     D0
00003DA6  0C80 0000 7031          cmp.l     #105,D0
00003DAA  0069      
00003DAC  6700 0076 7032          beq       doprint_82
00003DB0  6E42      7033          bgt.s     doprint_93
00003DB2  0C80 0000 7034          cmp.l     #99,D0
00003DB6  0063      
00003DB8  6700 0084 7035          beq       doprint_96
00003DBC  6E1C      7036          bgt.s     doprint_94
00003DBE  0C80 0000 7037          cmp.l     #88,D0
00003DC2  0058      
00003DC4  6700 005E 7038          beq       doprint_82
00003DC8  6E00 0184 7039          bgt       doprint_80
00003DCC  0C80 0000 7040          cmp.l     #69,D0
00003DD0  0045      
00003DD2  6700 0050 7041          beq       doprint_82
00003DD6  6000 0176 7042          bra       doprint_80
                    7043   doprint_94:
00003DDA  0C80 0000 7044          cmp.l     #101,D0
00003DDE  0065      
00003DE0  6700 0042 7045          beq       doprint_82
00003DE4  6E00 0168 7046          bgt       doprint_80
00003DE8  0C80 0000 7047          cmp.l     #100,D0
00003DEC  0064      
00003DEE  6734      7048          beq.s     doprint_82
00003DF0  6000 015C 7049          bra       doprint_80
                    7050   doprint_93:
00003DF4  0C80 0000 7051          cmp.l     #117,D0
00003DF8  0075      
00003DFA  6728      7052          beq.s     doprint_82
00003DFC  6E1A      7053          bgt.s     doprint_95
00003DFE  0C80 0000 7054          cmp.l     #115,D0
00003E02  0073      
00003E04  6700 0038 7055          beq       doprint_96
00003E08  6E00 0144 7056          bgt       doprint_80
00003E0C  0C80 0000 7057          cmp.l     #111,D0
00003E10  006F      
00003E12  6710      7058          beq.s     doprint_82
00003E14  6000 0138 7059          bra       doprint_80
                    7060   doprint_95:
00003E18  0C80 0000 7061          cmp.l     #120,D0
00003E1C  0078      
00003E1E  6704      7062          beq.s     doprint_82
00003E20  6000 012C 7063          bra       doprint_80
                    7064   doprint_82:
00003E24  4A2E FFD2 7065          tst.b     -46(A6)
00003E28  6714      7066          beq.s     doprint_96
00003E2A  4A2E FFCD 7067          tst.b     -51(A6)
00003E2E  660E      7068          bne.s     doprint_96
00003E30  200D      7069          move.l    A5,D0
00003E32  9087      7070          sub.l     D7,D0
00003E34  4884      7071          ext.w     D4
00003E36  48C4      7072          ext.l     D4
00003E38  9084      7073          sub.l     D4,D0
00003E3A  2D40 FFFC 7074          move.l    D0,-4(A6)
                    7075   doprint_96:
00003E3E  202E FFFC 7076          move.l    -4(A6),D0
00003E42  0C80 0000 7077          cmp.l     #0,D0
00003E46  0000      
00003E48  6C04      7078          bge.s     doprint_98
00003E4A  42AE FFFC 7079          clr.l     -4(A6)
                    7080   doprint_98:
00003E4E  4A2E FFCD 7081          tst.b     -51(A6)
00003E52  6600 0030 7082          bne       doprint_104
00003E56  1004      7083          move.b    D4,D0
00003E58  4880      7084          ext.w     D0
00003E5A  48C0      7085          ext.l     D0
00003E5C  D0AE FFFC 7086          add.l     -4(A6),D0
00003E60  D087      7087          add.l     D7,D0
00003E62  1D40 FFD1 7088          move.b    D0,-47(A6)
                    7089   doprint_102:
00003E66  102E FFD1 7090          move.b    -47(A6),D0
00003E6A  4880      7091          ext.w     D0
00003E6C  48C0      7092          ext.l     D0
00003E6E  220D      7093          move.l    A5,D1
00003E70  534D      7094          subq.w    #1,A5
00003E72  B081      7095          cmp.l     D1,D0
00003E74  6C0E      7096          bge.s     doprint_104
00003E76  4878 0020 7097          pea       32
00003E7A  2F0A      7098          move.l    A2,-(A7)
00003E7C  4E93      7099          jsr       (A3)
00003E7E  504F      7100          addq.w    #8,A7
00003E80  5286      7101          addq.l    #1,D6
00003E82  60E2      7102          bra       doprint_102
                    7103   doprint_104:
00003E84  41EE FFD4 7104          lea       -44(A6),A0
00003E88  2408      7105          move.l    A0,D2
                    7106   doprint_105:
00003E8A  2042      7107          move.l    D2,A0
00003E8C  4A10      7108          tst.b     (A0)
00003E8E  6716      7109          beq.s     doprint_107
00003E90  2042      7110          move.l    D2,A0
00003E92  5282      7111          addq.l    #1,D2
00003E94  1210      7112          move.b    (A0),D1
00003E96  4881      7113          ext.w     D1
00003E98  48C1      7114          ext.l     D1
00003E9A  2F01      7115          move.l    D1,-(A7)
00003E9C  2F0A      7116          move.l    A2,-(A7)
00003E9E  4E93      7117          jsr       (A3)
00003EA0  504F      7118          addq.w    #8,A7
00003EA2  5286      7119          addq.l    #1,D6
00003EA4  60E4      7120          bra       doprint_105
                    7121   doprint_107:
00003EA6  202E FFFC 7122          move.l    -4(A6),D0
00003EAA  1D40 FFD1 7123          move.b    D0,-47(A6)
                    7124   doprint_108:
00003EAE  102E FFD1 7125          move.b    -47(A6),D0
00003EB2  532E FFD1 7126          subq.b    #1,-47(A6)
00003EB6  4A00      7127          tst.b     D0
00003EB8  670E      7128          beq.s     doprint_110
00003EBA  4878 0030 7129          pea       48
00003EBE  2F0A      7130          move.l    A2,-(A7)
00003EC0  4E93      7131          jsr       (A3)
00003EC2  504F      7132          addq.w    #8,A7
00003EC4  5286      7133          addq.l    #1,D6
00003EC6  60E6      7134          bra       doprint_108
                    7135   doprint_110:
00003EC8  2043      7136          move.l    D3,A0
00003ECA  4A10      7137          tst.b     (A0)
00003ECC  6700 0048 7138          beq       doprint_113
00003ED0  206E 000C 7139          move.l    12(A6),A0
00003ED4  1010      7140          move.b    (A0),D0
00003ED6  4880      7141          ext.w     D0
00003ED8  48C0      7142          ext.l     D0
00003EDA  0C80 0000 7143          cmp.l     #115,D0
00003EDE  0073      
00003EE0  670C      7144          beq.s     doprint_116
00003EE2  6E18      7145          bgt.s     doprint_119
00003EE4  0C80 0000 7146          cmp.l     #99,D0
00003EE8  0063      
00003EEA  6702      7147          beq.s     doprint_116
00003EEC  600E      7148          bra.s     doprint_119
                    7149   doprint_116:
00003EEE  2005      7150          move.l    D5,D0
00003EF0  5385      7151          subq.l    #1,D5
00003EF2  0C80 0000 7152          cmp.l     #0,D0
00003EF6  0000      
00003EF8  6E02      7153          bgt.s     doprint_119
00003EFA  6016      7154          bra.s     doprint_115
                    7155   doprint_119:
00003EFC  2043      7156          move.l    D3,A0
00003EFE  5283      7157          addq.l    #1,D3
00003F00  1210      7158          move.b    (A0),D1
00003F02  4881      7159          ext.w     D1
00003F04  48C1      7160          ext.l     D1
00003F06  2F01      7161          move.l    D1,-(A7)
00003F08  2F0A      7162          move.l    A2,-(A7)
00003F0A  4E93      7163          jsr       (A3)
00003F0C  504F      7164          addq.w    #8,A7
00003F0E  5286      7165          addq.l    #1,D6
00003F10  6002      7166          bra.s     doprint_112
                    7167   doprint_115:
00003F12  6002      7168          bra.s     doprint_113
                    7169   doprint_112:
00003F14  60B2      7170          bra       doprint_110
                    7171   doprint_113:
00003F16  4A2E FFCD 7172          tst.b     -51(A6)
00003F1A  6700 0030 7173          beq       doprint_125
00003F1E  1004      7174          move.b    D4,D0
00003F20  4880      7175          ext.w     D0
00003F22  48C0      7176          ext.l     D0
00003F24  D0AE FFFC 7177          add.l     -4(A6),D0
00003F28  D087      7178          add.l     D7,D0
00003F2A  1D40 FFD1 7179          move.b    D0,-47(A6)
                    7180   doprint_123:
00003F2E  102E FFD1 7181          move.b    -47(A6),D0
00003F32  4880      7182          ext.w     D0
00003F34  48C0      7183          ext.l     D0
00003F36  220D      7184          move.l    A5,D1
00003F38  534D      7185          subq.w    #1,A5
00003F3A  B081      7186          cmp.l     D1,D0
00003F3C  6C0E      7187          bge.s     doprint_125
00003F3E  4878 0020 7188          pea       32
00003F42  2F0A      7189          move.l    A2,-(A7)
00003F44  4E93      7190          jsr       (A3)
00003F46  504F      7191          addq.w    #8,A7
00003F48  5386      7192          subq.l    #1,D6
00003F4A  60E2      7193          bra       doprint_123
                    7194   doprint_125:
00003F4C  6014      7195          bra.s     doprint_81
                    7196   doprint_80:
00003F4E  206E 000C 7197          move.l    12(A6),A0
00003F52  1210      7198          move.b    (A0),D1
00003F54  4881      7199          ext.w     D1
00003F56  48C1      7200          ext.l     D1
00003F58  2F01      7201          move.l    D1,-(A7)
00003F5A  2F0A      7202          move.l    A2,-(A7)
00003F5C  4E93      7203          jsr       (A3)
00003F5E  504F      7204          addq.w    #8,A7
00003F60  5286      7205          addq.l    #1,D6
                    7206   doprint_81:
00003F62  52AE 000C 7207          addq.l    #1,12(A6)
                    7208   doprint_2:
00003F66  6000 FA10 7209          bra       doprint_1
                    7210   doprint_3:
00003F6A  4A92      7211          tst.l     (A2)
00003F6C  6710      7212          beq.s     doprint_126
00003F6E  4201      7213          clr.b     D1
00003F70  C2BC 0000 7214          and.l     #255,D1
00003F74  00FF      
00003F76  2F01      7215          move.l    D1,-(A7)
00003F78  2F0A      7216          move.l    A2,-(A7)
00003F7A  4E93      7217          jsr       (A3)
00003F7C  504F      7218          addq.w    #8,A7
                    7219   doprint_126:
00003F7E  2006      7220          move.l    D6,D0
00003F80  4CDF 3CFC 7221          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003F84  4E5E      7222          unlk      A6
00003F86  4E75      7223          rts
                    7224   @itoa_convert:
00003F88  4E56 0000 7225          link      A6,#0
00003F8C  48E7 3C00 7226          movem.l   D2/D3/D4/D5,-(A7)
00003F90  242E 0008 7227          move.l    8(A6),D2
00003F94  262E 0010 7228          move.l    16(A6),D3
00003F98  2A2E 000C 7229          move.l    12(A6),D5
00003F9C  2F05      7230          move.l    D5,-(A7)
00003F9E  2F03      7231          move.l    D3,-(A7)
00003FA0  4EB8 362A 7232          jsr       ULDIV
00003FA4  202F 0004 7233          move.l    4(A7),D0
00003FA8  504F      7234          addq.w    #8,A7
00003FAA  2800      7235          move.l    D0,D4
00003FAC  BA83      7236          cmp.l     D3,D5
00003FAE  651C      7237          blo.s     @itoa_convert_1
00003FB0  2F03      7238          move.l    D3,-(A7)
00003FB2  2F05      7239          move.l    D5,-(A7)
00003FB4  2F03      7240          move.l    D3,-(A7)
00003FB6  4EB8 362A 7241          jsr       ULDIV
00003FBA  2217      7242          move.l    (A7),D1
00003FBC  504F      7243          addq.w    #8,A7
00003FBE  2F01      7244          move.l    D1,-(A7)
00003FC0  2F02      7245          move.l    D2,-(A7)
00003FC2  4EB8 3F88 7246          jsr       @itoa_convert
00003FC6  DEFC 000C 7247          add.w     #12,A7
00003FCA  2400      7248          move.l    D0,D2
                    7249   @itoa_convert_1:
00003FCC  0C84 0000 7250          cmp.l     #9,D4
00003FD0  0009      
00003FD2  6E0E      7251          bgt.s     @itoa_convert_3
00003FD4  2004      7252          move.l    D4,D0
00003FD6  7230      7253          moveq     #48,D1
00003FD8  C2BC 0000 7254          and.l     #255,D1
00003FDC  00FF      
00003FDE  D081      7255          add.l     D1,D0
00003FE0  6012      7256          bra.s     @itoa_convert_4
                    7257   @itoa_convert_3:
00003FE2  2004      7258          move.l    D4,D0
00003FE4  7261      7259          moveq     #97,D1
00003FE6  C2BC 0000 7260          and.l     #255,D1
00003FEA  00FF      
00003FEC  D081      7261          add.l     D1,D0
00003FEE  0480 0000 7262          sub.l     #10,D0
00003FF2  000A      
                    7263   @itoa_convert_4:
00003FF4  2042      7264          move.l    D2,A0
00003FF6  1080      7265          move.b    D0,(A0)
00003FF8  2002      7266          move.l    D2,D0
00003FFA  5280      7267          addq.l    #1,D0
00003FFC  4CDF 003C 7268          movem.l   (A7)+,D2/D3/D4/D5
00004000  4E5E      7269          unlk      A6
00004002  4E75      7270          rts
                    7271   _ltoa:
00004004  4E56 0000 7272          link      A6,#0
00004008  48E7 3C00 7273          movem.l   D2/D3/D4/D5,-(A7)
0000400C  242E 0008 7274          move.l    8(A6),D2
00004010  262E 000C 7275          move.l    12(A6),D3
00004014  2A2E 0010 7276          move.l    16(A6),D5
00004018  2803      7277          move.l    D3,D4
0000401A  0C85 0000 7278          cmp.l     #2,D5
0000401E  0002      
00004020  6D08      7279          blt.s     ltoa_3
00004022  0C85 0000 7280          cmp.l     #36,D5
00004026  0024      
00004028  6F06      7281          ble.s     ltoa_1
                    7282   ltoa_3:
0000402A  2003      7283          move.l    D3,D0
0000402C  6000 0052 7284          bra       ltoa_4
                    7285   ltoa_1:
00004030  0C85 0000 7286          cmp.l     #10,D5
00004034  000A      
00004036  6600 0032 7287          bne       ltoa_5
0000403A  0C82 0000 7288          cmp.l     #0,D2
0000403E  0000      
00004040  6C28      7289          bge.s     ltoa_5
00004042  2002      7290          move.l    D2,D0
00004044  4480      7291          neg.l     D0
00004046  2400      7292          move.l    D0,D2
00004048  0C82 0000 7293          cmp.l     #0,D2
0000404C  0000      
0000404E  6C12      7294          bge.s     ltoa_7
00004050  4879 0000 7295          pea       @itoa_1.L
00004054  4DD0      
00004056  2F03      7296          move.l    D3,-(A7)
00004058  4EB8 361A 7297          jsr       _strcpy
0000405C  504F      7298          addq.w    #8,A7
0000405E  2003      7299          move.l    D3,D0
00004060  601E      7300          bra.s     ltoa_4
                    7301   ltoa_7:
00004062  2044      7302          move.l    D4,A0
00004064  5284      7303          addq.l    #1,D4
00004066  10BC 002D 7304          move.b    #45,(A0)
                    7305   ltoa_5:
0000406A  2F05      7306          move.l    D5,-(A7)
0000406C  2F02      7307          move.l    D2,-(A7)
0000406E  2F04      7308          move.l    D4,-(A7)
00004070  4EB8 3F88 7309          jsr       @itoa_convert
00004074  DEFC 000C 7310          add.w     #12,A7
00004078  2800      7311          move.l    D0,D4
0000407A  2044      7312          move.l    D4,A0
0000407C  4210      7313          clr.b     (A0)
0000407E  2003      7314          move.l    D3,D0
                    7315   ltoa_4:
00004080  4CDF 003C 7316          movem.l   (A7)+,D2/D3/D4/D5
00004084  4E5E      7317          unlk      A6
00004086  4E75      7318          rts
                    7319   _ultoa:
00004088  4E56 0000 7320          link      A6,#0
0000408C  48E7 3800 7321          movem.l   D2/D3/D4,-(A7)
00004090  262E 0010 7322          move.l    16(A6),D3
00004094  282E 000C 7323          move.l    12(A6),D4
00004098  2404      7324          move.l    D4,D2
0000409A  0C83 0000 7325          cmp.l     #2,D3
0000409E  0002      
000040A0  6D08      7326          blt.s     ultoa_3
000040A2  0C83 0000 7327          cmp.l     #36,D3
000040A6  0024      
000040A8  6F04      7328          ble.s     ultoa_1
                    7329   ultoa_3:
000040AA  2004      7330          move.l    D4,D0
000040AC  6018      7331          bra.s     ultoa_4
                    7332   ultoa_1:
000040AE  2F03      7333          move.l    D3,-(A7)
000040B0  2F2E 0008 7334          move.l    8(A6),-(A7)
000040B4  2F02      7335          move.l    D2,-(A7)
000040B6  4EB8 3F88 7336          jsr       @itoa_convert
000040BA  DEFC 000C 7337          add.w     #12,A7
000040BE  2400      7338          move.l    D0,D2
000040C0  2042      7339          move.l    D2,A0
000040C2  4210      7340          clr.b     (A0)
000040C4  2004      7341          move.l    D4,D0
                    7342   ultoa_4:
000040C6  4CDF 001C 7343          movem.l   (A7)+,D2/D3/D4
000040CA  4E5E      7344          unlk      A6
000040CC  4E75      7345          rts
                    7346   _itoa:
000040CE  4E56 0000 7347          link      A6,#0
000040D2  2F2E 0010 7348          move.l    16(A6),-(A7)
000040D6  2F2E 000C 7349          move.l    12(A6),-(A7)
000040DA  2F2E 0008 7350          move.l    8(A6),-(A7)
000040DE  4EB8 4004 7351          jsr       _ltoa
000040E2  DEFC 000C 7352          add.w     #12,A7
000040E6  4E5E      7353          unlk      A6
000040E8  4E75      7354          rts
                    7355   _strlen:
000040EA  206F 0004 7356          move.l    (4,A7),A0
000040EE  2248      7357          move.l    A0,A1
                    7358   strlen_1:
000040F0  4A19      7359          tst.b     (A1)+
000040F2  66FC      7360          bne       strlen_1
000040F4  2009      7361          move.l    A1,D0
000040F6  9088      7362          sub.l     A0,D0
000040F8  5380      7363          subq.l    #1,D0
000040FA  4E75      7364          rts
                    7365          section   const
                    7366   
                    7367   @m68kde~1_1:
000040FC  0D0A 4475 7368          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004100  6D70 204D 
00004104  656D 6F72 
00004108  79        
00004109  2042 6C6F 7369          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000410D  636B 3A20 
00004111  3C45 5343 
00004115  3E20      
00004117  746F 2041 7370          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000411B  626F 7274 
0000411F  2C20 3C53 
00004123  50        
00004124  4143 453E 7371          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004128  2074 6F20 
0000412C  436F 6E74 
00004130  69        
00004131  6E75 6500 7372          dc.b      110,117,101,0
                    7373   @m68kde~1_2:
00004136  0D0A 456E 7374          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000413A  7465 7220 
0000413E  5374 6172 
00004142  74        
00004143  2041 6464 7375          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004147  7265 7373 
0000414B  3A20 00   
                    7376   @m68kde~1_3:
0000414E  0D0A 2530 7377          dc.b      13,10,37,48,56,120,32,0
00004152  3878 2000 
                    7378   @m68kde~1_4:
00004156  2530 3258 7379          dc.b      37,48,50,88,0
0000415A  00        
                    7380   @m68kde~1_5:
0000415C  2020 00   7381          dc.b      32,32,0
                    7382   @m68kde~1_6:
00004160  0D0A 00   7383          dc.b      13,10,0
                    7384   @m68kde~1_7:
00004164  0D0A 4669 7385          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004168  6C6C 204D 
0000416C  656D 6F72 
00004170  79        
00004171  2042 6C6F 7386          dc.b      32,66,108,111,99,107,0
00004175  636B 00   
                    7387   @m68kde~1_8:
00004178  0D0A 456E 7388          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000417C  7465 7220 
00004180  5374 6172 
00004184  74        
00004185  2041 6464 7389          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004189  7265 7373 
0000418D  3A20 00   
                    7390   @m68kde~1_9:
00004190  0D0A 456E 7391          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004194  7465 7220 
00004198  456E 6420 
0000419C  41        
0000419D  6464 7265 7392          dc.b      100,100,114,101,115,115,58,32,0
000041A1  7373 3A20 
000041A5  00        
                    7393   @m68kde~1_10:
000041A6  0D0A 456E 7394          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000041AA  7465 7220 
000041AE  4669 6C6C 
000041B2  20        
000041B3  4461 7461 7395          dc.b      68,97,116,97,58,32,0
000041B7  3A20 00   
                    7396   @m68kde~1_11:
000041BA  0D0A 4669 7397          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000041BE  6C6C 696E 
000041C2  6720 4164 
000041C6  64        
000041C7  7265 7373 7398          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000041CB  6573 205B 
000041CF  2425 3038 
000041D3  58        
000041D4  202D 2024 7399          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000041D8  2530 3858 
000041DC  5D20 7769 
000041E0  7468      
000041E2  2024 2530 7400          dc.b      32,36,37,48,50,88,0
000041E6  3258 00   
                    7401   @m68kde~1_12:
000041EA  0D0A 5573 7402          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000041EE  6520 4879 
000041F2  7065 7254 
000041F6  65        
000041F7  726D 696E 7403          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000041FB  616C 2074 
000041FF  6F20 5365 
00004203  6E64 2054 7404          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004207  6578 7420 
0000420B  4669 6C65 
0000420F  2028 2E68 7405          dc.b      32,40,46,104,101,120,41,13,10,0
00004213  6578 290D 
00004217  0A00      
                    7406   @m68kde~1_13:
0000421A  0D0A 4C6F 7407          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000421E  6164 2046 
00004222  6169 6C65 
00004226  64        
00004227  2061 7420 7408          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000422B  4164 6472 
0000422F  6573 7320 
00004233  3D        
00004234  205B 2425 7409          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004238  3038 585D 
0000423C  0D0A 00   
                    7410   @m68kde~1_14:
00004240  0D0A 5375 7411          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004244  6363 6573 
00004248  733A 2044 
0000424C  6F        
0000424D  776E 6C6F 7412          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004251  6164 6564 
00004255  2025 6420 
00004259  6279 7465 7413          dc.b      98,121,116,101,115,13,10,0
0000425D  730D 0A00 
                    7414   @m68kde~1_15:
00004262  0D0A 4578 7415          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004266  616D 696E 
0000426A  6520 616E 
0000426E  64        
0000426F  2043 6861 7416          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004273  6E67 6520 
00004277  4D65 6D6F 
0000427B  72        
0000427C  7900      7417          dc.b      121,0
                    7418   @m68kde~1_16:
0000427E  0D0A 3C45 7419          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004282  5343 3E20 
00004286  746F 2053 
0000428A  746F      
0000428C  702C 203C 7420          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004290  5350 4143 
00004294  453E 2074 
00004298  6F20      
0000429A  4164 7661 7421          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000429E  6E63 652C 
000042A2  2027 2D27 
000042A6  2074      
000042A8  6F20 476F 7422          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000042AC  2042 6163 
000042B0  6B2C 203C 
000042B4  4441      
000042B6  5441 3E20 7423          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000042BA  746F 2063 
000042BE  6861 6E67 
000042C2  65        
000042C3  00        7424          dc.b      0
                    7425   @m68kde~1_17:
000042C4  0D0A 456E 7426          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000042C8  7465 7220 
000042CC  4164 6472 
000042D0  65        
000042D1  7373 3A20 7427          dc.b      115,115,58,32,0
000042D5  00        
                    7428   @m68kde~1_18:
000042D6  0D0A 5B25 7429          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000042DA  3038 785D 
000042DE  203A 2025 
000042E2  3032 78   
000042E5  2020 00   7430          dc.b      32,32,0
                    7431   @m68kde~1_19:
000042E8  0D0A 5761 7432          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000042EC  726E 696E 
000042F0  6720 4368 
000042F4  61        
000042F5  6E67 6520 7433          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000042F9  4661 696C 
000042FD  6564 3A20 
00004301  57        
00004302  726F 7465 7434          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004306  205B 2530 
0000430A  3278 5D2C 
0000430E  20        
0000430F  5265 6164 7435          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004313  205B 2530 
00004317  3278 5D00 
                    7436   @m68kde~1_20:
0000431C  2425 3038 7437          dc.b      36,37,48,56,88,32,32,0
00004320  5820 2000 
                    7438   @m68kde~1_21:
00004324  2530 3258 7439          dc.b      37,48,50,88,0
00004328  00        
                    7440   @m68kde~1_22:
0000432A  2000      7441          dc.b      32,0
                    7442   @m68kde~1_23:
0000432C  2020 00   7443          dc.b      32,32,0
                    7444   @m68kde~1_24:
00004330  2E00      7445          dc.b      46,0
                    7446   @m68kde~1_25:
00004332  2563 00   7447          dc.b      37,99,0
                    7448   @m68kde~1_26:
00004336  00        7449          dc.b      0
                    7450   @m68kde~1_27:
00004338  0D0A 0D0A 7451          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000433C  2044 3020 
00004340  3D20 2425 
00004344  3038 58   
00004347  2020 4130 7452          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000434B  203D 2024 
0000434F  2530 3858 
00004353  00        
                    7453   @m68kde~1_28:
00004354  0D0A 2044 7454          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004358  3120 3D20 
0000435C  2425 3038 
00004360  5820 20   
00004363  4131 203D 7455          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004367  2024 2530 
0000436B  3858 00   
                    7456   @m68kde~1_29:
0000436E  0D0A 2044 7457          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004372  3220 3D20 
00004376  2425 3038 
0000437A  5820 20   
0000437D  4132 203D 7458          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004381  2024 2530 
00004385  3858 00   
                    7459   @m68kde~1_30:
00004388  0D0A 2044 7460          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000438C  3320 3D20 
00004390  2425 3038 
00004394  5820 20   
00004397  4133 203D 7461          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000439B  2024 2530 
0000439F  3858 00   
                    7462   @m68kde~1_31:
000043A2  0D0A 2044 7463          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000043A6  3420 3D20 
000043AA  2425 3038 
000043AE  5820 20   
000043B1  4134 203D 7464          dc.b      65,52,32,61,32,36,37,48,56,88,0
000043B5  2024 2530 
000043B9  3858 00   
                    7465   @m68kde~1_32:
000043BC  0D0A 2044 7466          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000043C0  3520 3D20 
000043C4  2425 3038 
000043C8  5820 20   
000043CB  4135 203D 7467          dc.b      65,53,32,61,32,36,37,48,56,88,0
000043CF  2024 2530 
000043D3  3858 00   
                    7468   @m68kde~1_33:
000043D6  0D0A 2044 7469          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000043DA  3620 3D20 
000043DE  2425 3038 
000043E2  5820 20   
000043E5  4136 203D 7470          dc.b      65,54,32,61,32,36,37,48,56,88,0
000043E9  2024 2530 
000043ED  3858 00   
                    7471   @m68kde~1_34:
000043F0  0D0A 2044 7472          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000043F4  3720 3D20 
000043F8  2425 3038 
000043FC  5820 20   
000043FF  4137 203D 7473          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004403  2024 2530 
00004407  3858 00   
                    7474   @m68kde~1_35:
0000440A  0D0A 0D0A 7475          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000440E  5553 5020 
00004412  3D20 2425 
00004416  3038 58   
00004419  2020 2841 7476          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
0000441D  3729 2055 
00004421  7365 7220 
00004425  5350      
00004427  00        7477          dc.b      0
                    7478   @m68kde~1_36:
00004428  0D0A 5353 7479          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000442C  5020 3D20 
00004430  2425 3038 
00004434  5820 20   
00004437  2841 3729 7480          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000443B  2053 7570 
0000443F  6572 7669 
00004443  73        
00004444  6F72 2053 7481          dc.b      111,114,32,83,80,0
00004448  5000      
                    7482   @m68kde~1_37:
0000444A  0D0A 2053 7483          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000444E  5220 3D20 
00004452  2425 3034 
00004456  5820 20   
00004459  2000      7484          dc.b      32,0
                    7485   @m68kde~1_38:
0000445C  2020 205B 7486          dc.b      32,32,32,91,0
00004460  00        
                    7487   @m68kde~1_39:
00004462  0D0A 2050 7488          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004466  4320 3D20 
0000446A  2425 3038 
0000446E  5820 20   
00004471  00        7489          dc.b      0
                    7490   @m68kde~1_40:
00004472  5B40 2042 7491          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004476  5245 414B 
0000447A  504F 494E 
0000447E  545D 00   
                    7492   @m68kde~1_41:
00004482  0D0A 00   7493          dc.b      13,10,0
                    7494   @m68kde~1_42:
00004486  0D0A 5750 7495          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000448A  2564 203D 
0000448E  2025 7300 
                    7496   @m68kde~1_43:
00004492  0D0A 0D0A 7497          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004496  0D0A 0D0A 
0000449A  0D0A 0D0A 
0000449E  5369 6E   
000044A1  676C 6520 7498          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000044A5  5374 6570 
000044A9  2020 3A5B 
000044AD  4F        
000044AE  4E5D 00   7499          dc.b      78,93,0
                    7500   @m68kde~1_44:
000044B2  0D0A 4272 7501          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000044B6  6561 6B20 
000044BA  506F 696E 
000044BE  74        
000044BF  7320 3A5B 7502          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000044C3  4469 7361 
000044C7  626C 6564 
000044CB  5D        
000044CC  00        7503          dc.b      0
                    7504   @m68kde~1_45:
000044CE  0D0A 5072 7505          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000044D2  6573 7320 
000044D6  3C53 5041 
000044DA  4345      
000044DC  3E20 746F 7506          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000044E0  2045 7865 
000044E4  6375 7465 
000044E8  20        
000044E9  4E65 7874 7507          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000044ED  2049 6E73 
000044F1  7472 7563 
000044F5  7469 6F6E 7508          dc.b      116,105,111,110,0
000044F9  00        
                    7509   @m68kde~1_46:
000044FA  0D0A 5072 7510          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000044FE  6573 7320 
00004502  3C45 5343 
00004506  3E20      
00004508  746F 2052 7511          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000450C  6573 756D 
00004510  6520 5072 
00004514  6F67 7261 7512          dc.b      111,103,114,97,109,0
00004518  6D00      
                    7513   @m68kde~1_47:
0000451A  0D0A 496C 7514          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000451E  6C65 6761 
00004522  6C20 4461 
00004526  74        
00004527  6120 5265 7515          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000452B  6769 7374 
0000452F  6572 203A 
00004533  20        
00004534  5573 6520 7516          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004538  4430 2D44 
0000453C  372E 2E2E 
00004540  2E2E      
00004542  0D0A 00   7517          dc.b      13,10,0
                    7518   @m68kde~1_48:
00004546  0D0A 4425 7519          dc.b      13,10,68,37,99,32,61,32,0
0000454A  6320 3D20 
0000454E  00        
                    7520   @m68kde~1_49:
00004550  0D0A 496C 7521          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004554  6C65 6761 
00004558  6C20 4164 
0000455C  64        
0000455D  7265 7373 7522          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004561  2052 6567 
00004565  6973 7465 
00004569  7220 3A20 7523          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000456D  5573 6520 
00004571  4130 2D41 
00004575  372E      
00004577  2E2E 2E2E 7524          dc.b      46,46,46,46,13,10,0
0000457B  0D0A 00   
                    7525   @m68kde~1_50:
0000457E  0D0A 4125 7526          dc.b      13,10,65,37,99,32,61,32,0
00004582  6320 3D20 
00004586  00        
                    7527   @m68kde~1_51:
00004588  0D0A 5573 7528          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000458C  6572 2053 
00004590  5020 3D20 
00004594  00        
                    7529   @m68kde~1_52:
00004596  0D0A 496C 7530          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000459A  6C65 6761 
0000459E  6C20 5265 
000045A2  67        
000045A3  6973 7465 7531          dc.b      105,115,116,101,114,46,46,46,46,0
000045A7  722E 2E2E 
000045AB  2E00      
                    7532   @m68kde~1_53:
000045AE  0D0A 5379 7533          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000045B2  7374 656D 
000045B6  2053 5020 
000045BA  3D        
000045BB  2000      7534          dc.b      32,0
                    7535   @m68kde~1_54:
000045BE  0D0A 496C 7536          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000045C2  6C65 6761 
000045C6  6C20 5265 
000045CA  67        
000045CB  6973 7465 7537          dc.b      105,115,116,101,114,46,46,46,46,0
000045CF  722E 2E2E 
000045D3  2E00      
                    7538   @m68kde~1_55:
000045D6  0D0A 5043 7539          dc.b      13,10,80,67,32,61,32,0
000045DA  203D 2000 
                    7540   @m68kde~1_56:
000045DE  0D0A 5352 7541          dc.b      13,10,83,82,32,61,32,0
000045E2  203D 2000 
                    7542   @m68kde~1_57:
000045E6  0D0A 496C 7543          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000045EA  6C65 6761 
000045EE  6C20 5265 
000045F2  67        
000045F3  6973 7465 7544          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000045F7  723A 2055 
000045FB  7365 2041 
000045FF  30        
00004600  2D41 372C 7545          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004604  2044 302D 
00004608  4437 2C20 
0000460C  5353 50   
0000460F  2C20 5553 7546          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004613  502C 2050 
00004617  4320 6F72 
0000461B  2053      
0000461D  520D 0A00 7547          dc.b      82,13,10,0
                    7548   @m68kde~1_58:
00004622  0D0A 0D0A 7549          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004626  4E75 6D20 
0000462A  2020 2020 
0000462E  4164      
00004630  6472 6573 7550          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004634  7320 2020 
00004638  2020 2049 
0000463C  6E        
0000463D  7374 7275 7551          dc.b      115,116,114,117,99,116,105,111,110,0
00004641  6374 696F 
00004645  6E00      
                    7552   @m68kde~1_59:
00004648  0D0A 2D2D 7553          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000464C  2D20 2020 
00004650  2020 2D2D 
00004654  2D2D 2D   
00004657  2D2D 2D2D 7554          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000465B  2020 2020 
0000465F  2D2D 2D2D 
00004663  2D2D 2D   
00004666  2D2D 2D2D 7555          dc.b      45,45,45,45,0
0000466A  00        
                    7556   @m68kde~1_60:
0000466C  0D0A 4E6F 7557          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004670  2042 7265 
00004674  616B 506F 
00004678  69        
00004679  6E74 7320 7558          dc.b      110,116,115,32,83,101,116,0
0000467D  5365 7400 
                    7559   @m68kde~1_61:
00004682  0D0A 2533 7560          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004686  6420 2020 
0000468A  2020 2425 
0000468E  3038 78   
00004691  00        7561          dc.b      0
                    7562   @m68kde~1_62:
00004692  0D0A 00   7563          dc.b      13,10,0
                    7564   @m68kde~1_63:
00004696  0D0A 4E75 7565          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000469A  6D20 2020 
0000469E  2020 4164 
000046A2  6472      
000046A4  6573 7300 7566          dc.b      101,115,115,0
                    7567   @m68kde~1_64:
000046A8  0D0A 2D2D 7568          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000046AC  2D20 2020 
000046B0  2020 2D2D 
000046B4  2D2D 2D   
000046B7  2D2D 2D2D 7569          dc.b      45,45,45,45,0
000046BB  00        
                    7570   @m68kde~1_65:
000046BC  0D0A 4E6F 7571          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000046C0  2057 6174 
000046C4  6368 506F 
000046C8  69        
000046C9  6E74 7320 7572          dc.b      110,116,115,32,83,101,116,0
000046CD  5365 7400 
                    7573   @m68kde~1_66:
000046D2  0D0A 2533 7574          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000046D6  6420 2020 
000046DA  2020 2425 
000046DE  3038 78   
000046E1  00        7575          dc.b      0
                    7576   @m68kde~1_67:
000046E2  0D0A 00   7577          dc.b      13,10,0
                    7578   @m68kde~1_68:
000046E6  0D0A 456E 7579          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000046EA  7465 7220 
000046EE  4272 6561 
000046F2  6B        
000046F3  2050 6F69 7580          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000046F7  6E74 204E 
000046FB  756D 6265 
000046FF  72        
00004700  3A20 00   7581          dc.b      58,32,0
                    7582   @m68kde~1_69:
00004704  0D0A 496C 7583          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004708  6C65 6761 
0000470C  6C20 5261 
00004710  6E        
00004711  6765 203A 7584          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004715  2055 7365 
00004719  2030 202D 
0000471D  2037      
0000471F  00        7585          dc.b      0
                    7586   @m68kde~1_70:
00004720  0D0A 4272 7587          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004724  6561 6B20 
00004728  506F 696E 
0000472C  74        
0000472D  2043 6C65 7588          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004731  6172 6564 
00004735  2E2E 2E2E 
00004739  2E        
0000473A  0D0A 00   7589          dc.b      13,10,0
                    7590   @m68kde~1_71:
0000473E  0D0A 4272 7591          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004742  6561 6B20 
00004746  506F 696E 
0000474A  74        
0000474B  2077 6173 7592          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000474F  6E27 7420 
00004753  5365 742E 
00004757  2E        
00004758  2E2E 2E00 7593          dc.b      46,46,46,0
                    7594   @m68kde~1_72:
0000475C  0D0A 456E 7595          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004760  7465 7220 
00004764  5761 7463 
00004768  68        
00004769  2050 6F69 7596          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000476D  6E74 204E 
00004771  756D 6265 
00004775  72        
00004776  3A20 00   7597          dc.b      58,32,0
                    7598   @m68kde~1_73:
0000477A  0D0A 496C 7599          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000477E  6C65 6761 
00004782  6C20 5261 
00004786  6E        
00004787  6765 203A 7600          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000478B  2055 7365 
0000478F  2030 202D 
00004793  2037      
00004795  00        7601          dc.b      0
                    7602   @m68kde~1_74:
00004796  0D0A 5761 7603          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000479A  7463 6820 
0000479E  506F 696E 
000047A2  74        
000047A3  2043 6C65 7604          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000047A7  6172 6564 
000047AB  2E2E 2E2E 
000047AF  2E        
000047B0  0D0A 00   7605          dc.b      13,10,0
                    7606   @m68kde~1_75:
000047B4  0D0A 5761 7607          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000047B8  7463 6820 
000047BC  506F 696E 
000047C0  74        
000047C1  2057 6173 7608          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000047C5  206E 6F74 
000047C9  2053 6574 
000047CD  2E        
000047CE  2E2E 2E2E 7609          dc.b      46,46,46,46,0
000047D2  00        
                    7610   @m68kde~1_76:
000047D4  0D0A 4E6F 7611          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000047D8  2046 5245 
000047DC  4520 4272 
000047E0  6561      
000047E2  6B20 506F 7612          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000047E6  696E 7473 
000047EA  2E2E 2E2E 
000047EE  2E        
000047EF  00        7613          dc.b      0
                    7614   @m68kde~1_77:
000047F0  0D0A 4272 7615          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047F4  6561 6B20 
000047F8  506F 696E 
000047FC  74        
000047FD  2041 6464 7616          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004801  7265 7373 
00004805  3A20 00   
                    7617   @m68kde~1_78:
00004808  0D0A 4572 7618          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000480C  726F 7220 
00004810  3A20 4272 
00004814  65        
00004815  616B 2050 7619          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004819  6F69 6E74 
0000481D  7320 4341 
00004821  4E        
00004822  4E4F 5420 7620          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004826  6265 2073 
0000482A  6574 2061 
0000482E  74        
0000482F  204F 4444 7621          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004833  2061 6464 
00004837  7265 7373 
0000483B  65        
0000483C  7300      7622          dc.b      115,0
                    7623   @m68kde~1_79:
0000483E  0D0A 4572 7624          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004842  726F 7220 
00004846  3A20 4272 
0000484A  65        
0000484B  616B 2050 7625          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000484F  6F69 6E74 
00004853  7320 4341 
00004857  4E        
00004858  4E4F 5420 7626          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
0000485C  6265 2073 
00004860  6574 2066 
00004864  6F        
00004865  7220 524F 7627          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004869  4D20 696E 
0000486D  2052 616E 
00004871  67        
00004872  6520 3A20 7628          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004876  5B24 302D 
0000487A  2430 3030 
0000487E  3037 46   
00004881  4646 5D00 7629          dc.b      70,70,93,0
                    7630   @m68kde~1_80:
00004886  0D0A 4572 7631          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000488A  726F 723A 
0000488E  2042 7265 
00004892  61        
00004893  6B20 506F 7632          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004897  696E 7420 
0000489B  416C 7265 
0000489F  6164 7920 7633          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000048A3  4578 6973 
000048A7  7473 2061 
000048AB  74        
000048AC  2041 6464 7634          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000048B0  7265 7373 
000048B4  203A 2025 
000048B8  30        
000048B9  3878 0D0A 7635          dc.b      56,120,13,10,0
000048BD  00        
                    7636   @m68kde~1_81:
000048BE  0D0A 4272 7637          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000048C2  6561 6B20 
000048C6  506F 696E 
000048CA  74        
000048CB  2053 6574 7638          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000048CF  2061 7420 
000048D3  4164 6472 
000048D7  65        
000048D8  7373 3A20 7639          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000048DC  5B24 2530 
000048E0  3878 5D00 
                    7640   @m68kde~1_82:
000048E4  0D0A 00   7641          dc.b      13,10,0
                    7642   @m68kde~1_83:
000048E8  0D0A 4E6F 7643          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000048EC  2046 5245 
000048F0  4520 5761 
000048F4  7463      
000048F6  6820 506F 7644          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000048FA  696E 7473 
000048FE  2E2E 2E2E 
00004902  2E        
00004903  00        7645          dc.b      0
                    7646   @m68kde~1_84:
00004904  0D0A 5761 7647          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004908  7463 6820 
0000490C  506F 696E 
00004910  74        
00004911  2041 6464 7648          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004915  7265 7373 
00004919  3A20 00   
                    7649   @m68kde~1_85:
0000491C  0D0A 4572 7650          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004920  726F 723A 
00004924  2057 6174 
00004928  63        
00004929  6820 506F 7651          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000492D  696E 7420 
00004931  416C 7265 
00004935  6164 7920 7652          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004939  5365 7420 
0000493D  6174 2041 
00004941  64        
00004942  6472 6573 7653          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004946  7320 3A20 
0000494A  2530 3878 
0000494E  0D        
0000494F  0A00      7654          dc.b      10,0
                    7655   @m68kde~1_86:
00004952  0D0A 5761 7656          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004956  7463 6820 
0000495A  506F 696E 
0000495E  74        
0000495F  2053 6574 7657          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004963  2061 7420 
00004967  4164 6472 
0000496B  65        
0000496C  7373 3A20 7658          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004970  5B24 2530 
00004974  3878 5D00 
                    7659   @m68kde~1_87:
00004978  0D0A 00   7660          dc.b      13,10,0
                    7661   @m68kde~1_88:
0000497C  0D0A 0D0A 7662          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004980  0D0A 0D0A 
00004984  4042 5245 
00004988  414B 50   
0000498B  4F49 4E54 7663          dc.b      79,73,78,84,0
0000498F  00        
                    7664   @m68kde~1_89:
00004990  0D0A 5369 7665          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004994  6E67 6C65 
00004998  2053 7465 
0000499C  70        
0000499D  203A 205B 7666          dc.b      32,58,32,91,79,78,93,0
000049A1  4F4E 5D00 
                    7667   @m68kde~1_90:
000049A6  0D0A 4272 7668          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000049AA  6561 6B50 
000049AE  6F69 6E74 
000049B2  73        
000049B3  203A 205B 7669          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000049B7  456E 6162 
000049BB  6C65 645D 
000049BF  00        
                    7670   @m68kde~1_91:
000049C0  0D0A 5072 7671          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000049C4  6573 7320 
000049C8  3C53 5041 
000049CC  4345      
000049CE  3E20 746F 7672          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000049D2  2045 7865 
000049D6  6375 7465 
000049DA  20        
000049DB  4E65 7874 7673          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000049DF  2049 6E73 
000049E3  7472 7563 
000049E7  7469 6F6E 7674          dc.b      116,105,111,110,0
000049EB  00        
                    7675   @m68kde~1_92:
000049EC  0D0A 5072 7676          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049F0  6573 7320 
000049F4  3C45 5343 
000049F8  3E20      
000049FA  746F 2052 7677          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000049FE  6573 756D 
00004A02  6520 5573 
00004A06  6572 2050 7678          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004A0A  726F 6772 
00004A0E  616D 0D0A 
00004A12  00        
                    7679   @m68kde~1_93:
00004A14  0D0A 556E 7680          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004A18  6B6E 6F77 
00004A1C  6E20 436F 
00004A20  6D        
00004A21  6D61 6E64 7681          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004A25  2E2E 2E2E 
00004A29  2E0D 0A00 
                    7682   @m68kde~1_94:
00004A2E  0D0A 5072 7683          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004A32  6F67 7261 
00004A36  6D20 456E 
00004A3A  64        
00004A3B  6564 2028 7684          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004A3F  5452 4150 
00004A43  2023 3135 
00004A47  292E      
00004A49  2E2E 2E00 7685          dc.b      46,46,46,0
                    7686   @m68kde~1_95:
00004A4E  0D0A 4B69 7687          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004A52  6C6C 2041 
00004A56  6C6C 2042 
00004A5A  72        
00004A5B  6561 6B20 7688          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004A5F  506F 696E 
00004A63  7473 2E2E 
00004A67  2E        
00004A68  2879 2F6E 7689          dc.b      40,121,47,110,41,63,0
00004A6C  293F 00   
                    7690   @m68kde~1_96:
00004A70  0D0A 4B69 7691          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004A74  6C6C 2041 
00004A78  6C6C 2057 
00004A7C  61        
00004A7D  7463 6820 7692          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004A81  506F 696E 
00004A85  7473 2E2E 
00004A89  2E        
00004A8A  2879 2F6E 7693          dc.b      40,121,47,110,41,63,0
00004A8E  293F 00   
                    7694   @m68kde~1_97:
00004A92  0D0A 2D2D 7695          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004A96  2D2D 2D2D 
00004A9A  2D2D 2D2D 
00004A9E  2D2D 2D   
00004AA1  2D2D 2D2D 7696          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004AA5  2D2D 2D2D 
00004AA9  2D2D 2D2D 
00004AAD  2D2D 2D   
00004AB0  2D2D 2D2D 7697          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004AB4  2D2D 2D2D 
00004AB8  2D2D 2D2D 
00004ABC  2D2D 2D   
00004ABF  2D2D 2D2D 7698          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004AC3  2D2D 2D2D 
00004AC7  2D2D 2D2D 
00004ACB  2D2D 2D   
00004ACE  2D2D 2D2D 7699          dc.b      45,45,45,45,45,45,0
00004AD2  2D2D 00   
                    7700   @m68kde~1_98:
00004AD6  0D0A 2020 7701          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004ADA  4669 6E61 
00004ADE  6C20 5072 
00004AE2  6F        
00004AE3  6A65 6374 7702          dc.b      106,101,99,116,0
00004AE7  00        
                    7703   @m68kde~1_99:
00004AE8  0D0A 2020 7704          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004AEC  4820 2020 
00004AF0  202D 2053 
00004AF4  6179 20   
00004AF7  4865 6C6C 7705          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004AFB  6F20 576F 
00004AFF  726C 6400 
                    7706   @m68kde~1_100:
00004B04  0D0A 2020 7707          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004B08  5420 2020 
00004B0C  202D 2052 
00004B10  756E      
00004B12  2054 6574 7708          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004B16  7269 7320 
00004B1A  4761 6D65 
00004B1E  00        
                    7709   @m68kde~1_101:
00004B20  0D0A 2300 7710          dc.b      13,10,35,0
                    7711   @m68kde~1_102:
00004B24  0A52 756E 7712          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004B28  6E69 6E67 
00004B2C  2054 6574 
00004B30  7269 7320 7713          dc.b      114,105,115,32,71,97,109,101,10,0
00004B34  4761 6D65 
00004B38  0A00      
                    7714   @m68kde~1_103:
00004B3A  0A53 6179 7715          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004B3E  696E 6720 
00004B42  4865 6C6C 
00004B46  6F        
00004B47  2057 6F72 7716          dc.b      32,87,111,114,108,100,10,0
00004B4B  6C64 0A00 
                    7717   @m68kde~1_104:
00004B50  0D0A 0D0A 7718          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004B54  5072 6F67 
00004B58  7261 6D20 
00004B5C  41        
00004B5D  424F 5254 7719          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004B61  2021 2121 
00004B65  2121 210D 
00004B69  0A00      
                    7720   @m68kde~1_105:
00004B6C  2573 0D0A 7721          dc.b      37,115,13,10,0
00004B70  00        
                    7722   @m68kde~1_106:
00004B72  0D0A 0D0A 7723          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004B76  5072 6F67 
00004B7A  7261 6D20 
00004B7E  41        
00004B7F  424F 5254 7724          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004B83  2021 2121 
00004B87  2121 00   
                    7725   @m68kde~1_107:
00004B8A  0D0A 556E 7726          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004B8E  6861 6E64 
00004B92  6C65 6420 
00004B96  49        
00004B97  6E74 6572 7727          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004B9B  7275 7074 
00004B9F  3A20 4952 
00004BA3  5125 6420 7728          dc.b      81,37,100,32,33,33,33,33,33,0
00004BA7  2121 2121 
00004BAB  2100      
                    7729   @m68kde~1_108:
00004BAE  4144 4452 7730          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004BB2  4553 5320 
00004BB6  4552 524F 
00004BBA  523A 20   
00004BBD  3136 206F 7731          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004BC1  7220 3332 
00004BC5  2042 6974 
00004BC9  2054      
00004BCB  7261 6E73 7732          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004BCF  6665 7220 
00004BD3  746F 2F66 
00004BD7  726F 6D20 7733          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004BDB  616E 204F 
00004BDF  4444 2041 
00004BE3  64        
00004BE4  6472 6573 7734          dc.b      100,114,101,115,115,46,46,46,46,0
00004BE8  732E 2E2E 
00004BEC  2E00      
                    7735   @m68kde~1_109:
00004BEE  556E 6861 7736          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004BF2  6E64 6C65 
00004BF6  6420 5472 
00004BFA  6170 2021 7737          dc.b      97,112,32,33,33,33,33,33,0
00004BFE  2121 2121 
00004C02  00        
                    7738   @m68kde~1_110:
00004C04  4255 5320 7739          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004C08  4572 726F 
00004C0C  7221 00   
                    7740   @m68kde~1_111:
00004C10  4144 4452 7741          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004C14  4553 5320 
00004C18  4572 726F 
00004C1C  7221      
00004C1E  00        7742          dc.b      0
                    7743   @m68kde~1_112:
00004C20  494C 4C45 7744          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004C24  4741 4C20 
00004C28  494E 5354 
00004C2C  5255 43   
00004C2F  5449 4F4E 7745          dc.b      84,73,79,78,0
00004C33  00        
                    7746   @m68kde~1_113:
00004C34  4449 5649 7747          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004C38  4445 2042 
00004C3C  5920 5A45 
00004C40  524F 00   
                    7748   @m68kde~1_114:
00004C44  2743 484B 7749          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004C48  2720 494E 
00004C4C  5354 5255 
00004C50  4354 49   
00004C53  4F4E 00   7750          dc.b      79,78,0
                    7751   @m68kde~1_115:
00004C56  5452 4150 7752          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004C5A  5620 494E 
00004C5E  5354 5255 
00004C62  4354 49   
00004C65  4F4E 00   7753          dc.b      79,78,0
                    7754   @m68kde~1_116:
00004C68  5052 4956 7755          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004C6C  494C 4547 
00004C70  4520 5649 
00004C74  4F4C 41   
00004C77  5449 4F4E 7756          dc.b      84,73,79,78,0
00004C7B  00        
                    7757   @m68kde~1_117:
00004C7C  554E 494E 7758          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004C80  4954 4941 
00004C84  4C49 5345 
00004C88  4420 49   
00004C8B  5251 00   7759          dc.b      82,81,0
                    7760   @m68kde~1_118:
00004C8E  5350 5552 7761          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004C92  494F 5553 
00004C96  2049 5251 
00004C9A  00        
                    7762   @m68kde~1_119:
00004C9C  4445 312D 7763          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00004CA0  3638 6B20 
00004CA4  4275 6720 
00004CA8  5631      
00004CAA  2E37 370D 7764          dc.b      46,55,55,13,32,80,97,99,111,32,67,104,97,110
00004CAE  2050 6163 
00004CB2  6F20 4368 
00004CB6  616E      
00004CB8  2773 2028 7765          dc.b      39,115,32,40,56,50,48,51,51,55,56,56,41,32,83
00004CBC  3832 3033 
00004CC0  3337 3838 
00004CC4  2920 53   
00004CC7  6F6C 7574 7766          dc.b      111,108,117,116,105,111,110,32,70,105,110,97
00004CCB  696F 6E20 
00004CCF  4669 6E61 
00004CD3  6C20 5072 7767          dc.b      108,32,80,114,111,106,101,99,116,32,50,48,50
00004CD7  6F6A 6563 
00004CDB  7420 3230 
00004CDF  32        
00004CE0  3357 3200 7768          dc.b      51,87,50,0
                    7769   @m68kde~1_120:
00004CE4  436F 7079 7770          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004CE8  7269 6768 
00004CEC  7420 2843 
00004CF0  2920 504A 7771          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004CF4  2044 6176 
00004CF8  6965 7320 
00004CFC  3230      
00004CFE  3136 00   7772          dc.b      49,54,0
                    7773   @m68kde~1_121:
00004D02  0D0A 2573 7774          dc.b      13,10,37,115,0
00004D06  00        
                    7775   @m68kde~1_122:
00004D08  0D0A 2573 7776          dc.b      13,10,37,115,0
00004D0C  00        
                    7777   @tetris_1:
00004D0E  6761 6D65 7778          dc.b      103,97,109,101,32,111,118,101,114,0
00004D12  206F 7665 
00004D16  7200      
                    7779   @tetris_2:
00004D18  5363 6F72 7780          dc.b      83,99,111,114,101,58,32,37,100,32,0
00004D1C  653A 2025 
00004D20  6420 00   
                    7781   @tetris_3:
00004D24  7363 6F72 7782          dc.b      115,99,111,114,101,0
00004D28  6500      
                    7783   @tetris_4:
00004D2A  5072 6573 7784          dc.b      80,114,101,115,115,32,97,110,121,32,107,101
00004D2E  7320 616E 
00004D32  7920 6B65 
00004D36  7920 746F 7785          dc.b      121,32,116,111,32,99,111,110,116,105,110,117
00004D3A  2063 6F6E 
00004D3E  7469 6E75 
00004D42  652E 2000 7786          dc.b      101,46,32,0
                    7787   @tetris_5:
00004D46  0A0A 0A00 7788          dc.b      10,10,10,0
                    7789   @tetris_6:
00004D4A  696E 6974 7790          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
00004D4E  6961 6C5F 
00004D52  6E65 776C 
00004D56  696E 6500 7791          dc.b      105,110,101,0
                    7792   @tetris_7:
00004D5A  2000      7793          dc.b      32,0
                    7794   @tetris_8:
00004D5C  7370 6163 7795          dc.b      115,112,97,99,101,0
00004D60  6500      
                    7796   @tetris_9:
00004D62  4350 454E 7797          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
00004D66  3431 3220 
00004D6A  5465 7472 
00004D6E  6973      
00004D70  0A00      7798          dc.b      10,0
                    7799   @tetris_10:
00004D72  7469 746C 7800          dc.b      116,105,116,108,101,0
00004D76  6500      
                    7801   @tetris_11:
00004D78  2300      7802          dc.b      35,0
                    7803   @tetris_12:
00004D7A  7461 626C 7804          dc.b      116,97,98,108,101,35,0
00004D7E  6523 00   
                    7805   @tetris_13:
00004D82  2E00      7806          dc.b      46,0
                    7807   @tetris_14:
00004D84  7461 626C 7808          dc.b      116,97,98,108,101,46,0
00004D88  652E 00   
                    7809   @tetris_15:
00004D8C  0A00      7810          dc.b      10,0
                    7811   @tetris_16:
00004D8E  6E65 776C 7812          dc.b      110,101,119,108,105,110,101,49,0
00004D92  696E 6531 
00004D96  00        
                    7813   @tetris_17:
00004D98  0A53 636F 7814          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
00004D9C  7265 3A20 
00004DA0  2564 0A00 
                    7815   @tetris_18:
00004DA4  7363 6F72 7816          dc.b      115,99,111,114,101,112,114,105,110,116,0
00004DA8  6570 7269 
00004DAC  6E74 00   
                    7817   @tetris_19:
00004DB0  2300      7818          dc.b      35,0
                    7819   @tetris_20:
00004DB2  2E00      7820          dc.b      46,0
                    7821   @tetris_21:
00004DB4  0A00      7822          dc.b      10,0
                    7823   @tetris_22:
00004DB6  0A47 616D 7824          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
00004DBA  6520 6F76 
00004DBE  6572 210A 
00004DC2  00        
                    7825   @tetris_23:
00004DC4  0A53 636F 7826          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
00004DC8  7265 3A20 
00004DCC  2564 0A00 
                    7827   @itoa_1:
00004DD0  2D32 3134 7828          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004DD4  3734 3833 
00004DD8  3634 3800 
                    7829   __ctype:
00004DDC  0040 4040 7830          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00004DE0  4040 4040 
00004DE4  4040 5050 
00004DE8  5050 50   
00004DEB  4040 4040 7831          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00004DEF  4040 4040 
00004DF3  4040 4040 
00004DF7  4040 40   
00004DFA  4040 40D0 7832          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00004DFE  A0A0 A0A0 
00004E02  A0A0 A0A0 
00004E06  A0A0 A0A0 7833          dc.b      160,160,160,160,160,160,160,140,140,140,140
00004E0A  A0A0 A08C 
00004E0E  8C8C 8C   
00004E11  8C8C 8C8C 7834          dc.b      140,140,140,140,140,140,160,160,160,160,160
00004E15  8C8C A0A0 
00004E19  A0A0 A0   
00004E1C  A0A0 8A8A 7835          dc.b      160,160,138,138,138,138,138,138,130,130,130
00004E20  8A8A 8A8A 
00004E24  8282 82   
00004E27  8282 8282 7836          dc.b      130,130,130,130,130,130,130,130,130,130,130
00004E2B  8282 8282 
00004E2F  8282 82   
00004E32  8282 8282 7837          dc.b      130,130,130,130,130,130,160,160,160,160,160
00004E36  8282 A0A0 
00004E3A  A0A0 A0   
00004E3D  A089 8989 7838          dc.b      160,137,137,137,137,137,137,129,129,129,129
00004E41  8989 8981 
00004E45  8181 81   
00004E48  8181 8181 7839          dc.b      129,129,129,129,129,129,129,129,129,129,129
00004E4C  8181 8181 
00004E50  8181 81   
00004E53  8181 8181 7840          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00004E57  81A0 A0A0 
00004E5B  A040 0000 
00004E5F  00        
00004E60  0000 0000 7841          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004E64  0000 0000 
00004E68  0000 0000 
00004E6C  0000 0000 
00004E70  0000 0000 
00004E74  0000      
00004E76  0000 0000 7842          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004E7A  0000 0000 
00004E7E  0000 0000 
00004E82  0000 0000 
00004E86  0000 0000 
00004E8A  0000      
00004E8C  0000 0000 7843          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004E90  0000 0000 
00004E94  0000 0000 
00004E98  0000 0000 
00004E9C  0000 0000 
00004EA0  0000      
00004EA2  0000 0000 7844          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004EA6  0000 0000 
00004EAA  0000 0000 
00004EAE  0000 0000 
00004EB2  0000 0000 
00004EB6  0000      
00004EB8  0000 0000 7845          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004EBC  0000 0000 
00004EC0  0000 0000 
00004EC4  0000 0000 
00004EC8  0000 0000 
00004ECC  0000      
00004ECE  0000 0000 7846          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004ED2  0000 0000 
00004ED6  0000 0000 
00004EDA  0000 00   
                    7847          section   data
00004EDE            7848                   align
          0000 4EDE 7849   DataStart       equ       *
                    7850   
                    7851   *********************************************************************************************************
                    7852   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7853   * to ram as part of the CStart routine in this file
                    7854   *********************************************************************************************************
                    7855   
                    7856   gameOver_gameover:
00004EDE  4761 6D65 7857          dc.b      71,97,109,101,32,111,118,101,114,33,10,0
00004EE2  206F 7665 
00004EE6  7221 0A00 
                    7858          section   bss
00004EEA            7859                   align
          0000 4EEA 7860   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7861   
                    7862   *********************************************************************************************************
                    7863   * Section for Uninitialised Data held in ROM as constants
                    7864   *********************************************************************************************************
                    7865   
08030000            7866                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 7867   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7868   
                    7869   
08030000            7870   bss             org       bss
                    7871   
                    7872   *********************************************************************************************************
                    7873   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7874   * install the exception handler using the C function InstallExceptionHandler()
                    7875   *********************************************************************************************************
                    7876   
                    7877   
                    7878   
08030000            7879   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            7880   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            7881   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            7882   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            7883   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            7884   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            7885   VCheck           ds.l    1      ditto
0803001C            7886   VTrapV           ds.l    1      ditto
08030020            7887   VPrivilege       ds.l    1      ditto
08030024            7888   VTrace           ds.l    1
08030028            7889   VLine1010emul    ds.l    1
0803002C            7890   VLine1111emul    ds.l    1
08030030            7891   VUnassigned1     ds.l    1
08030034            7892   VUnassigned2     ds.l    1
08030038            7893   VUnassigned3     ds.l    1
0803003C            7894   VUninit_IRQ      ds.l    1
08030040            7895   VUnassigned4     ds.l    1
08030044            7896   VUnassigned5     ds.l    1
08030048            7897   VUnassigned6     ds.l    1
0803004C            7898   VUnassigned7     ds.l    1
08030050            7899   VUnassigned8     ds.l    1
08030054            7900   VUnassigned9     ds.l    1
08030058            7901   VUnassigned10    ds.l    1
0803005C            7902   VUnassigned11    ds.l    1
08030060            7903   VSpuriousIRQ     ds.l    1
                    7904   
                    7905   * Interrupt handlers Vector 25-31
08030064            7906   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            7907   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            7908   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            7909   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            7910   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            7911   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            7912   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7913   
                    7914   * Trap Handler vectors 32-47
08030080            7915   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            7916   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            7917   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            7918   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            7919   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            7920   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            7921   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            7922   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            7923   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            7924   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            7925   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            7926   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            7927   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            7928   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            7929   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            7930   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7931   
                    7932   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7933   
                    7934   ***********************************************************************************************************
                    7935   * Other Variables
                    7936   ***********************************************************************************************************
                    7937   *__DebugA5       ds.l    1
                    7938   *__UserA5        ds.l    1
                    7939   
                    7940   ***********************************************************************************************************
080300C0            7941   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            7942   __allocp:       ds.l    0       ; start of allocation units
080300C4            7943   __heap:         ds.l    0       ; pointers for malloc functions
                    7944   
                    7945   *__himem:       ds.l    himem            ; highest memory location + 1
                    7946   *__stklen:      ds.l    stklen           ; default stack size
                    7947   
                    7948   *********************************************************************************************************
                    7949   * Section for Heap
                    7950   *********************************************************************************************************
                    7951   
                    7952   _i:
080300C4            7953          ds.b      4
                    7954   _x:
080300C8            7955          ds.b      4
                    7956   _y:
080300CC            7957          ds.b      4
                    7958   _z:
080300D0            7959          ds.b      4
                    7960   _PortA_Count:
080300D4            7961          ds.b      4
                    7962   _Trace:
080300D8            7963          ds.b      4
                    7964   _GoFlag:
080300DC            7965          ds.b      4
                    7966   _Echo:
080300E0            7967          ds.b      4
                    7968   _d0:
080300E4            7969          ds.b      4
                    7970   _d1:
080300E8            7971          ds.b      4
                    7972   _d2:
080300EC            7973          ds.b      4
                    7974   _d3:
080300F0            7975          ds.b      4
                    7976   _d4:
080300F4            7977          ds.b      4
                    7978   _d5:
080300F8            7979          ds.b      4
                    7980   _d6:
080300FC            7981          ds.b      4
                    7982   _d7:
08030100            7983          ds.b      4
                    7984   _a0:
08030104            7985          ds.b      4
                    7986   _a1:
08030108            7987          ds.b      4
                    7988   _a2:
0803010C            7989          ds.b      4
                    7990   _a3:
08030110            7991          ds.b      4
                    7992   _a4:
08030114            7993          ds.b      4
                    7994   _a5:
08030118            7995          ds.b      4
                    7996   _a6:
0803011C            7997          ds.b      4
                    7998   _PC:
08030120            7999          ds.b      4
                    8000   _SSP:
08030124            8001          ds.b      4
                    8002   _USP:
08030128            8003          ds.b      4
                    8004   _SR:
0803012C            8005          ds.b      2
                    8006   _BreakPointAddress:
0803012E            8007          ds.b      32
                    8008   _BreakPointInstruction:
0803014E            8009          ds.b      16
                    8010   _BreakPointSetOrCleared:
0803015E            8011          ds.b      32
                    8012   _InstructionSize:
0803017E            8013          ds.b      4
                    8014   _WatchPointAddress:
08030182            8015          ds.b      32
                    8016   _WatchPointSetOrCleared:
080301A2            8017          ds.b      32
                    8018   _WatchPointString:
080301C2            8019          ds.b      800
                    8020   _TempString:
080304E2            8021          ds.b      100
                    8022   _clockTimer:
08030546            8023          ds.b      4
                    8024   _Table:
0803054A            8025          ds.b      300
                    8026   _tetris_score:
08030676            8027          ds.b      4
                    8028   _GameOn:
0803067A            8029          ds.b      1
                    8030   _tetris_timer:
0803067C            8031          ds.b      4
                    8032   _current:
08030680            8033          ds.b      28
                    8034   _ShapesArray:
0803069C            8035          ds.b      196
                    8036   _Tetris_Speed:
08030760            8037          ds.b      8
                    8038   _printw_x:
08030768            8039          ds.b      4
                    8040   _printw_y:
0803076C            8041          ds.b      4
                    8042          section   heap
08030770            8043                   align
          0803 0770 8044   bssEnd          equ *                   end of storage space for unitialised variables
                    8045   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0770 8046   heap   equ       *
08030770            8047                    align
          0000 0000


SYMBOL TABLE

Symbol        Value        Symbol        Value        Symbol        Value
----------------------     ----------------------     ----------------------
@doprint_copy 000038BC     @dopri..opy_1 000038D8     @dopri..opy_2 000038E2     
@dopri..etval 000038E6     @dopri..val_1 00003912     @dopri..val_5 00003956     
@itoa_1       00004DD0     @itoa_convert 00003F88     @itoa_..ert_1 00003FCC     
@itoa_..ert_3 00003FE2     @itoa_..ert_4 00003FF4     @m68kde~1_1   000040FC     
@m68kde~1_10  000041A6     @m68kde~1_100 00004B04     @m68kde~1_101 00004B20     
@m68kde~1_102 00004B24     @m68kde~1_103 00004B3A     @m68kde~1_104 00004B50     
@m68kde~1_105 00004B6C     @m68kde~1_106 00004B72     @m68kde~1_107 00004B8A     
@m68kde~1_108 00004BAE     @m68kde~1_109 00004BEE     @m68kde~1_11  000041BA     
@m68kde~1_110 00004C04     @m68kde~1_111 00004C10     @m68kde~1_112 00004C20     
@m68kde~1_113 00004C34     @m68kde~1_114 00004C44     @m68kde~1_115 00004C56     
@m68kde~1_116 00004C68     @m68kde~1_117 00004C7C     @m68kde~1_118 00004C8E     
@m68kde~1_119 00004C9C     @m68kde~1_12  000041EA     @m68kde~1_120 00004CE4     
@m68kde~1_121 00004D02     @m68kde~1_122 00004D08     @m68kde~1_13  0000421A     
@m68kde~1_14  00004240     @m68kde~1_15  00004262     @m68kde~1_16  0000427E     
@m68kde~1_17  000042C4     @m68kde~1_18  000042D6     @m68kde~1_19  000042E8     
@m68kde~1_2   00004136     @m68kde~1_20  0000431C     @m68kde~1_21  00004324     
@m68kde~1_22  0000432A     @m68kde~1_23  0000432C     @m68kde~1_24  00004330     
@m68kde~1_25  00004332     @m68kde~1_26  00004336     @m68kde~1_27  00004338     
@m68kde~1_28  00004354     @m68kde~1_29  0000436E     @m68kde~1_3   0000414E     
@m68kde~1_30  00004388     @m68kde~1_31  000043A2     @m68kde~1_32  000043BC     
@m68kde~1_33  000043D6     @m68kde~1_34  000043F0     @m68kde~1_35  0000440A     
@m68kde~1_36  00004428     @m68kde~1_37  0000444A     @m68kde~1_38  0000445C     
@m68kde~1_39  00004462     @m68kde~1_4   00004156     @m68kde~1_40  00004472     
@m68kde~1_41  00004482     @m68kde~1_42  00004486     @m68kde~1_43  00004492     
@m68kde~1_44  000044B2     @m68kde~1_45  000044CE     @m68kde~1_46  000044FA     
@m68kde~1_47  0000451A     @m68kde~1_48  00004546     @m68kde~1_49  00004550     
@m68kde~1_5   0000415C     @m68kde~1_50  0000457E     @m68kde~1_51  00004588     
@m68kde~1_52  00004596     @m68kde~1_53  000045AE     @m68kde~1_54  000045BE     
@m68kde~1_55  000045D6     @m68kde~1_56  000045DE     @m68kde~1_57  000045E6     
@m68kde~1_58  00004622     @m68kde~1_59  00004648     @m68kde~1_6   00004160     
@m68kde~1_60  0000466C     @m68kde~1_61  00004682     @m68kde~1_62  00004692     
@m68kde~1_63  00004696     @m68kde~1_64  000046A8     @m68kde~1_65  000046BC     
@m68kde~1_66  000046D2     @m68kde~1_67  000046E2     @m68kde~1_68  000046E6     
@m68kde~1_69  00004704     @m68kde~1_7   00004164     @m68kde~1_70  00004720     
@m68kde~1_71  0000473E     @m68kde~1_72  0000475C     @m68kde~1_73  0000477A     
@m68kde~1_74  00004796     @m68kde~1_75  000047B4     @m68kde~1_76  000047D4     
@m68kde~1_77  000047F0     @m68kde~1_78  00004808     @m68kde~1_79  0000483E     
@m68kde~1_8   00004178     @m68kde~1_80  00004886     @m68kde~1_81  000048BE     
@m68kde~1_82  000048E4     @m68kde~1_83  000048E8     @m68kde~1_84  00004904     
@m68kde~1_85  0000491C     @m68kde~1_86  00004952     @m68kde~1_87  00004978     
@m68kde~1_88  0000497C     @m68kde~1_89  00004990     @m68kde~1_9   00004190     
@m68kde~1_90  000049A6     @m68kde~1_91  000049C0     @m68kde~1_92  000049EC     
@m68kde~1_93  00004A14     @m68kde~1_94  00004A2E     @m68kde~1_95  00004A4E     
@m68kde~1_96  00004A70     @m68kde~1_97  00004A92     @m68kde~1_98  00004AD6     
@m68kde~1_99  00004AE8     @tetris_1     00004D0E     @tetris_10    00004D72     
@tetris_11    00004D78     @tetris_12    00004D7A     @tetris_13    00004D82     
@tetris_14    00004D84     @tetris_15    00004D8C     @tetris_16    00004D8E     
@tetris_17    00004D98     @tetris_18    00004DA4     @tetris_19    00004DB0     
@tetris_2     00004D18     @tetris_20    00004DB2     @tetris_21    00004DB4     
@tetris_22    00004DB6     @tetris_23    00004DC4     @tetris_3     00004D24     
@tetris_4     00004D2A     @tetris_5     00004D46     @tetris_6     00004D4A     
@tetris_7     00004D5A     @tetris_8     00004D5C     @tetris_9     00004D62     
AddressError  0000000C     BreakP..ear_1 0000187E     BreakP..ear_3 00001870     
BreakP..ear_4 000018FC     BreakP..ear_5 000018EE     BreakP..ear_6 000018F8     
BreakP..lay_1 000016BE     BreakP..ay_10 0000176E     BreakP..ay_11 0000176A     
BreakP..lay_3 000016E2     BreakP..lay_4 000016DE     BreakP..lay_6 00001700     
BreakP..lay_7 0000170A     BreakP..lay_8 0000170C     Breakpoint_1  00001DE8     
Breakpoint_10 00001E3A     Breakpoint_3  00001E1E     Breakpoint_5  00001E1C     
Breakpoint_7  00001E2A     Breakpoint_9  00001E36     BusError      00000008     
Change..ers_1 000014EA     Change..rs_11 000014A8     Change..rs_13 000014B6     
Change..rs_15 000014C4     Change..rs_17 000014D2     Change..rs_19 000014E0     
Change..rs_20 000014E6     Change..rs_21 00001598     Change..rs_23 0000150E     
Change..rs_25 00001500     Change..rs_26 00001536     Change..rs_28 00001546     
Change..ers_3 00001460     Change..rs_30 00001556     Change..rs_32 00001564     
Change..rs_34 00001572     Change..rs_36 00001580     Change..rs_38 0000158E     
Change..rs_39 00001594     Change..rs_40 000015EE     Change..rs_42 000015DC     
Change..rs_43 000015EA     Change..rs_44 00001644     Change..rs_46 00001632     
Change..rs_47 00001640     Change..rs_48 0000166C     Change..ers_5 00001452     
Change..rs_50 00001694     Change..rs_51 0000169E     Change..ers_6 000016A2     
Change..ers_7 00001488     Change..ers_9 00001498     Check         00000018     
CheckP..ion_1 00002D9A     CheckP..on_10 00002DF4     CheckP..on_12 00002E3A     
CheckP..on_13 00002E2C     CheckP..ion_3 00002E38     CheckP..ion_4 00002DA6     
CheckP..ion_6 00002E32     CheckP..ion_7 00002DF8     CheckP..ion_9 00002DE0     
CopyShape_1   00002D52     CopyShape_3   00002D84     CopyShape_4   00002D5E     
CopyShape_6   00002D80     DataEnd       00004EEA     DataLength    0000000C     
DataStart     00004EDE     Disabl..nts_1 000019AE     Disabl..nts_3 000019F4     
Disabl..nts_4 000019F0     DividebyZero  00000014     DumpMemory_1  00000B32     
DumpMemory_10 00000B84     DumpMemory_12 00000BC6     DumpMemory_13 00000BB0     
DumpMemory_14 00000BC2     DumpMemory_15 00000BA6     DumpMemory_16 00000BEA     
DumpMemory_3  00000BEE     DumpMemory_4  00000B34     DumpMemory_6  00000BD2     
DumpMemory_7  00000B4C     DumpMemory_9  00000B78     DumpRe..ers_1 00000F1A     
DumpRe..rs_11 00000FE2     DumpRe..rs_12 0000103A     DumpRe..rs_14 000010BE     
DumpRe..rs_15 00001072     DumpRe..rs_16 00001098     DumpRe..rs_17 0000105C     
DumpRe..rs_18 000011A2     DumpRe..rs_19 000011A8     DumpRe..rs_20 00001210     
DumpRe..rs_21 00001218     DumpRe..rs_22 0000122E     DumpRe..rs_23 00001236     
DumpRe..rs_24 0000124C     DumpRe..rs_25 00001254     DumpRe..rs_26 0000126A     
DumpRe..rs_27 00001272     DumpRe..rs_28 00001288     DumpRe..rs_29 00001290     
DumpRe..ers_3 000010E6     DumpRe..rs_30 000012A6     DumpRe..rs_31 000012AE     
DumpRe..rs_32 000012C4     DumpRe..rs_33 000012CC     DumpRe..rs_34 000012E2     
DumpRe..rs_35 000012EA     DumpRe..rs_36 00001300     DumpRe..rs_37 00001308     
DumpRe..rs_38 0000131E     DumpRe..rs_39 00001326     DumpRe..ers_4 000010C0     
DumpRe..rs_40 00001358     DumpRe..rs_42 00001364     DumpRe..rs_44 000013AA     
DumpRe..rs_45 000013A6     DumpRe..ers_5 000010E0     DumpRe..ers_6 00000F80     
DumpRe..ers_8 00001008     DumpRe..ers_9 00000F8A     E_1010        00000826     
E_1111        00000838     E_AErro       000007A8     E_BErro       00000796     
E_Check       000007DE     E_DZero       000007CC     E_IInst       000007BA     
E_Priv        00000802     E_Spuri       0000084A     E_Trace       00000814     
E_Trapv       000007F0     E_UnitI       0000084A     E_Unnas1      0000084A     
E_Unnas10     0000084A     E_Unnas11     0000084A     E_Unnas2      0000084A     
E_Unnas3      0000084A     E_Unnas4      0000084A     E_Unnas5      0000084A     
E_Unnas6      0000084A     E_Unnas7      0000084A     E_Unnas8      0000084A     
E_Unnas9      0000084A     Enable..nts_1 00001A02     Enable..nts_3 00001A3C     
Enable..nts_4 00001A38     FillMemory_1  00000C5C     FillMemory_3  00000C68     
FlushK..ard_1 000009E2     FlushK..ard_4 00000A02     FlushK..ard_5 00000A04     
FlushK..ard_6 00000A06     Get2He..its_1 00000A88     Handle..int_1 00001D10     
Handle..int_3 00001D70     Handle..int_4 00001D6C     IllegalInstr  00000010     
InitialPC     00000004     InitialSP     00000000     KillAl..nts_1 00001A4A     
KillAl..nts_3 00001AA4     KillAl..nts_1 00001AAE     KillAl..nts_3 00001AD6     
LDIV          0000363C     LMUL          000037F6     Level1IRQ     00000064     
Level1RamISR  0000042E     Level2IRQ     00000068     Level2RamISR  00000440     
Level3IRQ     0000006C     Level3RamISR  00000452     Level4IRQ     00000070     
Level4RamISR  00000464     Level5IRQ     00000074     Level5RamISR  00000476     
Level6IRQ     00000078     Level6RamISR  00000580     Level7IRQ     0000007C     
Level7RamISR  00000592     Line1010emul  00000028     Line1111emul  0000002C     
Load_S..ile_1 00000CA2     Load_S..le_11 00000CDC     Load_S..le_12 00000CEA     
Load_S..le_14 00000D08     Load_S..le_16 00000D1C     Load_S..le_17 00000D28     
Load_S..le_18 00000D3A     Load_S..le_20 00000D5E     Load_S..le_21 00000D88     
Load_S..le_23 00000DB0     Load_S..le_25 00000DCC     Load_S..le_26 00000DD8     
Load_S..le_27 00000DDA     Load_S..le_29 00000DE6     Load_S..ile_3 00000DB4     
Load_S..ile_4 00000CA4     Load_S..ile_6 00000CC4     Load_S..ile_8 00000DF4     
Load_S..ile_9 00000CE0     Manipu..nt_10 000032B6     Manipu..nt_12 000032DC     
Manipu..nt_14 000032F8     Manipu..ent_2 000032F8     Manipu..ent_3 00003260     
Manipu..ent_4 00003294     Manipu..ent_5 000032BA     Manipu..ent_6 000032DE     
Manipu..ent_7 00003252     Manipu..ent_8 00003284     Manipu..ent_9 00003290     
Memory..nge_1 00000E2E     Memory..ge_10 00000E74     Memory..ge_11 00000EE6     
Memory..ge_13 00000EF0     Memory..nge_4 00000E68     Memory..nge_6 00000EF6     
Memory..nge_7 00000EE8     Memory..nge_9 00000E84     PrintTable_1  000030AE     
PrintTable_10 000030E2     PrintTable_12 0000311E     PrintTable_13 0000311A     
PrintTable_15 00003138     PrintTable_17 00003154     PrintTable_18 00003166     
PrintTable_20 000031D8     PrintTable_21 00003172     PrintTable_23 000031C4     
PrintTable_24 000031B0     PrintTable_25 000031C0     PrintTable_3  000030D6     
PrintTable_4  000030B8     PrintTable_6  000030D2     PrintTable_7  000030D8     
PrintTable_9  00003122     Privilege     00000020     RamVec..Table 08030000     
Remove..ore_1 00002F8E     Remove..re_11 00003000     Remove..re_12 00002FD4     
Remove..re_14 00002FFC     Remove..re_15 00003002     Remove..re_17 0000301C     
Remove..re_18 00003066     Remove..re_19 0000306A     Remove..re_20 00003054     
Remove..re_21 0000305A     Remove..re_22 00003060     Remove..re_24 0000304A     
Remove..ore_3 00003078     Remove..ore_4 00002F9C     Remove..ore_6 00002FBC     
Remove..ore_7 00003072     Remove..ore_9 00002FCA     RotateShape_1 00002EDA     
RotateShape_3 00002F0E     RotateShape_4 00002EE8     RotateShape_6 00002F0A     
SetBre..int_1 00001AF0     SetBre..nt_11 00001B68     SetBre..nt_13 00001B6A     
SetBre..nt_15 00001BF2     SetBre..nt_16 00001B94     SetBre..nt_18 00001BEC     
SetBre..int_3 00001B08     SetBre..int_4 00001B04     SetBre..int_6 00001B1E     
SetBre..int_9 00001B52     SetNew..ape_1 00002EB6     SetWat..int_1 00001C10     
SetWat..nt_11 00001CC8     SetWat..nt_12 00001C82     SetWat..nt_14 00001CC4     
SetWat..int_3 00001C28     SetWat..int_4 00001C24     SetWat..int_6 00001C3E     
SetWat..int_9 00001C54     SpuriousIRQ   00000060     StackP..erVal 08040000     
Trace         00000024     Trap0         00000080     Trap0RamISR   000005A4     
Trap1         00000084     Trap10        000000A8     Trap10RamISR  00000658     
Trap11        000000AC     Trap11RamISR  0000066A     Trap12        000000B0     
Trap12RamISR  0000067C     Trap13        000000B4     Trap13RamISR  0000068E     
Trap14        000000B8     Trap14RamISR  000006A0     Trap15        000000BC     
Trap15RamISR  00000790     Trap1RamISR   000005B6     Trap2         00000088     
Trap2RamISR   000005C8     Trap3         0000008C     Trap3RamISR   000005DA     
Trap4         00000090     Trap4RamISR   000005EC     Trap5         00000094     
Trap5RamISR   000005FE     Trap6         00000098     Trap6RamISR   00000610     
Trap7         0000009C     Trap7RamISR   00000622     Trap8         000000A0     
Trap8RamISR   00000634     Trap9         000000A4     Trap9RamISR   00000646     
TrapV         0000001C     ULDIV         0000362A     ULMUL         000037E4     
Unassigned1   00000030     Unassigned10  00000058     Unassigned11  0000005C     
Unassigned2   00000034     Unassigned3   00000038     Unassigned4   00000040     
Unassigned5   00000044     Unassigned6   00000048     Unassigned7   0000004C     
Unassigned8   00000050     Unassigned9   00000054     Uninit_IRQ    0000003C     
VAddressError 0803000C     VBusError     08030008     VCheck        08030018     
VDividebyZero 08030014     VIllegalInstr 08030010     VInitialPC    08030004     
VInitialSP    08030000     VL1IRQ        08030064     VL2IRQ        08030068     
VL3IRQ        0803006C     VL4IRQ        08030070     VL5IRQ        08030074     
VL6IRQ        08030078     VL7IRQ        0803007C     VLine1010emul 08030028     
VLine1111emul 0803002C     VPrivilege    08030020     VSpuriousIRQ  08030060     
VTrace        08030024     VTrap0        08030080     VTrap1        08030084     
VTrap10       080300A8     VTrap11       080300AC     VTrap12       080300B0     
VTrap13       080300B4     VTrap14       080300B8     VTrap15       080300BC     
VTrap2        08030088     VTrap3        0803008C     VTrap4        08030090     
VTrap5        08030094     VTrap6        08030098     VTrap7        0803009C     
VTrap8        080300A0     VTrap9        080300A4     VTrapV        0803001C     
VUnassigned1  08030030     VUnassigned10 08030058     VUnassigned11 0803005C     
VUnassigned2  08030034     VUnassigned3  08030038     VUnassigned4  08030040     
VUnassigned5  08030044     VUnassigned6  08030048     VUnassigned7  0803004C     
VUnassigned8  08030050     VUnassigned9  08030054     VUninit_IRQ   0803003C     
WatchP..ear_1 00001954     WatchP..ear_3 00001946     WatchP..ear_4 000019A0     
WatchP..ear_5 00001992     WatchP..ear_6 0000199C     WatchP..lay_1 0000178C     
WatchP..ay_10 0000181A     WatchP..ay_11 00001816     WatchP..lay_3 000017B0     
WatchP..lay_4 000017AC     WatchP..lay_6 000017CE     WatchP..lay_7 000017D8     
WatchP..lay_8 000017DA     Watchpoint_1  00001E64     Watchpoint_10 00001EB6     
Watchpoint_3  00001E9A     Watchpoint_5  00001E98     Watchpoint_7  00001EA6     
Watchpoint_9  00001EB2     WriteT..ble_1 00002F22     WriteT..ble_3 00002F70     
WriteT..ble_4 00002F2C     WriteT..ble_6 00002F6C     WriteT..ble_7 00002F68     
_AddressError 0000204A     _Break..dress 0803012E     _Break..Clear 0000182A     
_Break..splay 000016AA     _Break..ction 0803014E     _Break..eared 0803015E     
_Breakpoint   00001DC2     _BusError     0000203C     _CallD..nitor 00001DAC     
_Chang..sters 000013EE     _Check        00002074     _Check..ition 00002D8C     
_CopyShape    00002D22     _Disab..oints 000019A6     _Dividebyzero 00002066     
_DumpMemory   00000B04     _DumpR..sters 00000EFC     _DumpR..Pause 000013B0     
_Echo         080300E0     _Enabl..oints 000019FA     _FillMemory   00000BF4     
_Flush..board 000009DE     _GameOn       0803067A     _Get2H..igits 00000A3C     
_Get4H..igits 00000A90     _Get6H..igits 00000AB6     _Get8H..igits 00000ADC     
_GoFlag       080300DC     _Handl..Point 00001CD0     _Help         00001EBA     
_IRQMessage   00001FA8     _Illeg..ction 00002058     _Init_RS232   0000094A     
_Insta..ndler 000008C6     _Instr..nSize 0803017E     _KillA..oints 00001A42     
_KillA..oints 00001AAA     _Load_..dFile 00000C6E     _Manip..rrent 00003208     
_MemoryChange 00000DFC     _PC           08030120     _PortA_Count  080300D4     
_Print..Abort 00001F7C     _PrintTable   00003096     _PrivError    00002090     
_Remov..Score 00002F76     _RotateShape  00002EBA     _SR           0803012C     
_SSP          08030124     _SetBr..Point 00001ADA     _SetNe..Shape 00002E42     
_SetWa..Point 00001BFA     _ShapesArray  0803069C     _Spurious     000020AC     
_Table        0803054A     _TempString   080304E2     _Tetris_Speed 08030760     
_Trace        080300D8     _Trapv        00002082     _USP          08030128     
_Unhan..dIRQ1 00001FD4     _Unhan..dIRQ2 00001FE0     _Unhan..dIRQ3 00001FEC     
_Unhan..dIRQ4 00001FF8     _Unhan..dIRQ5 00002004     _Unhan..dIRQ6 00002010     
_Unhan..dIRQ7 00002022     _Unhan..dTrap 0000202E     _UnitIRQ      0000209E     
_Unkno..mmand 00001D96     _Watch..dress 08030182     _Watch..Clear 00001904     
_Watch..splay 0000177E     _Watch..eared 080301A2     _Watch..tring 080301C2     
_Watchpoint   00001E3E     _WriteToTable 00002F16     __allocp      080300C4     
__ctype       00004DDC     __getch       000009A0     __heap        080300C4     
__putch       00000974     __ungetbuf    080300C0     _a0           08030104     
_a1           08030108     _a2           0803010C     _a3           08030110     
_a4           08030114     _a5           08030118     _a6           0803011C     
_clear_screen 000029C8     _clock        00002AFC     _clockTimer   08030546     
_current      08030680     _d0           080300E4     _d1           080300E8     
_d2           080300EC     _d3           080300F0     _d4           080300F4     
_d5           080300F8     _d6           080300FC     _d7           08030100     
_delay_ms     00002CDC     _delayedPrint 00002B5E     _doprint      00003960     
_endword      00002974     _gameOver     00002BDC     _get_v..l_reg 00002ACA     
_getch        00003884     _getch_1      000009A2     _getch_3      000009B4     
_getch_4      000009D8     _go           0000084C     _go_to..orner 000029BA     
_gotoxy       00002A82     _i            080300C4     _incre..Timer 000020BA     
_initT..Speed 00003304     _itoa         000040CE     _kbhit        0000095C     
_ltoa         00004004     _main         000020D4     _menu         00001F08     
_mod_bld      0000297E     _printf       000037B4     _printw       00002B04     
_printw_x     08030768     _printw_y     0803076C     _putch        00003708     
_putch_1      00000978     _putch_3      0000098A     _putcharxy    00002A40     
_say_awesome  00002A16     _say_cool     00002A24     _say_hello    00000904     
_say_phoneme  000008E6     _say_world    0000092A     _say_yeah     00002A36     
_set_color    00002AD2     _set_v..l_reg 00002ABA     _sprintf      00003750     
_stop         0000084A     _strcat       00003782     _strcpy       0000361A     
_strlen       000040EA     _talkp..emeAA 000022CE     _talkp..emeAE 000022DA     
_talkp..emeAO 000022E6     _talkp..emeAR 000022F2     _talkp..emeAW 000022FE     
_talkp..emeAX 0000230A     _talkp..emeAY 00002316     _talkp..meBB1 00002322     
_talkp..meBB2 0000232E     _talkp..emeCH 0000233A     _talkp..meDD1 00002346     
_talkp..meDD2 00002352     _talkp..meDH1 0000235E     _talkp..meDH2 0000236A     
_talkp..emeEH 00002376     _talkp..emeEL 00002382     _talkp..meER1 0000238E     
_talkp..meER2 0000239A     _talkp..emeEY 000023A6     _talkp..emeFF 000023B2     
_talkp..meGG1 000023BE     _talkp..meGG2 000023CA     _talkp..meGG3 000023D6     
_talkp..meHH1 000023E2     _talkp..meHH2 000023EE     _talkp..emeIH 000023FA     
_talkp..emeIY 00002406     _talkp..emeJH 00002412     _talkp..meKK1 0000241E     
_talkp..meKK2 0000242A     _talkp..meKK3 00002436     _talkp..emeLL 00002442     
_talkp..emeMM 0000244E     _talkp..emeNG 0000245A     _talkp..meNN1 00002466     
_talkp..meNN2 00002472     _talkp..emeOR 0000247E     _talkp..emeOW 0000248A     
_talkp..emeOY 00002496     _talkp..mePA1 00002592     _talkp..mePA2 0000259C     
_talkp..mePA3 000025A8     _talkp..mePA4 000025B4     _talkp..mePA5 000025C0     
_talkp..mePA6 00002966     _talkp..emePP 000024A2     _talkp..meRR1 000024AE     
_talkp..meRR2 000024BA     _talkp..emeSH 000024C6     _talkp..emeSS 000024D2     
_talkp..emeTH 000024DE     _talkp..meTT1 000024EA     _talkp..meTT2 000024F6     
_talkp..emeUH 00002502     _talkp..meUW1 0000250E     _talkp..meUW2 0000251A     
_talkp..emeVV 00002526     _talkp..emeWH 00002532     _talkp..emeWW 0000253E     
_talkp..emeXR 0000254A     _talkp..emeYR 00002556     _talkp..meYY1 00002562     
_talkp..meYY2 0000256E     _talkp..emeZH 0000257A     _talkp..emeZZ 00002586     
_talkword0    000025CC     _talkword1    000025DE     _talkword10   00002662     
_talkword11   00002670     _talkword12   0000268A     _talkword13   000026A0     
_talkword14   000026B8     _talkword15   000026C2     _talkword16   000026D4     
_talkword17   000026DE     _talkword18   000026E8     _talkword19   000026F2     
_talkword2    000025EC     _talkword20   000026FC     _talkword3    000025F6     
_talkword30   00002718     _talkword4    00002604     _talkword40   00002726     
_talkword5    0000260E     _talkword50   00002730     _talkword6    0000261C     
_talkword60   00002742     _talkword7    00002634     _talkword70   0000274C     
_talkword8    0000264A     _talkword80   00002756     _talkword9    00002654     
_talkword90   00002760     _talkw..alarm 000027C8     _talkw..nchor 000027B4     
_talkwordand  0000281C     _talkworddata 000028D0     _talkw..depth 00002784     
_talkwordeast 00002912     _talkwordgps  0000289C     _talkw..ading 00002880     
_talkw..ndred 0000276A     _talkw..limit 0000284C     _talkwordno   000028C0     
_talkw..north 000028E8     _talkwordoff  000027F0     _talkwordon   000027E0     
_talkw..point 000027A0     _talkw..ition 00002946     _talkwordset  00002868     
_talkw..allow 00002804     _talkw..south 000028FC     _talkwordteen 000026AA     
_talkwordty   0000270E     _talkw..watch 00002834     _talkwordwest 0000292A     
_tetris_main  0000338E     _tetri..nloop 0000331A     _tetris_rand  00002D14     
_tetris_score 08030676     _tetris_timer 0803067C     _tolower      00003734     
_toupper      00003798     _ultoa        00004088     _x            080300C8     
_xtod         00000A0A     _y            080300CC     _z            080300D0     
bss           08030000     bssEnd        08030770     clear_..een_1 000029E8     
clear_..een_3 00002A12     delay_ms_1    00002CEA     delay_ms_3    00002D02     
delaye..int_1 00002B70     delaye..int_3 00002BD4     delaye..int_4 00002B94     
delaye..int_5 00002BC4     dodiv         00003684     dodiv_1       000036A4     
dodiv_2       000036C2     dodiv_3       000036E2     dodiv_4       000036FE     
dodiv_5       00003702     domul         00003830     domul_1       00003844     
domul_2       0000384E     domul_3       00003850     domul_4       00003864     
doprint_1     00003978     doprint_102   00003E66     doprint_104   00003E84     
doprint_105   00003E8A     doprint_107   00003EA6     doprint_108   00003EAE     
doprint_11    00003A0A     doprint_110   00003EC8     doprint_112   00003F14     
doprint_113   00003F16     doprint_115   00003F12     doprint_116   00003EEE     
doprint_119   00003EFC     doprint_12    00003A16     doprint_123   00003F2E     
doprint_125   00003F4C     doprint_126   00003F7E     doprint_13    00003A22     
doprint_14    00003A2E     doprint_15    00003A00     doprint_16    00003A54     
doprint_18    00003A84     doprint_2     00003F66     doprint_20    00003A9A     
doprint_22    00003C3C     doprint_23    00003C4A     doprint_24    00003B0C     
doprint_26    00003B4C     doprint_27    00003B84     doprint_28    00003BBC     
doprint_3     00003F6A     doprint_30    00003BF4     doprint_31    00003C1C     
doprint_33    00003AE4     doprint_34    00003AD8     doprint_35    00003AFE     
doprint_36    00003B2E     doprint_37    00003B48     doprint_38    00003B6A     
doprint_39    00003B80     doprint_4     000039AA     doprint_40    00003BA2     
doprint_41    00003BB8     doprint_42    00003BDA     doprint_43    00003BF0     
doprint_44    00003C10     doprint_45    00003C16     doprint_46    00003C3A     
doprint_48    00003C7E     doprint_50    00003C76     doprint_51    00003C7C     
doprint_54    00003C92     doprint_56    00003CB0     doprint_59    00003CD2     
doprint_6     000039D4     doprint_60    00003D10     doprint_62    00003CEA     
doprint_63    00003D02     doprint_64    00003D0A     doprint_65    00003D38     
doprint_67    00003D2E     doprint_68    00003D36     doprint_7     00003A3C     
doprint_73    00003D6C     doprint_76    00003D60     doprint_77    00003D98     
doprint_79    00003D8E     doprint_8     00003A3E     doprint_80    00003F4E     
doprint_81    00003F62     doprint_82    00003E24     doprint_9     00003A3A     
doprint_93    00003DF4     doprint_94    00003DDA     doprint_95    00003E18     
doprint_96    00003E3E     doprint_98    00003E4E     gameOver_1    00002C7E     
gameOver_3    00002CD4     gameOver_4    00002CA0     gameOver_6    00002CC6     
gameOv..eover 00004EDE     getch_1       000038A6     getch_3       000038B6     
heap          08030770     kbhit_1       00000970     kbhit_3       00000972     
ldiv_1        0000365E     ldiv_2        0000366A     ldiv_3        00003672     
ldiv_4        00003674     lmul_1        00003814     lmul_2        0000381A     
lmul_3        00003822     lmul_4        00003824     ltoa_1        00004030     
ltoa_3        0000402A     ltoa_4        00004080     ltoa_5        0000406A     
ltoa_7        00004062     main_1        0000214C     main_3        000021A0     
main_4        000021A6     main_6        000021BC     mainloop      00000426     
menu_1        00001F16     menu_4        00001F52     menu_6        00001F6C     
menu_8        00001F7A     mod_bld_1     0000298E     mod_bld_3     0000299E     
mod_bld_4     0000299E     mod_bld_6     000029B0     mod_bld_7     000029A4     
mod_bld_9     000029AC     printw_1      00002B16     printw_3      00002B56     
printw_4      00002B32     printw_5      00002B52     putch_1       00003724     
say_phoneme_1 000008EA     say_phoneme_3 000008F8     start         00000400     
strcat_1      0000378C     strcat_2      00003792     strcpy_1      00003624     
strlen_1      000040F0     tetris_main_1 000033B8     tetris..in_10 000035A0     
tetris..in_12 000035D6     tetris..in_13 000035C8     tetris..in_14 000035D2     
tetris_main_3 000033E4     tetris_main_4 000033C2     tetris_main_6 000033E0     
tetris_main_7 00003594     tetris_main_9 000035E4     tetris..oop_1 00003320     
tetris..op_10 00003380     tetris..oop_3 00003388     tetris..oop_6 0000334E     
tetris..oop_8 00003386     tolower_1     0000374E     toupper_1     000037B2     
ultoa_1       000040AE     ultoa_3       000040AA     ultoa_4       000040C6     
xtod_1        00000A22     xtod_3        00000A36     xtod_4        00000A30     

Assembly errors: 0
